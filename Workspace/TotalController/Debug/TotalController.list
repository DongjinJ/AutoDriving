
TotalController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d40  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ef0  08003ef0  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08003ef0  08003ef0  00013ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ef8  08003ef8  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08003f00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000034  08003f34  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  08003f34  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdc2  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002079  00000000  00000000  0002ce26  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d18  00000000  00000000  0002eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bf0  00000000  00000000  0002fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001688c  00000000  00000000  000307a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b00c  00000000  00000000  00047034  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d3e8  00000000  00000000  00052040  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df428  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003660  00000000  00000000  000df4a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000034 	.word	0x20000034
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ec0 	.word	0x08003ec0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000038 	.word	0x20000038
 80001d4:	08003ec0 	.word	0x08003ec0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_d2f>:
 8000550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000554:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000558:	bf24      	itt	cs
 800055a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800055e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000562:	d90d      	bls.n	8000580 <__aeabi_d2f+0x30>
 8000564:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000568:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800056c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000570:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000574:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000578:	bf08      	it	eq
 800057a:	f020 0001 	biceq.w	r0, r0, #1
 800057e:	4770      	bx	lr
 8000580:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000584:	d121      	bne.n	80005ca <__aeabi_d2f+0x7a>
 8000586:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800058a:	bfbc      	itt	lt
 800058c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000590:	4770      	bxlt	lr
 8000592:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000596:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800059a:	f1c2 0218 	rsb	r2, r2, #24
 800059e:	f1c2 0c20 	rsb	ip, r2, #32
 80005a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	bf18      	it	ne
 80005ac:	f040 0001 	orrne.w	r0, r0, #1
 80005b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005bc:	ea40 000c 	orr.w	r0, r0, ip
 80005c0:	fa23 f302 	lsr.w	r3, r3, r2
 80005c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005c8:	e7cc      	b.n	8000564 <__aeabi_d2f+0x14>
 80005ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005ce:	d107      	bne.n	80005e0 <__aeabi_d2f+0x90>
 80005d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005d4:	bf1e      	ittt	ne
 80005d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005de:	4770      	bxne	lr
 80005e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <__aeabi_uldivmod>:
 80005f0:	b953      	cbnz	r3, 8000608 <__aeabi_uldivmod+0x18>
 80005f2:	b94a      	cbnz	r2, 8000608 <__aeabi_uldivmod+0x18>
 80005f4:	2900      	cmp	r1, #0
 80005f6:	bf08      	it	eq
 80005f8:	2800      	cmpeq	r0, #0
 80005fa:	bf1c      	itt	ne
 80005fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000600:	f04f 30ff 	movne.w	r0, #4294967295
 8000604:	f000 b972 	b.w	80008ec <__aeabi_idiv0>
 8000608:	f1ad 0c08 	sub.w	ip, sp, #8
 800060c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000610:	f000 f806 	bl	8000620 <__udivmoddi4>
 8000614:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000618:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800061c:	b004      	add	sp, #16
 800061e:	4770      	bx	lr

08000620 <__udivmoddi4>:
 8000620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000624:	9e08      	ldr	r6, [sp, #32]
 8000626:	4604      	mov	r4, r0
 8000628:	4688      	mov	r8, r1
 800062a:	2b00      	cmp	r3, #0
 800062c:	d14b      	bne.n	80006c6 <__udivmoddi4+0xa6>
 800062e:	428a      	cmp	r2, r1
 8000630:	4615      	mov	r5, r2
 8000632:	d967      	bls.n	8000704 <__udivmoddi4+0xe4>
 8000634:	fab2 f282 	clz	r2, r2
 8000638:	b14a      	cbz	r2, 800064e <__udivmoddi4+0x2e>
 800063a:	f1c2 0720 	rsb	r7, r2, #32
 800063e:	fa01 f302 	lsl.w	r3, r1, r2
 8000642:	fa20 f707 	lsr.w	r7, r0, r7
 8000646:	4095      	lsls	r5, r2
 8000648:	ea47 0803 	orr.w	r8, r7, r3
 800064c:	4094      	lsls	r4, r2
 800064e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000652:	0c23      	lsrs	r3, r4, #16
 8000654:	fbb8 f7fe 	udiv	r7, r8, lr
 8000658:	fa1f fc85 	uxth.w	ip, r5
 800065c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000660:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000664:	fb07 f10c 	mul.w	r1, r7, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d909      	bls.n	8000680 <__udivmoddi4+0x60>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000672:	f080 811b 	bcs.w	80008ac <__udivmoddi4+0x28c>
 8000676:	4299      	cmp	r1, r3
 8000678:	f240 8118 	bls.w	80008ac <__udivmoddi4+0x28c>
 800067c:	3f02      	subs	r7, #2
 800067e:	442b      	add	r3, r5
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	b2a4      	uxth	r4, r4
 8000684:	fbb3 f0fe 	udiv	r0, r3, lr
 8000688:	fb0e 3310 	mls	r3, lr, r0, r3
 800068c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000690:	fb00 fc0c 	mul.w	ip, r0, ip
 8000694:	45a4      	cmp	ip, r4
 8000696:	d909      	bls.n	80006ac <__udivmoddi4+0x8c>
 8000698:	192c      	adds	r4, r5, r4
 800069a:	f100 33ff 	add.w	r3, r0, #4294967295
 800069e:	f080 8107 	bcs.w	80008b0 <__udivmoddi4+0x290>
 80006a2:	45a4      	cmp	ip, r4
 80006a4:	f240 8104 	bls.w	80008b0 <__udivmoddi4+0x290>
 80006a8:	3802      	subs	r0, #2
 80006aa:	442c      	add	r4, r5
 80006ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006b0:	eba4 040c 	sub.w	r4, r4, ip
 80006b4:	2700      	movs	r7, #0
 80006b6:	b11e      	cbz	r6, 80006c0 <__udivmoddi4+0xa0>
 80006b8:	40d4      	lsrs	r4, r2
 80006ba:	2300      	movs	r3, #0
 80006bc:	e9c6 4300 	strd	r4, r3, [r6]
 80006c0:	4639      	mov	r1, r7
 80006c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d909      	bls.n	80006de <__udivmoddi4+0xbe>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	f000 80eb 	beq.w	80008a6 <__udivmoddi4+0x286>
 80006d0:	2700      	movs	r7, #0
 80006d2:	e9c6 0100 	strd	r0, r1, [r6]
 80006d6:	4638      	mov	r0, r7
 80006d8:	4639      	mov	r1, r7
 80006da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006de:	fab3 f783 	clz	r7, r3
 80006e2:	2f00      	cmp	r7, #0
 80006e4:	d147      	bne.n	8000776 <__udivmoddi4+0x156>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d302      	bcc.n	80006f0 <__udivmoddi4+0xd0>
 80006ea:	4282      	cmp	r2, r0
 80006ec:	f200 80fa 	bhi.w	80008e4 <__udivmoddi4+0x2c4>
 80006f0:	1a84      	subs	r4, r0, r2
 80006f2:	eb61 0303 	sbc.w	r3, r1, r3
 80006f6:	2001      	movs	r0, #1
 80006f8:	4698      	mov	r8, r3
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d0e0      	beq.n	80006c0 <__udivmoddi4+0xa0>
 80006fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000702:	e7dd      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000704:	b902      	cbnz	r2, 8000708 <__udivmoddi4+0xe8>
 8000706:	deff      	udf	#255	; 0xff
 8000708:	fab2 f282 	clz	r2, r2
 800070c:	2a00      	cmp	r2, #0
 800070e:	f040 808f 	bne.w	8000830 <__udivmoddi4+0x210>
 8000712:	1b49      	subs	r1, r1, r5
 8000714:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000718:	fa1f f885 	uxth.w	r8, r5
 800071c:	2701      	movs	r7, #1
 800071e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000722:	0c23      	lsrs	r3, r4, #16
 8000724:	fb0e 111c 	mls	r1, lr, ip, r1
 8000728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800072c:	fb08 f10c 	mul.w	r1, r8, ip
 8000730:	4299      	cmp	r1, r3
 8000732:	d907      	bls.n	8000744 <__udivmoddi4+0x124>
 8000734:	18eb      	adds	r3, r5, r3
 8000736:	f10c 30ff 	add.w	r0, ip, #4294967295
 800073a:	d202      	bcs.n	8000742 <__udivmoddi4+0x122>
 800073c:	4299      	cmp	r1, r3
 800073e:	f200 80cd 	bhi.w	80008dc <__udivmoddi4+0x2bc>
 8000742:	4684      	mov	ip, r0
 8000744:	1a59      	subs	r1, r3, r1
 8000746:	b2a3      	uxth	r3, r4
 8000748:	fbb1 f0fe 	udiv	r0, r1, lr
 800074c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000750:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000754:	fb08 f800 	mul.w	r8, r8, r0
 8000758:	45a0      	cmp	r8, r4
 800075a:	d907      	bls.n	800076c <__udivmoddi4+0x14c>
 800075c:	192c      	adds	r4, r5, r4
 800075e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000762:	d202      	bcs.n	800076a <__udivmoddi4+0x14a>
 8000764:	45a0      	cmp	r8, r4
 8000766:	f200 80b6 	bhi.w	80008d6 <__udivmoddi4+0x2b6>
 800076a:	4618      	mov	r0, r3
 800076c:	eba4 0408 	sub.w	r4, r4, r8
 8000770:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000774:	e79f      	b.n	80006b6 <__udivmoddi4+0x96>
 8000776:	f1c7 0c20 	rsb	ip, r7, #32
 800077a:	40bb      	lsls	r3, r7
 800077c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000780:	ea4e 0e03 	orr.w	lr, lr, r3
 8000784:	fa01 f407 	lsl.w	r4, r1, r7
 8000788:	fa20 f50c 	lsr.w	r5, r0, ip
 800078c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000790:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000794:	4325      	orrs	r5, r4
 8000796:	fbb3 f9f8 	udiv	r9, r3, r8
 800079a:	0c2c      	lsrs	r4, r5, #16
 800079c:	fb08 3319 	mls	r3, r8, r9, r3
 80007a0:	fa1f fa8e 	uxth.w	sl, lr
 80007a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80007a8:	fb09 f40a 	mul.w	r4, r9, sl
 80007ac:	429c      	cmp	r4, r3
 80007ae:	fa02 f207 	lsl.w	r2, r2, r7
 80007b2:	fa00 f107 	lsl.w	r1, r0, r7
 80007b6:	d90b      	bls.n	80007d0 <__udivmoddi4+0x1b0>
 80007b8:	eb1e 0303 	adds.w	r3, lr, r3
 80007bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80007c0:	f080 8087 	bcs.w	80008d2 <__udivmoddi4+0x2b2>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f240 8084 	bls.w	80008d2 <__udivmoddi4+0x2b2>
 80007ca:	f1a9 0902 	sub.w	r9, r9, #2
 80007ce:	4473      	add	r3, lr
 80007d0:	1b1b      	subs	r3, r3, r4
 80007d2:	b2ad      	uxth	r5, r5
 80007d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007d8:	fb08 3310 	mls	r3, r8, r0, r3
 80007dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007e4:	45a2      	cmp	sl, r4
 80007e6:	d908      	bls.n	80007fa <__udivmoddi4+0x1da>
 80007e8:	eb1e 0404 	adds.w	r4, lr, r4
 80007ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80007f0:	d26b      	bcs.n	80008ca <__udivmoddi4+0x2aa>
 80007f2:	45a2      	cmp	sl, r4
 80007f4:	d969      	bls.n	80008ca <__udivmoddi4+0x2aa>
 80007f6:	3802      	subs	r0, #2
 80007f8:	4474      	add	r4, lr
 80007fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000802:	eba4 040a 	sub.w	r4, r4, sl
 8000806:	454c      	cmp	r4, r9
 8000808:	46c2      	mov	sl, r8
 800080a:	464b      	mov	r3, r9
 800080c:	d354      	bcc.n	80008b8 <__udivmoddi4+0x298>
 800080e:	d051      	beq.n	80008b4 <__udivmoddi4+0x294>
 8000810:	2e00      	cmp	r6, #0
 8000812:	d069      	beq.n	80008e8 <__udivmoddi4+0x2c8>
 8000814:	ebb1 050a 	subs.w	r5, r1, sl
 8000818:	eb64 0403 	sbc.w	r4, r4, r3
 800081c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000820:	40fd      	lsrs	r5, r7
 8000822:	40fc      	lsrs	r4, r7
 8000824:	ea4c 0505 	orr.w	r5, ip, r5
 8000828:	e9c6 5400 	strd	r5, r4, [r6]
 800082c:	2700      	movs	r7, #0
 800082e:	e747      	b.n	80006c0 <__udivmoddi4+0xa0>
 8000830:	f1c2 0320 	rsb	r3, r2, #32
 8000834:	fa20 f703 	lsr.w	r7, r0, r3
 8000838:	4095      	lsls	r5, r2
 800083a:	fa01 f002 	lsl.w	r0, r1, r2
 800083e:	fa21 f303 	lsr.w	r3, r1, r3
 8000842:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000846:	4338      	orrs	r0, r7
 8000848:	0c01      	lsrs	r1, r0, #16
 800084a:	fbb3 f7fe 	udiv	r7, r3, lr
 800084e:	fa1f f885 	uxth.w	r8, r5
 8000852:	fb0e 3317 	mls	r3, lr, r7, r3
 8000856:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800085a:	fb07 f308 	mul.w	r3, r7, r8
 800085e:	428b      	cmp	r3, r1
 8000860:	fa04 f402 	lsl.w	r4, r4, r2
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x256>
 8000866:	1869      	adds	r1, r5, r1
 8000868:	f107 3cff 	add.w	ip, r7, #4294967295
 800086c:	d22f      	bcs.n	80008ce <__udivmoddi4+0x2ae>
 800086e:	428b      	cmp	r3, r1
 8000870:	d92d      	bls.n	80008ce <__udivmoddi4+0x2ae>
 8000872:	3f02      	subs	r7, #2
 8000874:	4429      	add	r1, r5
 8000876:	1acb      	subs	r3, r1, r3
 8000878:	b281      	uxth	r1, r0
 800087a:	fbb3 f0fe 	udiv	r0, r3, lr
 800087e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000882:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000886:	fb00 f308 	mul.w	r3, r0, r8
 800088a:	428b      	cmp	r3, r1
 800088c:	d907      	bls.n	800089e <__udivmoddi4+0x27e>
 800088e:	1869      	adds	r1, r5, r1
 8000890:	f100 3cff 	add.w	ip, r0, #4294967295
 8000894:	d217      	bcs.n	80008c6 <__udivmoddi4+0x2a6>
 8000896:	428b      	cmp	r3, r1
 8000898:	d915      	bls.n	80008c6 <__udivmoddi4+0x2a6>
 800089a:	3802      	subs	r0, #2
 800089c:	4429      	add	r1, r5
 800089e:	1ac9      	subs	r1, r1, r3
 80008a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80008a4:	e73b      	b.n	800071e <__udivmoddi4+0xfe>
 80008a6:	4637      	mov	r7, r6
 80008a8:	4630      	mov	r0, r6
 80008aa:	e709      	b.n	80006c0 <__udivmoddi4+0xa0>
 80008ac:	4607      	mov	r7, r0
 80008ae:	e6e7      	b.n	8000680 <__udivmoddi4+0x60>
 80008b0:	4618      	mov	r0, r3
 80008b2:	e6fb      	b.n	80006ac <__udivmoddi4+0x8c>
 80008b4:	4541      	cmp	r1, r8
 80008b6:	d2ab      	bcs.n	8000810 <__udivmoddi4+0x1f0>
 80008b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008bc:	eb69 020e 	sbc.w	r2, r9, lr
 80008c0:	3801      	subs	r0, #1
 80008c2:	4613      	mov	r3, r2
 80008c4:	e7a4      	b.n	8000810 <__udivmoddi4+0x1f0>
 80008c6:	4660      	mov	r0, ip
 80008c8:	e7e9      	b.n	800089e <__udivmoddi4+0x27e>
 80008ca:	4618      	mov	r0, r3
 80008cc:	e795      	b.n	80007fa <__udivmoddi4+0x1da>
 80008ce:	4667      	mov	r7, ip
 80008d0:	e7d1      	b.n	8000876 <__udivmoddi4+0x256>
 80008d2:	4681      	mov	r9, r0
 80008d4:	e77c      	b.n	80007d0 <__udivmoddi4+0x1b0>
 80008d6:	3802      	subs	r0, #2
 80008d8:	442c      	add	r4, r5
 80008da:	e747      	b.n	800076c <__udivmoddi4+0x14c>
 80008dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008e0:	442b      	add	r3, r5
 80008e2:	e72f      	b.n	8000744 <__udivmoddi4+0x124>
 80008e4:	4638      	mov	r0, r7
 80008e6:	e708      	b.n	80006fa <__udivmoddi4+0xda>
 80008e8:	4637      	mov	r7, r6
 80008ea:	e6e9      	b.n	80006c0 <__udivmoddi4+0xa0>

080008ec <__aeabi_idiv0>:
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop

080008f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0d      	ldr	r2, [pc, #52]	; (8000930 <HAL_Init+0x40>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <HAL_Init+0x40>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <HAL_Init+0x40>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_Init+0x40>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a07      	ldr	r2, [pc, #28]	; (8000930 <HAL_Init+0x40>)
 8000912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000918:	2003      	movs	r0, #3
 800091a:	f000 f94d 	bl	8000bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 f808 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000924:	f003 f886 	bl	8003a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023c00 	.word	0x40023c00

08000934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <HAL_InitTick+0x54>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x58>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094a:	fbb3 f3f1 	udiv	r3, r3, r1
 800094e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000952:	4618      	mov	r0, r3
 8000954:	f000 f965 	bl	8000c22 <HAL_SYSTICK_Config>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e00e      	b.n	8000980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	d80a      	bhi.n	800097e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f000 f92d 	bl	8000bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_InitTick+0x5c>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e000      	b.n	8000980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000030 	.word	0x20000030
 800098c:	20000004 	.word	0x20000004
 8000990:	20000000 	.word	0x20000000

08000994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_IncTick+0x20>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	461a      	mov	r2, r3
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x24>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4413      	add	r3, r2
 80009a4:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_IncTick+0x24>)
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000004 	.word	0x20000004
 80009b8:	20000054 	.word	0x20000054

080009bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return uwTick;
 80009c0:	4b03      	ldr	r3, [pc, #12]	; (80009d0 <HAL_GetTick+0x14>)
 80009c2:	681b      	ldr	r3, [r3, #0]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000054 	.word	0x20000054

080009d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009dc:	f7ff ffee 	bl	80009bc <HAL_GetTick>
 80009e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ec:	d005      	beq.n	80009fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_Delay+0x40>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	461a      	mov	r2, r3
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4413      	add	r3, r2
 80009f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009fa:	bf00      	nop
 80009fc:	f7ff ffde 	bl	80009bc <HAL_GetTick>
 8000a00:	4602      	mov	r2, r0
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d8f7      	bhi.n	80009fc <HAL_Delay+0x28>
  {
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	20000004 	.word	0x20000004

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	60d3      	str	r3, [r2, #12]
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db0b      	blt.n	8000aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f003 021f 	and.w	r2, r3, #31
 8000a94:	4907      	ldr	r1, [pc, #28]	; (8000ab4 <__NVIC_EnableIRQ+0x38>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	095b      	lsrs	r3, r3, #5
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000e100 	.word	0xe000e100

08000ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	6039      	str	r1, [r7, #0]
 8000ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db0a      	blt.n	8000ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	490c      	ldr	r1, [pc, #48]	; (8000b04 <__NVIC_SetPriority+0x4c>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	0112      	lsls	r2, r2, #4
 8000ad8:	b2d2      	uxtb	r2, r2
 8000ada:	440b      	add	r3, r1
 8000adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae0:	e00a      	b.n	8000af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	b2da      	uxtb	r2, r3
 8000ae6:	4908      	ldr	r1, [pc, #32]	; (8000b08 <__NVIC_SetPriority+0x50>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	f003 030f 	and.w	r3, r3, #15
 8000aee:	3b04      	subs	r3, #4
 8000af0:	0112      	lsls	r2, r2, #4
 8000af2:	b2d2      	uxtb	r2, r2
 8000af4:	440b      	add	r3, r1
 8000af6:	761a      	strb	r2, [r3, #24]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000e100 	.word	0xe000e100
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b089      	sub	sp, #36	; 0x24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	f1c3 0307 	rsb	r3, r3, #7
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	bf28      	it	cs
 8000b2a:	2304      	movcs	r3, #4
 8000b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	3304      	adds	r3, #4
 8000b32:	2b06      	cmp	r3, #6
 8000b34:	d902      	bls.n	8000b3c <NVIC_EncodePriority+0x30>
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3b03      	subs	r3, #3
 8000b3a:	e000      	b.n	8000b3e <NVIC_EncodePriority+0x32>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b40:	f04f 32ff 	mov.w	r2, #4294967295
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	43da      	mvns	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b54:	f04f 31ff 	mov.w	r1, #4294967295
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b5e:	43d9      	mvns	r1, r3
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	4313      	orrs	r3, r2
         );
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3724      	adds	r7, #36	; 0x24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b84:	d301      	bcc.n	8000b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b86:	2301      	movs	r3, #1
 8000b88:	e00f      	b.n	8000baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <SysTick_Config+0x40>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b92:	210f      	movs	r1, #15
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	f7ff ff8e 	bl	8000ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <SysTick_Config+0x40>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <SysTick_Config+0x40>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	e000e010 	.word	0xe000e010

08000bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff ff29 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	b086      	sub	sp, #24
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be0:	f7ff ff3e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	68b9      	ldr	r1, [r7, #8]
 8000bea:	6978      	ldr	r0, [r7, #20]
 8000bec:	f7ff ff8e 	bl	8000b0c <NVIC_EncodePriority>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf6:	4611      	mov	r1, r2
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff5d 	bl	8000ab8 <__NVIC_SetPriority>
}
 8000bfe:	bf00      	nop
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b082      	sub	sp, #8
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff31 	bl	8000a7c <__NVIC_EnableIRQ>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b082      	sub	sp, #8
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffa2 	bl	8000b74 <SysTick_Config>
 8000c30:	4603      	mov	r3, r0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d004      	beq.n	8000c58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2280      	movs	r2, #128	; 0x80
 8000c52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e00c      	b.n	8000c72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2205      	movs	r2, #5
 8000c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f022 0201 	bic.w	r2, r2, #1
 8000c6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
	...

08000c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e159      	b.n	8000f50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8148 	bne.w	8000f4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d00b      	beq.n	8000cda <HAL_GPIO_Init+0x5a>
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cce:	2b11      	cmp	r3, #17
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b12      	cmp	r3, #18
 8000cd8:	d130      	bne.n	8000d3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d10:	2201      	movs	r2, #1
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	091b      	lsrs	r3, r3, #4
 8000d26:	f003 0201 	and.w	r2, r3, #1
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69ba      	ldr	r2, [r7, #24]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0xfc>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2b12      	cmp	r3, #18
 8000d7a:	d123      	bne.n	8000dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	08da      	lsrs	r2, r3, #3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3208      	adds	r2, #8
 8000d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	220f      	movs	r2, #15
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	08da      	lsrs	r2, r3, #3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	69b9      	ldr	r1, [r7, #24]
 8000dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0203 	and.w	r2, r3, #3
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 80a2 	beq.w	8000f4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b56      	ldr	r3, [pc, #344]	; (8000f64 <HAL_GPIO_Init+0x2e4>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a55      	ldr	r2, [pc, #340]	; (8000f64 <HAL_GPIO_Init+0x2e4>)
 8000e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <HAL_GPIO_Init+0x2e4>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e22:	4a51      	ldr	r2, [pc, #324]	; (8000f68 <HAL_GPIO_Init+0x2e8>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a48      	ldr	r2, [pc, #288]	; (8000f6c <HAL_GPIO_Init+0x2ec>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x202>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <HAL_GPIO_Init+0x2f0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x1fe>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a46      	ldr	r2, [pc, #280]	; (8000f74 <HAL_GPIO_Init+0x2f4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x1fa>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a45      	ldr	r2, [pc, #276]	; (8000f78 <HAL_GPIO_Init+0x2f8>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x1f6>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a44      	ldr	r2, [pc, #272]	; (8000f7c <HAL_GPIO_Init+0x2fc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x1f2>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e008      	b.n	8000e84 <HAL_GPIO_Init+0x204>
 8000e72:	2307      	movs	r3, #7
 8000e74:	e006      	b.n	8000e84 <HAL_GPIO_Init+0x204>
 8000e76:	2303      	movs	r3, #3
 8000e78:	e004      	b.n	8000e84 <HAL_GPIO_Init+0x204>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_Init+0x204>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e000      	b.n	8000e84 <HAL_GPIO_Init+0x204>
 8000e82:	2300      	movs	r3, #0
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	f002 0203 	and.w	r2, r2, #3
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	4093      	lsls	r3, r2
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e94:	4934      	ldr	r1, [pc, #208]	; (8000f68 <HAL_GPIO_Init+0x2e8>)
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	089b      	lsrs	r3, r3, #2
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea2:	4b37      	ldr	r3, [pc, #220]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec6:	4a2e      	ldr	r2, [pc, #184]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ef0:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1a:	4a19      	ldr	r2, [pc, #100]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_GPIO_Init+0x300>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	61fb      	str	r3, [r7, #28]
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	2b0f      	cmp	r3, #15
 8000f54:	f67f aea2 	bls.w	8000c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3724      	adds	r7, #36	; 0x24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40013c00 	.word	0x40013c00

08000f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
 8000f90:	4613      	mov	r3, r2
 8000f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f94:	787b      	ldrb	r3, [r7, #1]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa0:	e003      	b.n	8000faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fa2:	887b      	ldrh	r3, [r7, #2]
 8000fa4:	041a      	lsls	r2, r3, #16
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	619a      	str	r2, [r3, #24]
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e25b      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d075      	beq.n	80010c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fd6:	4ba3      	ldr	r3, [pc, #652]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	f003 030c 	and.w	r3, r3, #12
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	d00c      	beq.n	8000ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fe2:	4ba0      	ldr	r3, [pc, #640]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fea:	2b08      	cmp	r3, #8
 8000fec:	d112      	bne.n	8001014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fee:	4b9d      	ldr	r3, [pc, #628]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ffa:	d10b      	bne.n	8001014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	4b99      	ldr	r3, [pc, #612]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d05b      	beq.n	80010c0 <HAL_RCC_OscConfig+0x108>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d157      	bne.n	80010c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	e236      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800101c:	d106      	bne.n	800102c <HAL_RCC_OscConfig+0x74>
 800101e:	4b91      	ldr	r3, [pc, #580]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a90      	ldr	r2, [pc, #576]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e01d      	b.n	8001068 <HAL_RCC_OscConfig+0xb0>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001034:	d10c      	bne.n	8001050 <HAL_RCC_OscConfig+0x98>
 8001036:	4b8b      	ldr	r3, [pc, #556]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a8a      	ldr	r2, [pc, #552]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 800103c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	4b88      	ldr	r3, [pc, #544]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a87      	ldr	r2, [pc, #540]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	e00b      	b.n	8001068 <HAL_RCC_OscConfig+0xb0>
 8001050:	4b84      	ldr	r3, [pc, #528]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a83      	ldr	r2, [pc, #524]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105a:	6013      	str	r3, [r2, #0]
 800105c:	4b81      	ldr	r3, [pc, #516]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a80      	ldr	r2, [pc, #512]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d013      	beq.n	8001098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fca4 	bl	80009bc <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fca0 	bl	80009bc <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1fb      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108a:	4b76      	ldr	r3, [pc, #472]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f0      	beq.n	8001078 <HAL_RCC_OscConfig+0xc0>
 8001096:	e014      	b.n	80010c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff fc90 	bl	80009bc <HAL_GetTick>
 800109c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800109e:	e008      	b.n	80010b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fc8c 	bl	80009bc <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	2b64      	cmp	r3, #100	; 0x64
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e1e7      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b2:	4b6c      	ldr	r3, [pc, #432]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f0      	bne.n	80010a0 <HAL_RCC_OscConfig+0xe8>
 80010be:	e000      	b.n	80010c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d063      	beq.n	8001196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ce:	4b65      	ldr	r3, [pc, #404]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d00b      	beq.n	80010f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010da:	4b62      	ldr	r3, [pc, #392]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010e2:	2b08      	cmp	r3, #8
 80010e4:	d11c      	bne.n	8001120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d116      	bne.n	8001120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f2:	4b5c      	ldr	r3, [pc, #368]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <HAL_RCC_OscConfig+0x152>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d001      	beq.n	800110a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e1bb      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110a:	4b56      	ldr	r3, [pc, #344]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	691b      	ldr	r3, [r3, #16]
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4952      	ldr	r1, [pc, #328]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	e03a      	b.n	8001196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d020      	beq.n	800116a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001128:	4b4f      	ldr	r3, [pc, #316]	; (8001268 <HAL_RCC_OscConfig+0x2b0>)
 800112a:	2201      	movs	r2, #1
 800112c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800112e:	f7ff fc45 	bl	80009bc <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001134:	e008      	b.n	8001148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001136:	f7ff fc41 	bl	80009bc <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	2b02      	cmp	r3, #2
 8001142:	d901      	bls.n	8001148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e19c      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001148:	4b46      	ldr	r3, [pc, #280]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f0      	beq.n	8001136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001154:	4b43      	ldr	r3, [pc, #268]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	4940      	ldr	r1, [pc, #256]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001164:	4313      	orrs	r3, r2
 8001166:	600b      	str	r3, [r1, #0]
 8001168:	e015      	b.n	8001196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116a:	4b3f      	ldr	r3, [pc, #252]	; (8001268 <HAL_RCC_OscConfig+0x2b0>)
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fc24 	bl	80009bc <HAL_GetTick>
 8001174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001176:	e008      	b.n	800118a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001178:	f7ff fc20 	bl	80009bc <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	2b02      	cmp	r3, #2
 8001184:	d901      	bls.n	800118a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e17b      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118a:	4b36      	ldr	r3, [pc, #216]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	2b00      	cmp	r3, #0
 8001194:	d1f0      	bne.n	8001178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0308 	and.w	r3, r3, #8
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d030      	beq.n	8001204 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d016      	beq.n	80011d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <HAL_RCC_OscConfig+0x2b4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b0:	f7ff fc04 	bl	80009bc <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011b8:	f7ff fc00 	bl	80009bc <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e15b      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 80011cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x200>
 80011d6:	e015      	b.n	8001204 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <HAL_RCC_OscConfig+0x2b4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fbed 	bl	80009bc <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011e6:	f7ff fbe9 	bl	80009bc <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e144      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f0      	bne.n	80011e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0304 	and.w	r3, r3, #4
 800120c:	2b00      	cmp	r3, #0
 800120e:	f000 80a0 	beq.w	8001352 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10f      	bne.n	8001242 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a0e      	ldr	r2, [pc, #56]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_OscConfig+0x2b8>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124a:	2b00      	cmp	r3, #0
 800124c:	d121      	bne.n	8001292 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_RCC_OscConfig+0x2b8>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_RCC_OscConfig+0x2b8>)
 8001254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800125a:	f7ff fbaf 	bl	80009bc <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001260:	e011      	b.n	8001286 <HAL_RCC_OscConfig+0x2ce>
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800
 8001268:	42470000 	.word	0x42470000
 800126c:	42470e80 	.word	0x42470e80
 8001270:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001274:	f7ff fba2 	bl	80009bc <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e0fd      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b81      	ldr	r3, [pc, #516]	; (800148c <HAL_RCC_OscConfig+0x4d4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0f0      	beq.n	8001274 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x2f0>
 800129a:	4b7d      	ldr	r3, [pc, #500]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 800129c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129e:	4a7c      	ldr	r2, [pc, #496]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6713      	str	r3, [r2, #112]	; 0x70
 80012a6:	e01c      	b.n	80012e2 <HAL_RCC_OscConfig+0x32a>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b05      	cmp	r3, #5
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x312>
 80012b0:	4b77      	ldr	r3, [pc, #476]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b4:	4a76      	ldr	r2, [pc, #472]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6713      	str	r3, [r2, #112]	; 0x70
 80012bc:	4b74      	ldr	r3, [pc, #464]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c0:	4a73      	ldr	r2, [pc, #460]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6713      	str	r3, [r2, #112]	; 0x70
 80012c8:	e00b      	b.n	80012e2 <HAL_RCC_OscConfig+0x32a>
 80012ca:	4b71      	ldr	r3, [pc, #452]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ce:	4a70      	ldr	r2, [pc, #448]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012d0:	f023 0301 	bic.w	r3, r3, #1
 80012d4:	6713      	str	r3, [r2, #112]	; 0x70
 80012d6:	4b6e      	ldr	r3, [pc, #440]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012da:	4a6d      	ldr	r2, [pc, #436]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80012dc:	f023 0304 	bic.w	r3, r3, #4
 80012e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d015      	beq.n	8001316 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb67 	bl	80009bc <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f0:	e00a      	b.n	8001308 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f2:	f7ff fb63 	bl	80009bc <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001300:	4293      	cmp	r3, r2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e0bc      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001308:	4b61      	ldr	r3, [pc, #388]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 800130a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0ee      	beq.n	80012f2 <HAL_RCC_OscConfig+0x33a>
 8001314:	e014      	b.n	8001340 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fb51 	bl	80009bc <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131c:	e00a      	b.n	8001334 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131e:	f7ff fb4d 	bl	80009bc <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	f241 3288 	movw	r2, #5000	; 0x1388
 800132c:	4293      	cmp	r3, r2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e0a6      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001334:	4b56      	ldr	r3, [pc, #344]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 8001336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1ee      	bne.n	800131e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d105      	bne.n	8001352 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001346:	4b52      	ldr	r3, [pc, #328]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a51      	ldr	r2, [pc, #324]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 800134c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f000 8092 	beq.w	8001480 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800135c:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	2b08      	cmp	r3, #8
 8001366:	d05c      	beq.n	8001422 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d141      	bne.n	80013f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <HAL_RCC_OscConfig+0x4dc>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fb21 	bl	80009bc <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fb1d 	bl	80009bc <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e078      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001390:	4b3f      	ldr	r3, [pc, #252]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f0      	bne.n	800137e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69da      	ldr	r2, [r3, #28]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013aa:	019b      	lsls	r3, r3, #6
 80013ac:	431a      	orrs	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b2:	085b      	lsrs	r3, r3, #1
 80013b4:	3b01      	subs	r3, #1
 80013b6:	041b      	lsls	r3, r3, #16
 80013b8:	431a      	orrs	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013be:	061b      	lsls	r3, r3, #24
 80013c0:	4933      	ldr	r1, [pc, #204]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c6:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_RCC_OscConfig+0x4dc>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff faf6 	bl	80009bc <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff faf2 	bl	80009bc <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e04d      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e6:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x41c>
 80013f2:	e045      	b.n	8001480 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_RCC_OscConfig+0x4dc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fadf 	bl	80009bc <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001402:	f7ff fadb 	bl	80009bc <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e036      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f0      	bne.n	8001402 <HAL_RCC_OscConfig+0x44a>
 8001420:	e02e      	b.n	8001480 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e029      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_RCC_OscConfig+0x4d8>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	429a      	cmp	r2, r3
 8001440:	d11c      	bne.n	800147c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800144c:	429a      	cmp	r2, r3
 800144e:	d115      	bne.n	800147c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001456:	4013      	ands	r3, r2
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800145c:	4293      	cmp	r3, r2
 800145e:	d10d      	bne.n	800147c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800146a:	429a      	cmp	r2, r3
 800146c:	d106      	bne.n	800147c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40007000 	.word	0x40007000
 8001490:	40023800 	.word	0x40023800
 8001494:	42470060 	.word	0x42470060

08001498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0cc      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014ac:	4b68      	ldr	r3, [pc, #416]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 030f 	and.w	r3, r3, #15
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d90c      	bls.n	80014d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ba:	4b65      	ldr	r3, [pc, #404]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c2:	4b63      	ldr	r3, [pc, #396]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d001      	beq.n	80014d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e0b8      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d020      	beq.n	8001522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ec:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b00      	cmp	r3, #0
 8001502:	d005      	beq.n	8001510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001504:	4b53      	ldr	r3, [pc, #332]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	4a52      	ldr	r2, [pc, #328]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 800150a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800150e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001510:	4b50      	ldr	r3, [pc, #320]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	494d      	ldr	r1, [pc, #308]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	4313      	orrs	r3, r2
 8001520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d044      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d107      	bne.n	8001546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d119      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e07f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b02      	cmp	r3, #2
 800154c:	d003      	beq.n	8001556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001552:	2b03      	cmp	r3, #3
 8001554:	d107      	bne.n	8001566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001556:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d109      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e06f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001566:	4b3b      	ldr	r3, [pc, #236]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e067      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001576:	4b37      	ldr	r3, [pc, #220]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f023 0203 	bic.w	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	4934      	ldr	r1, [pc, #208]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001584:	4313      	orrs	r3, r2
 8001586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001588:	f7ff fa18 	bl	80009bc <HAL_GetTick>
 800158c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	e00a      	b.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001590:	f7ff fa14 	bl	80009bc <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	f241 3288 	movw	r2, #5000	; 0x1388
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e04f      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 020c 	and.w	r2, r3, #12
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d1eb      	bne.n	8001590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d20c      	bcs.n	80015e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e032      	b.n	8001646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ec:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4916      	ldr	r1, [pc, #88]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d009      	beq.n	800161e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	490e      	ldr	r1, [pc, #56]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800161e:	f000 f821 	bl	8001664 <HAL_RCC_GetSysClockFreq>
 8001622:	4601      	mov	r1, r0
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_RCC_ClockConfig+0x1c0>)
 8001630:	5cd3      	ldrb	r3, [r2, r3]
 8001632:	fa21 f303 	lsr.w	r3, r1, r3
 8001636:	4a09      	ldr	r2, [pc, #36]	; (800165c <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_RCC_ClockConfig+0x1c8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f978 	bl	8000934 <HAL_InitTick>

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023c00 	.word	0x40023c00
 8001654:	40023800 	.word	0x40023800
 8001658:	08003ed8 	.word	0x08003ed8
 800165c:	20000030 	.word	0x20000030
 8001660:	20000000 	.word	0x20000000

08001664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	2300      	movs	r3, #0
 8001674:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
 8001682:	2b04      	cmp	r3, #4
 8001684:	d007      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0x32>
 8001686:	2b08      	cmp	r3, #8
 8001688:	d008      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x38>
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 80b4 	bne.w	80017f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001690:	4b5e      	ldr	r3, [pc, #376]	; (800180c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001692:	60bb      	str	r3, [r7, #8]
       break;
 8001694:	e0b3      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001696:	4b5e      	ldr	r3, [pc, #376]	; (8001810 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001698:	60bb      	str	r3, [r7, #8]
      break;
 800169a:	e0b0      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800169c:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016a6:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d04a      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016b2:	4b55      	ldr	r3, [pc, #340]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	099b      	lsrs	r3, r3, #6
 80016b8:	f04f 0400 	mov.w	r4, #0
 80016bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	ea03 0501 	and.w	r5, r3, r1
 80016c8:	ea04 0602 	and.w	r6, r4, r2
 80016cc:	4629      	mov	r1, r5
 80016ce:	4632      	mov	r2, r6
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	f04f 0400 	mov.w	r4, #0
 80016d8:	0154      	lsls	r4, r2, #5
 80016da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016de:	014b      	lsls	r3, r1, #5
 80016e0:	4619      	mov	r1, r3
 80016e2:	4622      	mov	r2, r4
 80016e4:	1b49      	subs	r1, r1, r5
 80016e6:	eb62 0206 	sbc.w	r2, r2, r6
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	f04f 0400 	mov.w	r4, #0
 80016f2:	0194      	lsls	r4, r2, #6
 80016f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016f8:	018b      	lsls	r3, r1, #6
 80016fa:	1a5b      	subs	r3, r3, r1
 80016fc:	eb64 0402 	sbc.w	r4, r4, r2
 8001700:	f04f 0100 	mov.w	r1, #0
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	00e2      	lsls	r2, r4, #3
 800170a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800170e:	00d9      	lsls	r1, r3, #3
 8001710:	460b      	mov	r3, r1
 8001712:	4614      	mov	r4, r2
 8001714:	195b      	adds	r3, r3, r5
 8001716:	eb44 0406 	adc.w	r4, r4, r6
 800171a:	f04f 0100 	mov.w	r1, #0
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	0262      	lsls	r2, r4, #9
 8001724:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001728:	0259      	lsls	r1, r3, #9
 800172a:	460b      	mov	r3, r1
 800172c:	4614      	mov	r4, r2
 800172e:	4618      	mov	r0, r3
 8001730:	4621      	mov	r1, r4
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f04f 0400 	mov.w	r4, #0
 8001738:	461a      	mov	r2, r3
 800173a:	4623      	mov	r3, r4
 800173c:	f7fe ff58 	bl	80005f0 <__aeabi_uldivmod>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e049      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001748:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	f04f 0400 	mov.w	r4, #0
 8001752:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	ea03 0501 	and.w	r5, r3, r1
 800175e:	ea04 0602 	and.w	r6, r4, r2
 8001762:	4629      	mov	r1, r5
 8001764:	4632      	mov	r2, r6
 8001766:	f04f 0300 	mov.w	r3, #0
 800176a:	f04f 0400 	mov.w	r4, #0
 800176e:	0154      	lsls	r4, r2, #5
 8001770:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001774:	014b      	lsls	r3, r1, #5
 8001776:	4619      	mov	r1, r3
 8001778:	4622      	mov	r2, r4
 800177a:	1b49      	subs	r1, r1, r5
 800177c:	eb62 0206 	sbc.w	r2, r2, r6
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	f04f 0400 	mov.w	r4, #0
 8001788:	0194      	lsls	r4, r2, #6
 800178a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800178e:	018b      	lsls	r3, r1, #6
 8001790:	1a5b      	subs	r3, r3, r1
 8001792:	eb64 0402 	sbc.w	r4, r4, r2
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	00e2      	lsls	r2, r4, #3
 80017a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80017a4:	00d9      	lsls	r1, r3, #3
 80017a6:	460b      	mov	r3, r1
 80017a8:	4614      	mov	r4, r2
 80017aa:	195b      	adds	r3, r3, r5
 80017ac:	eb44 0406 	adc.w	r4, r4, r6
 80017b0:	f04f 0100 	mov.w	r1, #0
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	02a2      	lsls	r2, r4, #10
 80017ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017be:	0299      	lsls	r1, r3, #10
 80017c0:	460b      	mov	r3, r1
 80017c2:	4614      	mov	r4, r2
 80017c4:	4618      	mov	r0, r3
 80017c6:	4621      	mov	r1, r4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	461a      	mov	r2, r3
 80017d0:	4623      	mov	r3, r4
 80017d2:	f7fe ff0d 	bl	80005f0 <__aeabi_uldivmod>
 80017d6:	4603      	mov	r3, r0
 80017d8:	460c      	mov	r4, r1
 80017da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	3301      	adds	r3, #1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017ec:	68fa      	ldr	r2, [r7, #12]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	60bb      	str	r3, [r7, #8]
      break;
 80017f6:	e002      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80017fa:	60bb      	str	r3, [r7, #8]
      break;
 80017fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fe:	68bb      	ldr	r3, [r7, #8]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	00f42400 	.word	0x00f42400
 8001810:	007a1200 	.word	0x007a1200

08001814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <HAL_RCC_GetHCLKFreq+0x14>)
 800181a:	681b      	ldr	r3, [r3, #0]
}
 800181c:	4618      	mov	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	20000030 	.word	0x20000030

0800182c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001830:	f7ff fff0 	bl	8001814 <HAL_RCC_GetHCLKFreq>
 8001834:	4601      	mov	r1, r0
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	0a9b      	lsrs	r3, r3, #10
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	4a03      	ldr	r2, [pc, #12]	; (8001850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001842:	5cd3      	ldrb	r3, [r2, r3]
 8001844:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001848:	4618      	mov	r0, r3
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	08003ee8 	.word	0x08003ee8

08001854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001858:	f7ff ffdc 	bl	8001814 <HAL_RCC_GetHCLKFreq>
 800185c:	4601      	mov	r1, r0
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	0b5b      	lsrs	r3, r3, #13
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x24>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40023800 	.word	0x40023800
 8001878:	08003ee8 	.word	0x08003ee8

0800187c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d035      	beq.n	8001910 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80018a4:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80018aa:	f7ff f887 	bl	80009bc <HAL_GetTick>
 80018ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80018b2:	f7ff f883 	bl	80009bc <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e0ba      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80018c4:	4b60      	ldr	r3, [pc, #384]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	019a      	lsls	r2, r3, #6
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	071b      	lsls	r3, r3, #28
 80018dc:	495a      	ldr	r1, [pc, #360]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80018ea:	f7ff f867 	bl	80009bc <HAL_GetTick>
 80018ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80018f2:	f7ff f863 	bl	80009bc <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e09a      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 8083 	beq.w	8001a24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a48      	ldr	r2, [pc, #288]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b46      	ldr	r3, [pc, #280]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800193a:	4b44      	ldr	r3, [pc, #272]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a43      	ldr	r2, [pc, #268]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001944:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001946:	f7ff f839 	bl	80009bc <HAL_GetTick>
 800194a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7ff f835 	bl	80009bc <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e06c      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800196c:	4b36      	ldr	r3, [pc, #216]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001974:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d02f      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	429a      	cmp	r2, r3
 8001988:	d028      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800198a:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800198c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001992:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001994:	4b2e      	ldr	r3, [pc, #184]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001996:	2201      	movs	r2, #1
 8001998:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80019a0:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d114      	bne.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80019b2:	f7ff f803 	bl	80009bc <HAL_GetTick>
 80019b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ba:	f7fe ffff 	bl	80009bc <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e034      	b.n	8001a3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80019d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ee      	beq.n	80019ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019e8:	d10d      	bne.n	8001a06 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80019fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019fe:	4912      	ldr	r1, [pc, #72]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
 8001a04:	e005      	b.n	8001a12 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001a10:	6093      	str	r3, [r2, #8]
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1e:	490a      	ldr	r1, [pc, #40]	; (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0308 	and.w	r3, r3, #8
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7c1a      	ldrb	r2, [r3, #16]
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001a36:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	42470068 	.word	0x42470068
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40007000 	.word	0x40007000
 8001a50:	42470e40 	.word	0x42470e40
 8001a54:	424711e0 	.word	0x424711e0

08001a58 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e083      	b.n	8001b72 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	7f5b      	ldrb	r3, [r3, #29]
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f001 ffc4 	bl	8003a08 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2202      	movs	r2, #2
 8001a84:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	22ca      	movs	r2, #202	; 0xca
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2253      	movs	r2, #83	; 0x53
 8001a94:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f9fb 	bl	8001e92 <RTC_EnterInitMode>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d008      	beq.n	8001ab4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	22ff      	movs	r2, #255	; 0xff
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2204      	movs	r2, #4
 8001aae:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e05e      	b.n	8001b72 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ac6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6899      	ldr	r1, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68d2      	ldr	r2, [r2, #12]
 8001aee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6919      	ldr	r1, [r3, #16]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	041a      	lsls	r2, r3, #16
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b12:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 0320 	and.w	r3, r3, #32
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d10e      	bne.n	8001b40 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f98d 	bl	8001e42 <HAL_RTC_WaitForSynchro>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	22ff      	movs	r2, #255	; 0xff
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e018      	b.n	8001b72 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	22ff      	movs	r2, #255	; 0xff
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
  }
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b7a:	b590      	push	{r4, r7, lr}
 8001b7c:	b087      	sub	sp, #28
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	7f1b      	ldrb	r3, [r3, #28]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_RTC_SetTime+0x1c>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e0aa      	b.n	8001cec <HAL_RTC_SetTime+0x172>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d126      	bne.n	8001bf6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f000 f992 	bl	8001eea <RTC_ByteToBcd2>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	785b      	ldrb	r3, [r3, #1]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f98b 	bl	8001eea <RTC_ByteToBcd2>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001bd8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	789b      	ldrb	r3, [r3, #2]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f983 	bl	8001eea <RTC_ByteToBcd2>
 8001be4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8001be6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	78db      	ldrb	r3, [r3, #3]
 8001bee:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	e018      	b.n	8001c28 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d102      	bne.n	8001c0a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2200      	movs	r2, #0
 8001c08:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	785b      	ldrb	r3, [r3, #1]
 8001c14:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c16:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8001c18:	68ba      	ldr	r2, [r7, #8]
 8001c1a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8001c1c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	78db      	ldrb	r3, [r3, #3]
 8001c22:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	22ca      	movs	r2, #202	; 0xca
 8001c2e:	625a      	str	r2, [r3, #36]	; 0x24
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2253      	movs	r2, #83	; 0x53
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f000 f92a 	bl	8001e92 <RTC_EnterInitMode>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00b      	beq.n	8001c5c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	22ff      	movs	r2, #255	; 0xff
 8001c4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e047      	b.n	8001cec <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8001c66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001c6a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689a      	ldr	r2, [r3, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	6899      	ldr	r1, [r3, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ca2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d111      	bne.n	8001cd6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f8c5 	bl	8001e42 <HAL_RTC_WaitForSynchro>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	22ff      	movs	r2, #255	; 0xff
 8001cc4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00a      	b.n	8001cec <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	22ff      	movs	r2, #255	; 0xff
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8001cea:	2300      	movs	r3, #0
  }
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	371c      	adds	r7, #28
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}

08001cf4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001cf4:	b590      	push	{r4, r7, lr}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	7f1b      	ldrb	r3, [r3, #28]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_RTC_SetDate+0x1c>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e094      	b.n	8001e3a <HAL_RTC_SetDate+0x146>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10e      	bne.n	8001d40 <HAL_RTC_SetDate+0x4c>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d008      	beq.n	8001d40 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	785b      	ldrb	r3, [r3, #1]
 8001d32:	f023 0310 	bic.w	r3, r3, #16
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	330a      	adds	r3, #10
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d11c      	bne.n	8001d80 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	78db      	ldrb	r3, [r3, #3]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f8cd 	bl	8001eea <RTC_ByteToBcd2>
 8001d50:	4603      	mov	r3, r0
 8001d52:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	785b      	ldrb	r3, [r3, #1]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f8c6 	bl	8001eea <RTC_ByteToBcd2>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001d62:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f000 f8be 	bl	8001eea <RTC_ByteToBcd2>
 8001d6e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8001d70:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	e00e      	b.n	8001d9e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	78db      	ldrb	r3, [r3, #3]
 8001d84:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001d8c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8001d92:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	22ca      	movs	r2, #202	; 0xca
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2253      	movs	r2, #83	; 0x53
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f86f 	bl	8001e92 <RTC_EnterInitMode>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	22ff      	movs	r2, #255	; 0xff
 8001dc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e033      	b.n	8001e3a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001ddc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001de0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d111      	bne.n	8001e24 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e00:	68f8      	ldr	r0, [r7, #12]
 8001e02:	f000 f81e 	bl	8001e42 <HAL_RTC_WaitForSynchro>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	22ff      	movs	r2, #255	; 0xff
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2204      	movs	r2, #4
 8001e18:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e00a      	b.n	8001e3a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8001e38:	2300      	movs	r3, #0
  }
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	371c      	adds	r7, #28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}

08001e42 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e5c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e5e:	f7fe fdad 	bl	80009bc <HAL_GetTick>
 8001e62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001e64:	e009      	b.n	8001e7a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001e66:	f7fe fda9 	bl	80009bc <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e74:	d901      	bls.n	8001e7a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e007      	b.n	8001e8a <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0320 	and.w	r3, r3, #32
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b084      	sub	sp, #16
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d119      	bne.n	8001ee0 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001eb6:	f7fe fd81 	bl	80009bc <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ebc:	e009      	b.n	8001ed2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001ebe:	f7fe fd7d 	bl	80009bc <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ecc:	d901      	bls.n	8001ed2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e007      	b.n	8001ee2 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ee      	beq.n	8001ebe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b085      	sub	sp, #20
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8001ef8:	e005      	b.n	8001f06 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	3301      	adds	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	3b0a      	subs	r3, #10
 8001f04:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	2b09      	cmp	r3, #9
 8001f0a:	d8f6      	bhi.n	8001efa <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e01d      	b.n	8001f74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d106      	bne.n	8001f52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f001 fe8b 	bl	8003c68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3304      	adds	r3, #4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4610      	mov	r0, r2
 8001f66:	f000 f901 	bl	800216c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 faf8 	bl	8002584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a10      	ldr	r2, [pc, #64]	; (8001fdc <HAL_TIM_PWM_Start+0x60>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d107      	bne.n	8001fae <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b06      	cmp	r3, #6
 8001fbe:	d007      	beq.n	8001fd0 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0b4      	b.n	8002164 <HAL_TIM_PWM_ConfigChannel+0x184>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	f200 809f 	bhi.w	8002150 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002012:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	0800204d 	.word	0x0800204d
 800201c:	08002151 	.word	0x08002151
 8002020:	08002151 	.word	0x08002151
 8002024:	08002151 	.word	0x08002151
 8002028:	0800208d 	.word	0x0800208d
 800202c:	08002151 	.word	0x08002151
 8002030:	08002151 	.word	0x08002151
 8002034:	08002151 	.word	0x08002151
 8002038:	080020cf 	.word	0x080020cf
 800203c:	08002151 	.word	0x08002151
 8002040:	08002151 	.word	0x08002151
 8002044:	08002151 	.word	0x08002151
 8002048:	0800210f 	.word	0x0800210f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68b9      	ldr	r1, [r7, #8]
 8002052:	4618      	mov	r0, r3
 8002054:	f000 f90a 	bl	800226c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	699a      	ldr	r2, [r3, #24]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0208 	orr.w	r2, r2, #8
 8002066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0204 	bic.w	r2, r2, #4
 8002076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6999      	ldr	r1, [r3, #24]
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	619a      	str	r2, [r3, #24]
      break;
 800208a:	e062      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68b9      	ldr	r1, [r7, #8]
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f950 	bl	8002338 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	699a      	ldr	r2, [r3, #24]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6999      	ldr	r1, [r3, #24]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	021a      	lsls	r2, r3, #8
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	619a      	str	r2, [r3, #24]
      break;
 80020cc:	e041      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68b9      	ldr	r1, [r7, #8]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 f99b 	bl	8002410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69da      	ldr	r2, [r3, #28]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f042 0208 	orr.w	r2, r2, #8
 80020e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0204 	bic.w	r2, r2, #4
 80020f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	69d9      	ldr	r1, [r3, #28]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	61da      	str	r2, [r3, #28]
      break;
 800210c:	e021      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f9e5 	bl	80024e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69da      	ldr	r2, [r3, #28]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	69d9      	ldr	r1, [r3, #28]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	021a      	lsls	r2, r3, #8
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	61da      	str	r2, [r3, #28]
      break;
 800214e:	e000      	b.n	8002152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002150:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a34      	ldr	r2, [pc, #208]	; (8002250 <TIM_Base_SetConfig+0xe4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00f      	beq.n	80021a4 <TIM_Base_SetConfig+0x38>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800218a:	d00b      	beq.n	80021a4 <TIM_Base_SetConfig+0x38>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a31      	ldr	r2, [pc, #196]	; (8002254 <TIM_Base_SetConfig+0xe8>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <TIM_Base_SetConfig+0x38>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a30      	ldr	r2, [pc, #192]	; (8002258 <TIM_Base_SetConfig+0xec>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0x38>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a2f      	ldr	r2, [pc, #188]	; (800225c <TIM_Base_SetConfig+0xf0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d108      	bne.n	80021b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a25      	ldr	r2, [pc, #148]	; (8002250 <TIM_Base_SetConfig+0xe4>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01b      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d017      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a22      	ldr	r2, [pc, #136]	; (8002254 <TIM_Base_SetConfig+0xe8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a21      	ldr	r2, [pc, #132]	; (8002258 <TIM_Base_SetConfig+0xec>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00f      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a20      	ldr	r2, [pc, #128]	; (800225c <TIM_Base_SetConfig+0xf0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00b      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1f      	ldr	r2, [pc, #124]	; (8002260 <TIM_Base_SetConfig+0xf4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1e      	ldr	r2, [pc, #120]	; (8002264 <TIM_Base_SetConfig+0xf8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d003      	beq.n	80021f6 <TIM_Base_SetConfig+0x8a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a1d      	ldr	r2, [pc, #116]	; (8002268 <TIM_Base_SetConfig+0xfc>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d108      	bne.n	8002208 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a08      	ldr	r2, [pc, #32]	; (8002250 <TIM_Base_SetConfig+0xe4>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d103      	bne.n	800223c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	615a      	str	r2, [r3, #20]
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40010000 	.word	0x40010000
 8002254:	40000400 	.word	0x40000400
 8002258:	40000800 	.word	0x40000800
 800225c:	40000c00 	.word	0x40000c00
 8002260:	40014000 	.word	0x40014000
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800

0800226c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	f023 0201 	bic.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800229a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0303 	bic.w	r3, r3, #3
 80022a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 0302 	bic.w	r3, r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <TIM_OC1_SetConfig+0xc8>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d10c      	bne.n	80022e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	f023 0308 	bic.w	r3, r3, #8
 80022ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <TIM_OC1_SetConfig+0xc8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	40010000 	.word	0x40010000

08002338 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f023 0210 	bic.w	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800236e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 0320 	bic.w	r3, r3, #32
 8002382:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a1e      	ldr	r2, [pc, #120]	; (800240c <TIM_OC2_SetConfig+0xd4>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d10d      	bne.n	80023b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a15      	ldr	r2, [pc, #84]	; (800240c <TIM_OC2_SetConfig+0xd4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d113      	bne.n	80023e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40010000 	.word	0x40010000

08002410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002410:	b480      	push	{r7}
 8002412:	b087      	sub	sp, #28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800243e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4313      	orrs	r3, r2
 8002464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <TIM_OC3_SetConfig+0xd0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d10d      	bne.n	800248a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002474:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <TIM_OC3_SetConfig+0xd0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d113      	bne.n	80024ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	621a      	str	r2, [r3, #32]
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40010000 	.word	0x40010000

080024e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800252e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	031b      	lsls	r3, r3, #12
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <TIM_OC4_SetConfig+0x9c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d109      	bne.n	8002558 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800254a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	019b      	lsls	r3, r3, #6
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	621a      	str	r2, [r3, #32]
}
 8002572:	bf00      	nop
 8002574:	371c      	adds	r7, #28
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	40010000 	.word	0x40010000

08002584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 031f 	and.w	r3, r3, #31
 8002596:	2201      	movs	r2, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	401a      	ands	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6a1a      	ldr	r2, [r3, #32]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	431a      	orrs	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	621a      	str	r2, [r3, #32]
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2204      	movs	r2, #4
 80025de:	6839      	ldr	r1, [r7, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 f8df 	bl	80027a4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b06      	cmp	r3, #6
 8002606:	d007      	beq.n	8002618 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002634:	2b01      	cmp	r3, #1
 8002636:	d101      	bne.n	800263c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002638:	2302      	movs	r3, #2
 800263a:	e050      	b.n	80026de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d018      	beq.n	80026b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002688:	d013      	beq.n	80026b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00e      	beq.n	80026b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a16      	ldr	r2, [pc, #88]	; (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d009      	beq.n	80026b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d004      	beq.n	80026b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a13      	ldr	r2, [pc, #76]	; (80026fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d10c      	bne.n	80026cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3714      	adds	r7, #20
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	40010000 	.word	0x40010000
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800
 80026f8:	40000c00 	.word	0x40000c00
 80026fc:	40014000 	.word	0x40014000

08002700 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002718:	2302      	movs	r3, #2
 800271a:	e03d      	b.n	8002798 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4313      	orrs	r3, r2
 8002730:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2204      	movs	r2, #4
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a1a      	ldr	r2, [r3, #32]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	401a      	ands	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 031f 	and.w	r3, r3, #31
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	431a      	orrs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	621a      	str	r2, [r3, #32]
}
 80027e2:	bf00      	nop
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e03f      	b.n	8002880 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002806:	b2db      	uxtb	r3, r3
 8002808:	2b00      	cmp	r3, #0
 800280a:	d106      	bne.n	800281a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f001 faad 	bl	8003d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2224      	movs	r2, #36	; 0x24
 800281e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002830:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fb7c 	bl	8002f30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691a      	ldr	r2, [r3, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002846:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695a      	ldr	r2, [r3, #20]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002856:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002866:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4613      	mov	r3, r2
 8002896:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	f040 8083 	bne.w	80029b0 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d002      	beq.n	80028b6 <HAL_UART_Transmit+0x2e>
 80028b0:	88fb      	ldrh	r3, [r7, #6]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e07b      	b.n	80029b2 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_UART_Transmit+0x40>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e074      	b.n	80029b2 <HAL_UART_Transmit+0x12a>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2221      	movs	r2, #33	; 0x21
 80028da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80028de:	f7fe f86d 	bl	80009bc <HAL_GetTick>
 80028e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	88fa      	ldrh	r2, [r7, #6]
 80028e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80028f8:	e042      	b.n	8002980 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002910:	d122      	bne.n	8002958 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2200      	movs	r2, #0
 800291a:	2180      	movs	r1, #128	; 0x80
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f99b 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e042      	b.n	80029b2 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800293e:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3302      	adds	r3, #2
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	e017      	b.n	8002980 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	3301      	adds	r3, #1
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	e013      	b.n	8002980 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2200      	movs	r2, #0
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f978 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e01f      	b.n	80029b2 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	60ba      	str	r2, [r7, #8]
 8002978:	781a      	ldrb	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1b7      	bne.n	80028fa <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2200      	movs	r2, #0
 8002992:	2140      	movs	r1, #64	; 0x40
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 f95f 	bl	8002c58 <UART_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e006      	b.n	80029b2 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2220      	movs	r2, #32
 80029a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b085      	sub	sp, #20
 80029be:	af00      	add	r7, sp, #0
 80029c0:	60f8      	str	r0, [r7, #12]
 80029c2:	60b9      	str	r1, [r7, #8]
 80029c4:	4613      	mov	r3, r2
 80029c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d130      	bne.n	8002a36 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_UART_Transmit_IT+0x26>
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e029      	b.n	8002a38 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <HAL_UART_Transmit_IT+0x38>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e022      	b.n	8002a38 <HAL_UART_Transmit_IT+0x7e>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	88fa      	ldrh	r2, [r7, #6]
 8002a04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88fa      	ldrh	r2, [r7, #6]
 8002a0a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2221      	movs	r2, #33	; 0x21
 8002a16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	e000      	b.n	8002a38 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002a36:	2302      	movs	r3, #2
  }
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10d      	bne.n	8002a96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	f003 0320 	and.w	r3, r3, #32
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_UART_IRQHandler+0x52>
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f003 0320 	and.w	r3, r3, #32
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f9cc 	bl	8002e2c <UART_Receive_IT>
      return;
 8002a94:	e0d1      	b.n	8002c3a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80b0 	beq.w	8002bfe <HAL_UART_IRQHandler+0x1ba>
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d105      	bne.n	8002ab4 <HAL_UART_IRQHandler+0x70>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f000 80a5 	beq.w	8002bfe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x90>
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_UART_IRQHandler+0xb0>
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	f043 0202 	orr.w	r2, r3, #2
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_UART_IRQHandler+0xd0>
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	f043 0204 	orr.w	r2, r3, #4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00f      	beq.n	8002b3e <HAL_UART_IRQHandler+0xfa>
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d104      	bne.n	8002b32 <HAL_UART_IRQHandler+0xee>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d005      	beq.n	8002b3e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	f043 0208 	orr.w	r2, r3, #8
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d078      	beq.n	8002c38 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_UART_IRQHandler+0x11c>
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f966 	bl	8002e2c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	bf0c      	ite	eq
 8002b6e:	2301      	moveq	r3, #1
 8002b70:	2300      	movne	r3, #0
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_UART_IRQHandler+0x144>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d031      	beq.n	8002bec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f8af 	bl	8002cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d123      	bne.n	8002be4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002baa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d013      	beq.n	8002bdc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb8:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <HAL_UART_IRQHandler+0x1fc>)
 8002bba:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fe f83a 	bl	8000c3a <HAL_DMA_Abort_IT>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bda:	e00e      	b.n	8002bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f831 	bl	8002c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002be2:	e00a      	b.n	8002bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f82d 	bl	8002c44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bea:	e006      	b.n	8002bfa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f000 f829 	bl	8002c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002bf8:	e01e      	b.n	8002c38 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bfa:	bf00      	nop
    return;
 8002bfc:	e01c      	b.n	8002c38 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_UART_IRQHandler+0x1d6>
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f89c 	bl	8002d50 <UART_Transmit_IT>
    return;
 8002c18:	e00f      	b.n	8002c3a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d00a      	beq.n	8002c3a <HAL_UART_IRQHandler+0x1f6>
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f8e4 	bl	8002dfc <UART_EndTransmit_IT>
    return;
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002c38:	bf00      	nop
  }
}
 8002c3a:	3720      	adds	r7, #32
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08002d29 	.word	0x08002d29

08002c44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	4613      	mov	r3, r2
 8002c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c68:	e02c      	b.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d028      	beq.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d007      	beq.n	8002c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c78:	f7fd fea0 	bl	80009bc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d21d      	bcs.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c96:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2220      	movs	r2, #32
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e00f      	b.n	8002ce4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	461a      	mov	r2, r3
 8002cdc:	79fb      	ldrb	r3, [r7, #7]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d0c3      	beq.n	8002c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002d02:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff ff7e 	bl	8002c44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b21      	cmp	r3, #33	; 0x21
 8002d62:	d144      	bne.n	8002dee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d6c:	d11a      	bne.n	8002da4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d82:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]
 8002d96:	e00e      	b.n	8002db6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	621a      	str	r2, [r3, #32]
 8002da2:	e008      	b.n	8002db6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	1c59      	adds	r1, r3, #1
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6211      	str	r1, [r2, #32]
 8002dae:	781a      	ldrb	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e12:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 fd67 	bl	80038f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b22      	cmp	r3, #34	; 0x22
 8002e3e:	d171      	bne.n	8002f24 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e48:	d123      	bne.n	8002e92 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10e      	bne.n	8002e76 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	1c9a      	adds	r2, r3, #2
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	629a      	str	r2, [r3, #40]	; 0x28
 8002e74:	e029      	b.n	8002eca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e90:	e01b      	b.n	8002eca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6858      	ldr	r0, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	1c59      	adds	r1, r3, #1
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6291      	str	r1, [r2, #40]	; 0x28
 8002eaa:	b2c2      	uxtb	r2, r0
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e00c      	b.n	8002eca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	1c58      	adds	r0, r3, #1
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	6288      	str	r0, [r1, #40]	; 0x28
 8002ec2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d120      	bne.n	8002f20 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0220 	bic.w	r2, r2, #32
 8002eec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002efc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0201 	bic.w	r2, r2, #1
 8002f0c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fcfe 	bl	8003918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	e002      	b.n	8002f26 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002f72:	f023 030c 	bic.w	r3, r3, #12
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	68f9      	ldr	r1, [r7, #12]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f9e:	f040 818b 	bne.w	80032b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4ac1      	ldr	r2, [pc, #772]	; (80032ac <UART_SetConfig+0x37c>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d005      	beq.n	8002fb8 <UART_SetConfig+0x88>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4abf      	ldr	r2, [pc, #764]	; (80032b0 <UART_SetConfig+0x380>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	f040 80bd 	bne.w	8003132 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fb8:	f7fe fc4c 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 8002fbc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	461d      	mov	r5, r3
 8002fc2:	f04f 0600 	mov.w	r6, #0
 8002fc6:	46a8      	mov	r8, r5
 8002fc8:	46b1      	mov	r9, r6
 8002fca:	eb18 0308 	adds.w	r3, r8, r8
 8002fce:	eb49 0409 	adc.w	r4, r9, r9
 8002fd2:	4698      	mov	r8, r3
 8002fd4:	46a1      	mov	r9, r4
 8002fd6:	eb18 0805 	adds.w	r8, r8, r5
 8002fda:	eb49 0906 	adc.w	r9, r9, r6
 8002fde:	f04f 0100 	mov.w	r1, #0
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002fea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002fee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ff2:	4688      	mov	r8, r1
 8002ff4:	4691      	mov	r9, r2
 8002ff6:	eb18 0005 	adds.w	r0, r8, r5
 8002ffa:	eb49 0106 	adc.w	r1, r9, r6
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	461d      	mov	r5, r3
 8003004:	f04f 0600 	mov.w	r6, #0
 8003008:	196b      	adds	r3, r5, r5
 800300a:	eb46 0406 	adc.w	r4, r6, r6
 800300e:	461a      	mov	r2, r3
 8003010:	4623      	mov	r3, r4
 8003012:	f7fd faed 	bl	80005f0 <__aeabi_uldivmod>
 8003016:	4603      	mov	r3, r0
 8003018:	460c      	mov	r4, r1
 800301a:	461a      	mov	r2, r3
 800301c:	4ba5      	ldr	r3, [pc, #660]	; (80032b4 <UART_SetConfig+0x384>)
 800301e:	fba3 2302 	umull	r2, r3, r3, r2
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	461d      	mov	r5, r3
 800302c:	f04f 0600 	mov.w	r6, #0
 8003030:	46a9      	mov	r9, r5
 8003032:	46b2      	mov	sl, r6
 8003034:	eb19 0309 	adds.w	r3, r9, r9
 8003038:	eb4a 040a 	adc.w	r4, sl, sl
 800303c:	4699      	mov	r9, r3
 800303e:	46a2      	mov	sl, r4
 8003040:	eb19 0905 	adds.w	r9, r9, r5
 8003044:	eb4a 0a06 	adc.w	sl, sl, r6
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003054:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003058:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800305c:	4689      	mov	r9, r1
 800305e:	4692      	mov	sl, r2
 8003060:	eb19 0005 	adds.w	r0, r9, r5
 8003064:	eb4a 0106 	adc.w	r1, sl, r6
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	461d      	mov	r5, r3
 800306e:	f04f 0600 	mov.w	r6, #0
 8003072:	196b      	adds	r3, r5, r5
 8003074:	eb46 0406 	adc.w	r4, r6, r6
 8003078:	461a      	mov	r2, r3
 800307a:	4623      	mov	r3, r4
 800307c:	f7fd fab8 	bl	80005f0 <__aeabi_uldivmod>
 8003080:	4603      	mov	r3, r0
 8003082:	460c      	mov	r4, r1
 8003084:	461a      	mov	r2, r3
 8003086:	4b8b      	ldr	r3, [pc, #556]	; (80032b4 <UART_SetConfig+0x384>)
 8003088:	fba3 1302 	umull	r1, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	2164      	movs	r1, #100	; 0x64
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3332      	adds	r3, #50	; 0x32
 800309a:	4a86      	ldr	r2, [pc, #536]	; (80032b4 <UART_SetConfig+0x384>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030a8:	4498      	add	r8, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	461d      	mov	r5, r3
 80030ae:	f04f 0600 	mov.w	r6, #0
 80030b2:	46a9      	mov	r9, r5
 80030b4:	46b2      	mov	sl, r6
 80030b6:	eb19 0309 	adds.w	r3, r9, r9
 80030ba:	eb4a 040a 	adc.w	r4, sl, sl
 80030be:	4699      	mov	r9, r3
 80030c0:	46a2      	mov	sl, r4
 80030c2:	eb19 0905 	adds.w	r9, r9, r5
 80030c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80030ca:	f04f 0100 	mov.w	r1, #0
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030de:	4689      	mov	r9, r1
 80030e0:	4692      	mov	sl, r2
 80030e2:	eb19 0005 	adds.w	r0, r9, r5
 80030e6:	eb4a 0106 	adc.w	r1, sl, r6
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	461d      	mov	r5, r3
 80030f0:	f04f 0600 	mov.w	r6, #0
 80030f4:	196b      	adds	r3, r5, r5
 80030f6:	eb46 0406 	adc.w	r4, r6, r6
 80030fa:	461a      	mov	r2, r3
 80030fc:	4623      	mov	r3, r4
 80030fe:	f7fd fa77 	bl	80005f0 <__aeabi_uldivmod>
 8003102:	4603      	mov	r3, r0
 8003104:	460c      	mov	r4, r1
 8003106:	461a      	mov	r2, r3
 8003108:	4b6a      	ldr	r3, [pc, #424]	; (80032b4 <UART_SetConfig+0x384>)
 800310a:	fba3 1302 	umull	r1, r3, r3, r2
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	2164      	movs	r1, #100	; 0x64
 8003112:	fb01 f303 	mul.w	r3, r1, r3
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	3332      	adds	r3, #50	; 0x32
 800311c:	4a65      	ldr	r2, [pc, #404]	; (80032b4 <UART_SetConfig+0x384>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	f003 0207 	and.w	r2, r3, #7
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4442      	add	r2, r8
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	e26f      	b.n	8003612 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003132:	f7fe fb7b 	bl	800182c <HAL_RCC_GetPCLK1Freq>
 8003136:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	461d      	mov	r5, r3
 800313c:	f04f 0600 	mov.w	r6, #0
 8003140:	46a8      	mov	r8, r5
 8003142:	46b1      	mov	r9, r6
 8003144:	eb18 0308 	adds.w	r3, r8, r8
 8003148:	eb49 0409 	adc.w	r4, r9, r9
 800314c:	4698      	mov	r8, r3
 800314e:	46a1      	mov	r9, r4
 8003150:	eb18 0805 	adds.w	r8, r8, r5
 8003154:	eb49 0906 	adc.w	r9, r9, r6
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003164:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003168:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800316c:	4688      	mov	r8, r1
 800316e:	4691      	mov	r9, r2
 8003170:	eb18 0005 	adds.w	r0, r8, r5
 8003174:	eb49 0106 	adc.w	r1, r9, r6
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	461d      	mov	r5, r3
 800317e:	f04f 0600 	mov.w	r6, #0
 8003182:	196b      	adds	r3, r5, r5
 8003184:	eb46 0406 	adc.w	r4, r6, r6
 8003188:	461a      	mov	r2, r3
 800318a:	4623      	mov	r3, r4
 800318c:	f7fd fa30 	bl	80005f0 <__aeabi_uldivmod>
 8003190:	4603      	mov	r3, r0
 8003192:	460c      	mov	r4, r1
 8003194:	461a      	mov	r2, r3
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <UART_SetConfig+0x384>)
 8003198:	fba3 2302 	umull	r2, r3, r3, r2
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	461d      	mov	r5, r3
 80031a6:	f04f 0600 	mov.w	r6, #0
 80031aa:	46a9      	mov	r9, r5
 80031ac:	46b2      	mov	sl, r6
 80031ae:	eb19 0309 	adds.w	r3, r9, r9
 80031b2:	eb4a 040a 	adc.w	r4, sl, sl
 80031b6:	4699      	mov	r9, r3
 80031b8:	46a2      	mov	sl, r4
 80031ba:	eb19 0905 	adds.w	r9, r9, r5
 80031be:	eb4a 0a06 	adc.w	sl, sl, r6
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031d6:	4689      	mov	r9, r1
 80031d8:	4692      	mov	sl, r2
 80031da:	eb19 0005 	adds.w	r0, r9, r5
 80031de:	eb4a 0106 	adc.w	r1, sl, r6
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	461d      	mov	r5, r3
 80031e8:	f04f 0600 	mov.w	r6, #0
 80031ec:	196b      	adds	r3, r5, r5
 80031ee:	eb46 0406 	adc.w	r4, r6, r6
 80031f2:	461a      	mov	r2, r3
 80031f4:	4623      	mov	r3, r4
 80031f6:	f7fd f9fb 	bl	80005f0 <__aeabi_uldivmod>
 80031fa:	4603      	mov	r3, r0
 80031fc:	460c      	mov	r4, r1
 80031fe:	461a      	mov	r2, r3
 8003200:	4b2c      	ldr	r3, [pc, #176]	; (80032b4 <UART_SetConfig+0x384>)
 8003202:	fba3 1302 	umull	r1, r3, r3, r2
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2164      	movs	r1, #100	; 0x64
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	3332      	adds	r3, #50	; 0x32
 8003214:	4a27      	ldr	r2, [pc, #156]	; (80032b4 <UART_SetConfig+0x384>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003222:	4498      	add	r8, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	461d      	mov	r5, r3
 8003228:	f04f 0600 	mov.w	r6, #0
 800322c:	46a9      	mov	r9, r5
 800322e:	46b2      	mov	sl, r6
 8003230:	eb19 0309 	adds.w	r3, r9, r9
 8003234:	eb4a 040a 	adc.w	r4, sl, sl
 8003238:	4699      	mov	r9, r3
 800323a:	46a2      	mov	sl, r4
 800323c:	eb19 0905 	adds.w	r9, r9, r5
 8003240:	eb4a 0a06 	adc.w	sl, sl, r6
 8003244:	f04f 0100 	mov.w	r1, #0
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003250:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003254:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003258:	4689      	mov	r9, r1
 800325a:	4692      	mov	sl, r2
 800325c:	eb19 0005 	adds.w	r0, r9, r5
 8003260:	eb4a 0106 	adc.w	r1, sl, r6
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	461d      	mov	r5, r3
 800326a:	f04f 0600 	mov.w	r6, #0
 800326e:	196b      	adds	r3, r5, r5
 8003270:	eb46 0406 	adc.w	r4, r6, r6
 8003274:	461a      	mov	r2, r3
 8003276:	4623      	mov	r3, r4
 8003278:	f7fd f9ba 	bl	80005f0 <__aeabi_uldivmod>
 800327c:	4603      	mov	r3, r0
 800327e:	460c      	mov	r4, r1
 8003280:	461a      	mov	r2, r3
 8003282:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <UART_SetConfig+0x384>)
 8003284:	fba3 1302 	umull	r1, r3, r3, r2
 8003288:	095b      	lsrs	r3, r3, #5
 800328a:	2164      	movs	r1, #100	; 0x64
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	3332      	adds	r3, #50	; 0x32
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <UART_SetConfig+0x384>)
 8003298:	fba2 2303 	umull	r2, r3, r2, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	f003 0207 	and.w	r2, r3, #7
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4442      	add	r2, r8
 80032a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032aa:	e1b2      	b.n	8003612 <UART_SetConfig+0x6e2>
 80032ac:	40011000 	.word	0x40011000
 80032b0:	40011400 	.word	0x40011400
 80032b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4ad7      	ldr	r2, [pc, #860]	; (800361c <UART_SetConfig+0x6ec>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d005      	beq.n	80032ce <UART_SetConfig+0x39e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4ad6      	ldr	r2, [pc, #856]	; (8003620 <UART_SetConfig+0x6f0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	f040 80d1 	bne.w	8003470 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ce:	f7fe fac1 	bl	8001854 <HAL_RCC_GetPCLK2Freq>
 80032d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	469a      	mov	sl, r3
 80032d8:	f04f 0b00 	mov.w	fp, #0
 80032dc:	46d0      	mov	r8, sl
 80032de:	46d9      	mov	r9, fp
 80032e0:	eb18 0308 	adds.w	r3, r8, r8
 80032e4:	eb49 0409 	adc.w	r4, r9, r9
 80032e8:	4698      	mov	r8, r3
 80032ea:	46a1      	mov	r9, r4
 80032ec:	eb18 080a 	adds.w	r8, r8, sl
 80032f0:	eb49 090b 	adc.w	r9, r9, fp
 80032f4:	f04f 0100 	mov.w	r1, #0
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003300:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003304:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003308:	4688      	mov	r8, r1
 800330a:	4691      	mov	r9, r2
 800330c:	eb1a 0508 	adds.w	r5, sl, r8
 8003310:	eb4b 0609 	adc.w	r6, fp, r9
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	f04f 0400 	mov.w	r4, #0
 8003326:	0094      	lsls	r4, r2, #2
 8003328:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800332c:	008b      	lsls	r3, r1, #2
 800332e:	461a      	mov	r2, r3
 8003330:	4623      	mov	r3, r4
 8003332:	4628      	mov	r0, r5
 8003334:	4631      	mov	r1, r6
 8003336:	f7fd f95b 	bl	80005f0 <__aeabi_uldivmod>
 800333a:	4603      	mov	r3, r0
 800333c:	460c      	mov	r4, r1
 800333e:	461a      	mov	r2, r3
 8003340:	4bb8      	ldr	r3, [pc, #736]	; (8003624 <UART_SetConfig+0x6f4>)
 8003342:	fba3 2302 	umull	r2, r3, r3, r2
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	469b      	mov	fp, r3
 8003350:	f04f 0c00 	mov.w	ip, #0
 8003354:	46d9      	mov	r9, fp
 8003356:	46e2      	mov	sl, ip
 8003358:	eb19 0309 	adds.w	r3, r9, r9
 800335c:	eb4a 040a 	adc.w	r4, sl, sl
 8003360:	4699      	mov	r9, r3
 8003362:	46a2      	mov	sl, r4
 8003364:	eb19 090b 	adds.w	r9, r9, fp
 8003368:	eb4a 0a0c 	adc.w	sl, sl, ip
 800336c:	f04f 0100 	mov.w	r1, #0
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003378:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800337c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003380:	4689      	mov	r9, r1
 8003382:	4692      	mov	sl, r2
 8003384:	eb1b 0509 	adds.w	r5, fp, r9
 8003388:	eb4c 060a 	adc.w	r6, ip, sl
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4619      	mov	r1, r3
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	0094      	lsls	r4, r2, #2
 80033a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033a4:	008b      	lsls	r3, r1, #2
 80033a6:	461a      	mov	r2, r3
 80033a8:	4623      	mov	r3, r4
 80033aa:	4628      	mov	r0, r5
 80033ac:	4631      	mov	r1, r6
 80033ae:	f7fd f91f 	bl	80005f0 <__aeabi_uldivmod>
 80033b2:	4603      	mov	r3, r0
 80033b4:	460c      	mov	r4, r1
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b9a      	ldr	r3, [pc, #616]	; (8003624 <UART_SetConfig+0x6f4>)
 80033ba:	fba3 1302 	umull	r1, r3, r3, r2
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2164      	movs	r1, #100	; 0x64
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	3332      	adds	r3, #50	; 0x32
 80033cc:	4a95      	ldr	r2, [pc, #596]	; (8003624 <UART_SetConfig+0x6f4>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	095b      	lsrs	r3, r3, #5
 80033d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033d8:	4498      	add	r8, r3
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	469b      	mov	fp, r3
 80033de:	f04f 0c00 	mov.w	ip, #0
 80033e2:	46d9      	mov	r9, fp
 80033e4:	46e2      	mov	sl, ip
 80033e6:	eb19 0309 	adds.w	r3, r9, r9
 80033ea:	eb4a 040a 	adc.w	r4, sl, sl
 80033ee:	4699      	mov	r9, r3
 80033f0:	46a2      	mov	sl, r4
 80033f2:	eb19 090b 	adds.w	r9, r9, fp
 80033f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033fa:	f04f 0100 	mov.w	r1, #0
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003406:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800340a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800340e:	4689      	mov	r9, r1
 8003410:	4692      	mov	sl, r2
 8003412:	eb1b 0509 	adds.w	r5, fp, r9
 8003416:	eb4c 060a 	adc.w	r6, ip, sl
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4619      	mov	r1, r3
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	f04f 0400 	mov.w	r4, #0
 800342c:	0094      	lsls	r4, r2, #2
 800342e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003432:	008b      	lsls	r3, r1, #2
 8003434:	461a      	mov	r2, r3
 8003436:	4623      	mov	r3, r4
 8003438:	4628      	mov	r0, r5
 800343a:	4631      	mov	r1, r6
 800343c:	f7fd f8d8 	bl	80005f0 <__aeabi_uldivmod>
 8003440:	4603      	mov	r3, r0
 8003442:	460c      	mov	r4, r1
 8003444:	461a      	mov	r2, r3
 8003446:	4b77      	ldr	r3, [pc, #476]	; (8003624 <UART_SetConfig+0x6f4>)
 8003448:	fba3 1302 	umull	r1, r3, r3, r2
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	2164      	movs	r1, #100	; 0x64
 8003450:	fb01 f303 	mul.w	r3, r1, r3
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	3332      	adds	r3, #50	; 0x32
 800345a:	4a72      	ldr	r2, [pc, #456]	; (8003624 <UART_SetConfig+0x6f4>)
 800345c:	fba2 2303 	umull	r2, r3, r2, r3
 8003460:	095b      	lsrs	r3, r3, #5
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4442      	add	r2, r8
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	e0d0      	b.n	8003612 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003470:	f7fe f9dc 	bl	800182c <HAL_RCC_GetPCLK1Freq>
 8003474:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	469a      	mov	sl, r3
 800347a:	f04f 0b00 	mov.w	fp, #0
 800347e:	46d0      	mov	r8, sl
 8003480:	46d9      	mov	r9, fp
 8003482:	eb18 0308 	adds.w	r3, r8, r8
 8003486:	eb49 0409 	adc.w	r4, r9, r9
 800348a:	4698      	mov	r8, r3
 800348c:	46a1      	mov	r9, r4
 800348e:	eb18 080a 	adds.w	r8, r8, sl
 8003492:	eb49 090b 	adc.w	r9, r9, fp
 8003496:	f04f 0100 	mov.w	r1, #0
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034aa:	4688      	mov	r8, r1
 80034ac:	4691      	mov	r9, r2
 80034ae:	eb1a 0508 	adds.w	r5, sl, r8
 80034b2:	eb4b 0609 	adc.w	r6, fp, r9
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4619      	mov	r1, r3
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	f04f 0400 	mov.w	r4, #0
 80034c8:	0094      	lsls	r4, r2, #2
 80034ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034ce:	008b      	lsls	r3, r1, #2
 80034d0:	461a      	mov	r2, r3
 80034d2:	4623      	mov	r3, r4
 80034d4:	4628      	mov	r0, r5
 80034d6:	4631      	mov	r1, r6
 80034d8:	f7fd f88a 	bl	80005f0 <__aeabi_uldivmod>
 80034dc:	4603      	mov	r3, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b50      	ldr	r3, [pc, #320]	; (8003624 <UART_SetConfig+0x6f4>)
 80034e4:	fba3 2302 	umull	r2, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	469b      	mov	fp, r3
 80034f2:	f04f 0c00 	mov.w	ip, #0
 80034f6:	46d9      	mov	r9, fp
 80034f8:	46e2      	mov	sl, ip
 80034fa:	eb19 0309 	adds.w	r3, r9, r9
 80034fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003502:	4699      	mov	r9, r3
 8003504:	46a2      	mov	sl, r4
 8003506:	eb19 090b 	adds.w	r9, r9, fp
 800350a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800350e:	f04f 0100 	mov.w	r1, #0
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800351a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800351e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003522:	4689      	mov	r9, r1
 8003524:	4692      	mov	sl, r2
 8003526:	eb1b 0509 	adds.w	r5, fp, r9
 800352a:	eb4c 060a 	adc.w	r6, ip, sl
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4619      	mov	r1, r3
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	f04f 0400 	mov.w	r4, #0
 8003540:	0094      	lsls	r4, r2, #2
 8003542:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003546:	008b      	lsls	r3, r1, #2
 8003548:	461a      	mov	r2, r3
 800354a:	4623      	mov	r3, r4
 800354c:	4628      	mov	r0, r5
 800354e:	4631      	mov	r1, r6
 8003550:	f7fd f84e 	bl	80005f0 <__aeabi_uldivmod>
 8003554:	4603      	mov	r3, r0
 8003556:	460c      	mov	r4, r1
 8003558:	461a      	mov	r2, r3
 800355a:	4b32      	ldr	r3, [pc, #200]	; (8003624 <UART_SetConfig+0x6f4>)
 800355c:	fba3 1302 	umull	r1, r3, r3, r2
 8003560:	095b      	lsrs	r3, r3, #5
 8003562:	2164      	movs	r1, #100	; 0x64
 8003564:	fb01 f303 	mul.w	r3, r1, r3
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	3332      	adds	r3, #50	; 0x32
 800356e:	4a2d      	ldr	r2, [pc, #180]	; (8003624 <UART_SetConfig+0x6f4>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357a:	4498      	add	r8, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	469b      	mov	fp, r3
 8003580:	f04f 0c00 	mov.w	ip, #0
 8003584:	46d9      	mov	r9, fp
 8003586:	46e2      	mov	sl, ip
 8003588:	eb19 0309 	adds.w	r3, r9, r9
 800358c:	eb4a 040a 	adc.w	r4, sl, sl
 8003590:	4699      	mov	r9, r3
 8003592:	46a2      	mov	sl, r4
 8003594:	eb19 090b 	adds.w	r9, r9, fp
 8003598:	eb4a 0a0c 	adc.w	sl, sl, ip
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035b0:	4689      	mov	r9, r1
 80035b2:	4692      	mov	sl, r2
 80035b4:	eb1b 0509 	adds.w	r5, fp, r9
 80035b8:	eb4c 060a 	adc.w	r6, ip, sl
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4619      	mov	r1, r3
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	f04f 0400 	mov.w	r4, #0
 80035ce:	0094      	lsls	r4, r2, #2
 80035d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035d4:	008b      	lsls	r3, r1, #2
 80035d6:	461a      	mov	r2, r3
 80035d8:	4623      	mov	r3, r4
 80035da:	4628      	mov	r0, r5
 80035dc:	4631      	mov	r1, r6
 80035de:	f7fd f807 	bl	80005f0 <__aeabi_uldivmod>
 80035e2:	4603      	mov	r3, r0
 80035e4:	460c      	mov	r4, r1
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <UART_SetConfig+0x6f4>)
 80035ea:	fba3 1302 	umull	r1, r3, r3, r2
 80035ee:	095b      	lsrs	r3, r3, #5
 80035f0:	2164      	movs	r1, #100	; 0x64
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	3332      	adds	r3, #50	; 0x32
 80035fc:	4a09      	ldr	r2, [pc, #36]	; (8003624 <UART_SetConfig+0x6f4>)
 80035fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	f003 020f 	and.w	r2, r3, #15
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4442      	add	r2, r8
 800360e:	609a      	str	r2, [r3, #8]
}
 8003610:	e7ff      	b.n	8003612 <UART_SetConfig+0x6e2>
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800361c:	40011000 	.word	0x40011000
 8003620:	40011400 	.word	0x40011400
 8003624:	51eb851f 	.word	0x51eb851f

08003628 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800362e:	f107 0314 	add.w	r3, r7, #20
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	4b35      	ldr	r3, [pc, #212]	; (8003718 <MX_GPIO_Init+0xf0>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	4a34      	ldr	r2, [pc, #208]	; (8003718 <MX_GPIO_Init+0xf0>)
 8003648:	f043 0304 	orr.w	r3, r3, #4
 800364c:	6313      	str	r3, [r2, #48]	; 0x30
 800364e:	4b32      	ldr	r3, [pc, #200]	; (8003718 <MX_GPIO_Init+0xf0>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	613b      	str	r3, [r7, #16]
 8003658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	4b2e      	ldr	r3, [pc, #184]	; (8003718 <MX_GPIO_Init+0xf0>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	4a2d      	ldr	r2, [pc, #180]	; (8003718 <MX_GPIO_Init+0xf0>)
 8003664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003668:	6313      	str	r3, [r2, #48]	; 0x30
 800366a:	4b2b      	ldr	r3, [pc, #172]	; (8003718 <MX_GPIO_Init+0xf0>)
 800366c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	4b27      	ldr	r3, [pc, #156]	; (8003718 <MX_GPIO_Init+0xf0>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	4a26      	ldr	r2, [pc, #152]	; (8003718 <MX_GPIO_Init+0xf0>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6313      	str	r3, [r2, #48]	; 0x30
 8003686:	4b24      	ldr	r3, [pc, #144]	; (8003718 <MX_GPIO_Init+0xf0>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	607b      	str	r3, [r7, #4]
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <MX_GPIO_Init+0xf0>)
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	4a1f      	ldr	r2, [pc, #124]	; (8003718 <MX_GPIO_Init+0xf0>)
 800369c:	f043 0302 	orr.w	r3, r3, #2
 80036a0:	6313      	str	r3, [r2, #48]	; 0x30
 80036a2:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <MX_GPIO_Init+0xf0>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80036ae:	2200      	movs	r2, #0
 80036b0:	2120      	movs	r1, #32
 80036b2:	481a      	ldr	r0, [pc, #104]	; (800371c <MX_GPIO_Init+0xf4>)
 80036b4:	f7fd fc66 	bl	8000f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80036bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <MX_GPIO_Init+0xf8>)
 80036c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	4619      	mov	r1, r3
 80036cc:	4815      	ldr	r0, [pc, #84]	; (8003724 <MX_GPIO_Init+0xfc>)
 80036ce:	f7fd fad7 	bl	8000c80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036d2:	230c      	movs	r3, #12
 80036d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d6:	2302      	movs	r3, #2
 80036d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036de:	2303      	movs	r3, #3
 80036e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80036e2:	2307      	movs	r3, #7
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e6:	f107 0314 	add.w	r3, r7, #20
 80036ea:	4619      	mov	r1, r3
 80036ec:	480b      	ldr	r0, [pc, #44]	; (800371c <MX_GPIO_Init+0xf4>)
 80036ee:	f7fd fac7 	bl	8000c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80036f2:	2320      	movs	r3, #32
 80036f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036f6:	2301      	movs	r3, #1
 80036f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036fe:	2300      	movs	r3, #0
 8003700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003702:	f107 0314 	add.w	r3, r7, #20
 8003706:	4619      	mov	r1, r3
 8003708:	4804      	ldr	r0, [pc, #16]	; (800371c <MX_GPIO_Init+0xf4>)
 800370a:	f7fd fab9 	bl	8000c80 <HAL_GPIO_Init>

}
 800370e:	bf00      	nop
 8003710:	3728      	adds	r7, #40	; 0x28
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800
 800371c:	40020000 	.word	0x40020000
 8003720:	10110000 	.word	0x10110000
 8003724:	40020800 	.word	0x40020800

08003728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800372e:	f7fd f8df 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003732:	f000 f859 	bl	80037e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003736:	f7ff ff77 	bl	8003628 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 800373a:	f000 faf1 	bl	8003d20 <MX_USART6_UART_Init>
  MX_RTC_Init();
 800373e:	f000 f909 	bl	8003954 <MX_RTC_Init>
  MX_TIM1_Init();
 8003742:	f000 fa0d 	bl	8003b60 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart6, txBuffer, txLen, 0xFFFF);
 8003746:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <main+0xa8>)
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800374e:	4921      	ldr	r1, [pc, #132]	; (80037d4 <main+0xac>)
 8003750:	4821      	ldr	r0, [pc, #132]	; (80037d8 <main+0xb0>)
 8003752:	f7ff f899 	bl	8002888 <HAL_UART_Transmit>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003756:	2047      	movs	r0, #71	; 0x47
 8003758:	f7fd fa55 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800375c:	2100      	movs	r1, #0
 800375e:	481f      	ldr	r0, [pc, #124]	; (80037dc <main+0xb4>)
 8003760:	f7fe fc0c 	bl	8001f7c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8003764:	2100      	movs	r1, #0
 8003766:	481d      	ldr	r0, [pc, #116]	; (80037dc <main+0xb4>)
 8003768:	f7fe ff31 	bl	80025ce <HAL_TIMEx_PWMN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(i = 0;i < 1;i+=0.1){
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	e01f      	b.n	80037b4 <main+0x8c>
		  TIM1->CCR1 = 1000 * i;
 8003774:	edd7 7a01 	vldr	s15, [r7, #4]
 8003778:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80037e0 <main+0xb8>
 800377c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003780:	4b18      	ldr	r3, [pc, #96]	; (80037e4 <main+0xbc>)
 8003782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003786:	ee17 2a90 	vmov	r2, s15
 800378a:	635a      	str	r2, [r3, #52]	; 0x34
	  	  HAL_Delay(1000);
 800378c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003790:	f7fd f920 	bl	80009d4 <HAL_Delay>
	  for(i = 0;i < 1;i+=0.1){
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f7fc fe83 	bl	80004a0 <__aeabi_f2d>
 800379a:	a30b      	add	r3, pc, #44	; (adr r3, 80037c8 <main+0xa0>)
 800379c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a0:	f7fc fd20 	bl	80001e4 <__adddf3>
 80037a4:	4603      	mov	r3, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	4618      	mov	r0, r3
 80037aa:	4621      	mov	r1, r4
 80037ac:	f7fc fed0 	bl	8000550 <__aeabi_d2f>
 80037b0:	4603      	mov	r3, r0
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80037b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c4:	d4d6      	bmi.n	8003774 <main+0x4c>
 80037c6:	e7d1      	b.n	800376c <main+0x44>
 80037c8:	9999999a 	.word	0x9999999a
 80037cc:	3fb99999 	.word	0x3fb99999
 80037d0:	20000050 	.word	0x20000050
 80037d4:	20000008 	.word	0x20000008
 80037d8:	200000c4 	.word	0x200000c4
 80037dc:	20000084 	.word	0x20000084
 80037e0:	447a0000 	.word	0x447a0000
 80037e4:	40010000 	.word	0x40010000

080037e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b098      	sub	sp, #96	; 0x60
 80037ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037f2:	2230      	movs	r2, #48	; 0x30
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fb5a 	bl	8003eb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037fc:	f107 031c 	add.w	r3, r7, #28
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800380c:	f107 0308 	add.w	r3, r7, #8
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <SystemClock_Config+0x100>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	4a30      	ldr	r2, [pc, #192]	; (80038e8 <SystemClock_Config+0x100>)
 8003826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800382a:	6413      	str	r3, [r2, #64]	; 0x40
 800382c:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <SystemClock_Config+0x100>)
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003838:	2300      	movs	r3, #0
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4b2b      	ldr	r3, [pc, #172]	; (80038ec <SystemClock_Config+0x104>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003844:	4a29      	ldr	r2, [pc, #164]	; (80038ec <SystemClock_Config+0x104>)
 8003846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <SystemClock_Config+0x104>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003858:	230a      	movs	r3, #10
 800385a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800385c:	2301      	movs	r3, #1
 800385e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003860:	2310      	movs	r3, #16
 8003862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003864:	2301      	movs	r3, #1
 8003866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003868:	2302      	movs	r3, #2
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800386c:	2300      	movs	r3, #0
 800386e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003870:	2310      	movs	r3, #16
 8003872:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003874:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003878:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800387a:	2304      	movs	r3, #4
 800387c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800387e:	2307      	movs	r3, #7
 8003880:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003882:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd fb96 	bl	8000fb8 <HAL_RCC_OscConfig>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003892:	f000 f857 	bl	8003944 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003896:	230f      	movs	r3, #15
 8003898:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800389a:	2302      	movs	r3, #2
 800389c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800389e:	2300      	movs	r3, #0
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038a8:	2300      	movs	r3, #0
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	2102      	movs	r1, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fdf0 	bl	8001498 <HAL_RCC_ClockConfig>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80038be:	f000 f841 	bl	8003944 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038c2:	2302      	movs	r3, #2
 80038c4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ca:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038cc:	f107 0308 	add.w	r3, r7, #8
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fd ffd3 	bl	800187c <HAL_RCCEx_PeriphCLKConfig>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80038dc:	f000 f832 	bl	8003944 <Error_Handler>
  }
}
 80038e0:	bf00      	nop
 80038e2:	3760      	adds	r7, #96	; 0x60
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40007000 	.word	0x40007000

080038f0 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void UART6_IRQHandler(void){
	HAL_UART_IRQHandler(&huart6);
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	sndFlag = 1;
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_UART_TxCpltCallback+0x20>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
	txLen = sizeof(txBuffer) - 1;
 80038fe:	4b05      	ldr	r3, [pc, #20]	; (8003914 <HAL_UART_TxCpltCallback+0x24>)
 8003900:	2226      	movs	r2, #38	; 0x26
 8003902:	801a      	strh	r2, [r3, #0]
//	HAL_UART_Transmit(&huart6, txBuffer, txLen, 0xFFFF);
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	20000053 	.word	0x20000053
 8003914:	20000050 	.word	0x20000050

08003918 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	rcvFlag = 1;
 8003920:	4b05      	ldr	r3, [pc, #20]	; (8003938 <HAL_UART_RxCpltCallback+0x20>)
 8003922:	2201      	movs	r2, #1
 8003924:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart6, rxBuffer, 1);
 8003926:	2201      	movs	r2, #1
 8003928:	4904      	ldr	r1, [pc, #16]	; (800393c <HAL_UART_RxCpltCallback+0x24>)
 800392a:	4805      	ldr	r0, [pc, #20]	; (8003940 <HAL_UART_RxCpltCallback+0x28>)
 800392c:	f7ff f845 	bl	80029ba <HAL_UART_Transmit_IT>
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000052 	.word	0x20000052
 800393c:	20000058 	.word	0x20000058
 8003940:	200000c4 	.word	0x200000c4

08003944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003944:	b480      	push	{r7}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b086      	sub	sp, #24
 8003958:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 800395a:	1d3b      	adds	r3, r7, #4
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003968:	2300      	movs	r3, #0
 800396a:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <MX_RTC_Init+0xac>)
 800396e:	4a25      	ldr	r2, [pc, #148]	; (8003a04 <MX_RTC_Init+0xb0>)
 8003970:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <MX_RTC_Init+0xac>)
 8003974:	2200      	movs	r2, #0
 8003976:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003978:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <MX_RTC_Init+0xac>)
 800397a:	227f      	movs	r2, #127	; 0x7f
 800397c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800397e:	4b20      	ldr	r3, [pc, #128]	; (8003a00 <MX_RTC_Init+0xac>)
 8003980:	22ff      	movs	r2, #255	; 0xff
 8003982:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003984:	4b1e      	ldr	r3, [pc, #120]	; (8003a00 <MX_RTC_Init+0xac>)
 8003986:	2200      	movs	r2, #0
 8003988:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <MX_RTC_Init+0xac>)
 800398c:	2200      	movs	r2, #0
 800398e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <MX_RTC_Init+0xac>)
 8003992:	2200      	movs	r2, #0
 8003994:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003996:	481a      	ldr	r0, [pc, #104]	; (8003a00 <MX_RTC_Init+0xac>)
 8003998:	f7fe f85e 	bl	8001a58 <HAL_RTC_Init>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80039a2:	f7ff ffcf 	bl	8003944 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	2201      	movs	r2, #1
 80039be:	4619      	mov	r1, r3
 80039c0:	480f      	ldr	r0, [pc, #60]	; (8003a00 <MX_RTC_Init+0xac>)
 80039c2:	f7fe f8da 	bl	8001b7a <HAL_RTC_SetTime>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80039cc:	f7ff ffba 	bl	8003944 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80039d0:	2304      	movs	r3, #4
 80039d2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_FEBRUARY;
 80039d4:	2302      	movs	r3, #2
 80039d6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x19;
 80039d8:	2319      	movs	r3, #25
 80039da:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80039dc:	2300      	movs	r3, #0
 80039de:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80039e0:	463b      	mov	r3, r7
 80039e2:	2201      	movs	r2, #1
 80039e4:	4619      	mov	r1, r3
 80039e6:	4806      	ldr	r0, [pc, #24]	; (8003a00 <MX_RTC_Init+0xac>)
 80039e8:	f7fe f984 	bl	8001cf4 <HAL_RTC_SetDate>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80039f2:	f7ff ffa7 	bl	8003944 <Error_Handler>
  }

}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000064 	.word	0x20000064
 8003a04:	40002800 	.word	0x40002800

08003a08 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <HAL_RTC_MspInit+0x24>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d102      	bne.n	8003a20 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a1a:	4b05      	ldr	r3, [pc, #20]	; (8003a30 <HAL_RTC_MspInit+0x28>)
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40002800 	.word	0x40002800
 8003a30:	42470e3c 	.word	0x42470e3c

08003a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	4b10      	ldr	r3, [pc, #64]	; (8003a80 <HAL_MspInit+0x4c>)
 8003a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a42:	4a0f      	ldr	r2, [pc, #60]	; (8003a80 <HAL_MspInit+0x4c>)
 8003a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a48:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <HAL_MspInit+0x4c>)
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a52:	607b      	str	r3, [r7, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	603b      	str	r3, [r7, #0]
 8003a5a:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_MspInit+0x4c>)
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	4a08      	ldr	r2, [pc, #32]	; (8003a80 <HAL_MspInit+0x4c>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6413      	str	r3, [r2, #64]	; 0x40
 8003a66:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <HAL_MspInit+0x4c>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40023800 	.word	0x40023800

08003a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a96:	e7fe      	b.n	8003a96 <HardFault_Handler+0x4>

08003a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <MemManage_Handler+0x4>

08003a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa2:	e7fe      	b.n	8003aa2 <BusFault_Handler+0x4>

08003aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa8:	e7fe      	b.n	8003aa8 <UsageFault_Handler+0x4>

08003aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad8:	f7fc ff5c 	bl	8000994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ae4:	4802      	ldr	r0, [pc, #8]	; (8003af0 <USART6_IRQHandler+0x10>)
 8003ae6:	f7fe ffad 	bl	8002a44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	200000c4 	.word	0x200000c4

08003af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af4:	b480      	push	{r7}
 8003af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <SystemInit+0x60>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <SystemInit+0x60>)
 8003b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <SystemInit+0x64>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a12      	ldr	r2, [pc, #72]	; (8003b58 <SystemInit+0x64>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <SystemInit+0x64>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	; (8003b58 <SystemInit+0x64>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	; (8003b58 <SystemInit+0x64>)
 8003b20:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b28:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	; (8003b58 <SystemInit+0x64>)
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <SystemInit+0x68>)
 8003b2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <SystemInit+0x64>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <SystemInit+0x64>)
 8003b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <SystemInit+0x64>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003b42:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <SystemInit+0x60>)
 8003b44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b48:	609a      	str	r2, [r3, #8]
#endif
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr
 8003b54:	e000ed00 	.word	0xe000ed00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	24003010 	.word	0x24003010

08003b60 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b092      	sub	sp, #72	; 0x48
 8003b64:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
 8003b7e:	611a      	str	r2, [r3, #16]
 8003b80:	615a      	str	r2, [r3, #20]
 8003b82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	2220      	movs	r2, #32
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 f990 	bl	8003eb0 <memset>

  htim1.Instance = TIM1;
 8003b90:	4b33      	ldr	r3, [pc, #204]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003b92:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <MX_TIM1_Init+0x104>)
 8003b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48-1;
 8003b96:	4b32      	ldr	r3, [pc, #200]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003b98:	222f      	movs	r2, #47	; 0x2f
 8003b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b9c:	4b30      	ldr	r3, [pc, #192]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003ba2:	4b2f      	ldr	r3, [pc, #188]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003baa:	4b2d      	ldr	r3, [pc, #180]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003bb0:	4b2b      	ldr	r3, [pc, #172]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb6:	4b2a      	ldr	r3, [pc, #168]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003bbc:	4828      	ldr	r0, [pc, #160]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003bbe:	f7fe f9b2 	bl	8001f26 <HAL_TIM_PWM_Init>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003bc8:	f7ff febc 	bl	8003944 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4821      	ldr	r0, [pc, #132]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003bdc:	f7fe fd22 	bl	8002624 <HAL_TIMEx_MasterConfigSynchronization>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003be6:	f7ff fead 	bl	8003944 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bea:	2360      	movs	r3, #96	; 0x60
 8003bec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
 8003bee:	2364      	movs	r3, #100	; 0x64
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003c02:	2300      	movs	r3, #0
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4814      	ldr	r0, [pc, #80]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003c10:	f7fe f9e6 	bl	8001fe0 <HAL_TIM_PWM_ConfigChannel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003c1a:	f7ff fe93 	bl	8003944 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4807      	ldr	r0, [pc, #28]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003c42:	f7fe fd5d 	bl	8002700 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8003c4c:	f7ff fe7a 	bl	8003944 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003c50:	4803      	ldr	r0, [pc, #12]	; (8003c60 <MX_TIM1_Init+0x100>)
 8003c52:	f000 f82b 	bl	8003cac <HAL_TIM_MspPostInit>

}
 8003c56:	bf00      	nop
 8003c58:	3748      	adds	r7, #72	; 0x48
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000084 	.word	0x20000084
 8003c64:	40010000 	.word	0x40010000

08003c68 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a0b      	ldr	r2, [pc, #44]	; (8003ca4 <HAL_TIM_PWM_MspInit+0x3c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10d      	bne.n	8003c96 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_TIM_PWM_MspInit+0x40>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <HAL_TIM_PWM_MspInit+0x40>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6453      	str	r3, [r2, #68]	; 0x44
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <HAL_TIM_PWM_MspInit+0x40>)
 8003c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003c96:	bf00      	nop
 8003c98:	3714      	adds	r7, #20
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	40010000 	.word	0x40010000
 8003ca8:	40023800 	.word	0x40023800

08003cac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	f107 030c 	add.w	r3, r7, #12
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a12      	ldr	r2, [pc, #72]	; (8003d14 <HAL_TIM_MspPostInit+0x68>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d11e      	bne.n	8003d0c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <HAL_TIM_MspPostInit+0x6c>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a10      	ldr	r2, [pc, #64]	; (8003d18 <HAL_TIM_MspPostInit+0x6c>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b0e      	ldr	r3, [pc, #56]	; (8003d18 <HAL_TIM_MspPostInit+0x6c>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d00:	f107 030c 	add.w	r3, r7, #12
 8003d04:	4619      	mov	r1, r3
 8003d06:	4805      	ldr	r0, [pc, #20]	; (8003d1c <HAL_TIM_MspPostInit+0x70>)
 8003d08:	f7fc ffba 	bl	8000c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d0c:	bf00      	nop
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40010000 	.word	0x40010000
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	40020000 	.word	0x40020000

08003d20 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d26:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <MX_USART6_UART_Init+0x50>)
 8003d28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003d32:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003d38:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003d3e:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d46:	220c      	movs	r2, #12
 8003d48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d4a:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d50:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003d56:	4805      	ldr	r0, [pc, #20]	; (8003d6c <MX_USART6_UART_Init+0x4c>)
 8003d58:	f7fe fd49 	bl	80027ee <HAL_UART_Init>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d001      	beq.n	8003d66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003d62:	f7ff fdef 	bl	8003944 <Error_Handler>
  }

}
 8003d66:	bf00      	nop
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200000c4 	.word	0x200000c4
 8003d70:	40011400 	.word	0x40011400

08003d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	; 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a1d      	ldr	r2, [pc, #116]	; (8003e08 <HAL_UART_MspInit+0x94>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d133      	bne.n	8003dfe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	4b1c      	ldr	r3, [pc, #112]	; (8003e0c <HAL_UART_MspInit+0x98>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <HAL_UART_MspInit+0x98>)
 8003da0:	f043 0320 	orr.w	r3, r3, #32
 8003da4:	6453      	str	r3, [r2, #68]	; 0x44
 8003da6:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <HAL_UART_MspInit+0x98>)
 8003da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	4b15      	ldr	r3, [pc, #84]	; (8003e0c <HAL_UART_MspInit+0x98>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a14      	ldr	r2, [pc, #80]	; (8003e0c <HAL_UART_MspInit+0x98>)
 8003dbc:	f043 0304 	orr.w	r3, r3, #4
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b12      	ldr	r3, [pc, #72]	; (8003e0c <HAL_UART_MspInit+0x98>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003dce:	23c0      	movs	r3, #192	; 0xc0
 8003dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003dde:	2308      	movs	r3, #8
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de2:	f107 0314 	add.w	r3, r7, #20
 8003de6:	4619      	mov	r1, r3
 8003de8:	4809      	ldr	r0, [pc, #36]	; (8003e10 <HAL_UART_MspInit+0x9c>)
 8003dea:	f7fc ff49 	bl	8000c80 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003dee:	2200      	movs	r2, #0
 8003df0:	2100      	movs	r1, #0
 8003df2:	2047      	movs	r0, #71	; 0x47
 8003df4:	f7fc feeb 	bl	8000bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003df8:	2047      	movs	r0, #71	; 0x47
 8003dfa:	f7fc ff04 	bl	8000c06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003dfe:	bf00      	nop
 8003e00:	3728      	adds	r7, #40	; 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40011400 	.word	0x40011400
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40020800 	.word	0x40020800

08003e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e1a:	e003      	b.n	8003e24 <LoopCopyDataInit>

08003e1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e22:	3104      	adds	r1, #4

08003e24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e24:	480b      	ldr	r0, [pc, #44]	; (8003e54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e26:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e2c:	d3f6      	bcc.n	8003e1c <CopyDataInit>
  ldr  r2, =_sbss
 8003e2e:	4a0b      	ldr	r2, [pc, #44]	; (8003e5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e30:	e002      	b.n	8003e38 <LoopFillZerobss>

08003e32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e34:	f842 3b04 	str.w	r3, [r2], #4

08003e38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e38:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e3c:	d3f9      	bcc.n	8003e32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e3e:	f7ff fe59 	bl	8003af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e42:	f000 f811 	bl	8003e68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e46:	f7ff fc6f 	bl	8003728 <main>
  bx  lr    
 8003e4a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e4c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003e50:	08003f00 	.word	0x08003f00
  ldr  r0, =_sdata
 8003e54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e58:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 8003e5c:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8003e60:	20000104 	.word	0x20000104

08003e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e64:	e7fe      	b.n	8003e64 <ADC_IRQHandler>
	...

08003e68 <__libc_init_array>:
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	4e0d      	ldr	r6, [pc, #52]	; (8003ea0 <__libc_init_array+0x38>)
 8003e6c:	4c0d      	ldr	r4, [pc, #52]	; (8003ea4 <__libc_init_array+0x3c>)
 8003e6e:	1ba4      	subs	r4, r4, r6
 8003e70:	10a4      	asrs	r4, r4, #2
 8003e72:	2500      	movs	r5, #0
 8003e74:	42a5      	cmp	r5, r4
 8003e76:	d109      	bne.n	8003e8c <__libc_init_array+0x24>
 8003e78:	4e0b      	ldr	r6, [pc, #44]	; (8003ea8 <__libc_init_array+0x40>)
 8003e7a:	4c0c      	ldr	r4, [pc, #48]	; (8003eac <__libc_init_array+0x44>)
 8003e7c:	f000 f820 	bl	8003ec0 <_init>
 8003e80:	1ba4      	subs	r4, r4, r6
 8003e82:	10a4      	asrs	r4, r4, #2
 8003e84:	2500      	movs	r5, #0
 8003e86:	42a5      	cmp	r5, r4
 8003e88:	d105      	bne.n	8003e96 <__libc_init_array+0x2e>
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e90:	4798      	blx	r3
 8003e92:	3501      	adds	r5, #1
 8003e94:	e7ee      	b.n	8003e74 <__libc_init_array+0xc>
 8003e96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e9a:	4798      	blx	r3
 8003e9c:	3501      	adds	r5, #1
 8003e9e:	e7f2      	b.n	8003e86 <__libc_init_array+0x1e>
 8003ea0:	08003ef8 	.word	0x08003ef8
 8003ea4:	08003ef8 	.word	0x08003ef8
 8003ea8:	08003ef8 	.word	0x08003ef8
 8003eac:	08003efc 	.word	0x08003efc

08003eb0 <memset>:
 8003eb0:	4402      	add	r2, r0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d100      	bne.n	8003eba <memset+0xa>
 8003eb8:	4770      	bx	lr
 8003eba:	f803 1b01 	strb.w	r1, [r3], #1
 8003ebe:	e7f9      	b.n	8003eb4 <memset+0x4>

08003ec0 <_init>:
 8003ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec2:	bf00      	nop
 8003ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec6:	bc08      	pop	{r3}
 8003ec8:	469e      	mov	lr, r3
 8003eca:	4770      	bx	lr

08003ecc <_fini>:
 8003ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ece:	bf00      	nop
 8003ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed2:	bc08      	pop	{r3}
 8003ed4:	469e      	mov	lr, r3
 8003ed6:	4770      	bx	lr
