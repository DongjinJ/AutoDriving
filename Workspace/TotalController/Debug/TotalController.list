
TotalController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005424  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080055c4  080055c4  000155c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005624  08005624  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800562c  0800562c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800562c  0800562c  0001562c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005630  08005630  00015630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000070  080056a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  080056a4  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013060  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c19  00000000  00000000  00033100  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001138  00000000  00000000  00035d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fd0  00000000  00000000  00036e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000189ed  00000000  00000000  00037e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f7c5  00000000  00000000  00050815  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094543  00000000  00000000  0005ffda  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f451d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e8  00000000  00000000  000f4598  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055ac 	.word	0x080055ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080055ac 	.word	0x080055ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 f94d 	bl	8000848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f004 f90c 	bl	80047d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f965 	bl	80008b2 <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 f92d 	bl	800085e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000008 	.word	0x20000008
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	2000009c 	.word	0x2000009c

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	2000009c 	.word	0x2000009c

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	68ba      	ldr	r2, [r7, #8]
 80006c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c4:	4013      	ands	r3, r2
 80006c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x44>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00

080006f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <__NVIC_GetPriorityGrouping+0x18>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	f003 0307 	and.w	r3, r3, #7
}
 80006fe:	4618      	mov	r0, r3
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	2b00      	cmp	r3, #0
 800071c:	db0b      	blt.n	8000736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	f003 021f 	and.w	r2, r3, #31
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <__NVIC_EnableIRQ+0x38>)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	095b      	lsrs	r3, r3, #5
 800072c:	2001      	movs	r0, #1
 800072e:	fa00 f202 	lsl.w	r2, r0, r2
 8000732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	e000e100 	.word	0xe000e100

08000748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	6039      	str	r1, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	db0a      	blt.n	8000772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	490c      	ldr	r1, [pc, #48]	; (8000794 <__NVIC_SetPriority+0x4c>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	0112      	lsls	r2, r2, #4
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	440b      	add	r3, r1
 800076c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000770:	e00a      	b.n	8000788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4908      	ldr	r1, [pc, #32]	; (8000798 <__NVIC_SetPriority+0x50>)
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	f003 030f 	and.w	r3, r3, #15
 800077e:	3b04      	subs	r3, #4
 8000780:	0112      	lsls	r2, r2, #4
 8000782:	b2d2      	uxtb	r2, r2
 8000784:	440b      	add	r3, r1
 8000786:	761a      	strb	r2, [r3, #24]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b480      	push	{r7}
 800079e:	b089      	sub	sp, #36	; 0x24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b0:	69fb      	ldr	r3, [r7, #28]
 80007b2:	f1c3 0307 	rsb	r3, r3, #7
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	bf28      	it	cs
 80007ba:	2304      	movcs	r3, #4
 80007bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3304      	adds	r3, #4
 80007c2:	2b06      	cmp	r3, #6
 80007c4:	d902      	bls.n	80007cc <NVIC_EncodePriority+0x30>
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	3b03      	subs	r3, #3
 80007ca:	e000      	b.n	80007ce <NVIC_EncodePriority+0x32>
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d0:	f04f 32ff 	mov.w	r2, #4294967295
 80007d4:	69bb      	ldr	r3, [r7, #24]
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	43da      	mvns	r2, r3
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	401a      	ands	r2, r3
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e4:	f04f 31ff 	mov.w	r1, #4294967295
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	fa01 f303 	lsl.w	r3, r1, r3
 80007ee:	43d9      	mvns	r1, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f4:	4313      	orrs	r3, r2
         );
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3724      	adds	r7, #36	; 0x24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
	...

08000804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b01      	subs	r3, #1
 8000810:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000814:	d301      	bcc.n	800081a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000816:	2301      	movs	r3, #1
 8000818:	e00f      	b.n	800083a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081a:	4a0a      	ldr	r2, [pc, #40]	; (8000844 <SysTick_Config+0x40>)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	3b01      	subs	r3, #1
 8000820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000822:	210f      	movs	r1, #15
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	f7ff ff8e 	bl	8000748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <SysTick_Config+0x40>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <SysTick_Config+0x40>)
 8000834:	2207      	movs	r2, #7
 8000836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	e000e010 	.word	0xe000e010

08000848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff29 	bl	80006a8 <__NVIC_SetPriorityGrouping>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}

0800085e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085e:	b580      	push	{r7, lr}
 8000860:	b086      	sub	sp, #24
 8000862:	af00      	add	r7, sp, #0
 8000864:	4603      	mov	r3, r0
 8000866:	60b9      	str	r1, [r7, #8]
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000870:	f7ff ff3e 	bl	80006f0 <__NVIC_GetPriorityGrouping>
 8000874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	68b9      	ldr	r1, [r7, #8]
 800087a:	6978      	ldr	r0, [r7, #20]
 800087c:	f7ff ff8e 	bl	800079c <NVIC_EncodePriority>
 8000880:	4602      	mov	r2, r0
 8000882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff ff5d 	bl	8000748 <__NVIC_SetPriority>
}
 800088e:	bf00      	nop
 8000890:	3718      	adds	r7, #24
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff31 	bl	800070c <__NVIC_EnableIRQ>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}

080008b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff ffa2 	bl	8000804 <SysTick_Config>
 80008c0:	4603      	mov	r3, r0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80008ca:	b480      	push	{r7}
 80008cc:	b083      	sub	sp, #12
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d004      	beq.n	80008e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80008e4:	2301      	movs	r3, #1
 80008e6:	e00c      	b.n	8000902 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2205      	movs	r2, #5
 80008ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f022 0201 	bic.w	r2, r2, #1
 80008fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	; 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
 800092a:	e159      	b.n	8000be0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800092c:	2201      	movs	r2, #1
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	4013      	ands	r3, r2
 800093e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000940:	693a      	ldr	r2, [r7, #16]
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	429a      	cmp	r2, r3
 8000946:	f040 8148 	bne.w	8000bda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d00b      	beq.n	800096a <HAL_GPIO_Init+0x5a>
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d007      	beq.n	800096a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095e:	2b11      	cmp	r3, #17
 8000960:	d003      	beq.n	800096a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	2b12      	cmp	r3, #18
 8000968:	d130      	bne.n	80009cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	fa02 f303 	lsl.w	r3, r2, r3
 800097a:	43db      	mvns	r3, r3
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	4013      	ands	r3, r2
 8000980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	68da      	ldr	r2, [r3, #12]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	69ba      	ldr	r2, [r7, #24]
 8000990:	4313      	orrs	r3, r2
 8000992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009a0:	2201      	movs	r2, #1
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	43db      	mvns	r3, r3
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	4013      	ands	r3, r2
 80009ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	091b      	lsrs	r3, r3, #4
 80009b6:	f003 0201 	and.w	r2, r3, #1
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	2203      	movs	r2, #3
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	69ba      	ldr	r2, [r7, #24]
 80009e0:	4013      	ands	r3, r2
 80009e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	689a      	ldr	r2, [r3, #8]
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	69ba      	ldr	r2, [r7, #24]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d003      	beq.n	8000a0c <HAL_GPIO_Init+0xfc>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b12      	cmp	r3, #18
 8000a0a:	d123      	bne.n	8000a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	08da      	lsrs	r2, r3, #3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3208      	adds	r2, #8
 8000a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	f003 0307 	and.w	r3, r3, #7
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	220f      	movs	r2, #15
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	691a      	ldr	r2, [r3, #16]
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	69ba      	ldr	r2, [r7, #24]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	08da      	lsrs	r2, r3, #3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	69b9      	ldr	r1, [r7, #24]
 8000a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	2203      	movs	r2, #3
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f003 0203 	and.w	r2, r3, #3
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f000 80a2 	beq.w	8000bda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b56      	ldr	r3, [pc, #344]	; (8000bf4 <HAL_GPIO_Init+0x2e4>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a55      	ldr	r2, [pc, #340]	; (8000bf4 <HAL_GPIO_Init+0x2e4>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b53      	ldr	r3, [pc, #332]	; (8000bf4 <HAL_GPIO_Init+0x2e4>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ab2:	4a51      	ldr	r2, [pc, #324]	; (8000bf8 <HAL_GPIO_Init+0x2e8>)
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	089b      	lsrs	r3, r3, #2
 8000ab8:	3302      	adds	r3, #2
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	220f      	movs	r2, #15
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4a48      	ldr	r2, [pc, #288]	; (8000bfc <HAL_GPIO_Init+0x2ec>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d019      	beq.n	8000b12 <HAL_GPIO_Init+0x202>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <HAL_GPIO_Init+0x2f0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d013      	beq.n	8000b0e <HAL_GPIO_Init+0x1fe>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4a46      	ldr	r2, [pc, #280]	; (8000c04 <HAL_GPIO_Init+0x2f4>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d00d      	beq.n	8000b0a <HAL_GPIO_Init+0x1fa>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a45      	ldr	r2, [pc, #276]	; (8000c08 <HAL_GPIO_Init+0x2f8>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d007      	beq.n	8000b06 <HAL_GPIO_Init+0x1f6>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4a44      	ldr	r2, [pc, #272]	; (8000c0c <HAL_GPIO_Init+0x2fc>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_GPIO_Init+0x1f2>
 8000afe:	2304      	movs	r3, #4
 8000b00:	e008      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b02:	2307      	movs	r3, #7
 8000b04:	e006      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b06:	2303      	movs	r3, #3
 8000b08:	e004      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	e002      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_Init+0x204>
 8000b12:	2300      	movs	r3, #0
 8000b14:	69fa      	ldr	r2, [r7, #28]
 8000b16:	f002 0203 	and.w	r2, r2, #3
 8000b1a:	0092      	lsls	r2, r2, #2
 8000b1c:	4093      	lsls	r3, r2
 8000b1e:	69ba      	ldr	r2, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b24:	4934      	ldr	r1, [pc, #208]	; (8000bf8 <HAL_GPIO_Init+0x2e8>)
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	089b      	lsrs	r3, r3, #2
 8000b2a:	3302      	adds	r3, #2
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b38:	693b      	ldr	r3, [r7, #16]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b56:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	43db      	mvns	r3, r3
 8000b66:	69ba      	ldr	r2, [r7, #24]
 8000b68:	4013      	ands	r3, r2
 8000b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d003      	beq.n	8000b80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b78:	69ba      	ldr	r2, [r7, #24]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b80:	4a23      	ldr	r2, [pc, #140]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	43db      	mvns	r3, r3
 8000b90:	69ba      	ldr	r2, [r7, #24]
 8000b92:	4013      	ands	r3, r2
 8000b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000baa:	4a19      	ldr	r2, [pc, #100]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	69ba      	ldr	r2, [r7, #24]
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000bd4:	4a0e      	ldr	r2, [pc, #56]	; (8000c10 <HAL_GPIO_Init+0x300>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	61fb      	str	r3, [r7, #28]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	f67f aea2 	bls.w	800092c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000be8:	bf00      	nop
 8000bea:	3724      	adds	r7, #36	; 0x24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40013800 	.word	0x40013800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020800 	.word	0x40020800
 8000c08:	40020c00 	.word	0x40020c00
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40013c00 	.word	0x40013c00

08000c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	807b      	strh	r3, [r7, #2]
 8000c20:	4613      	mov	r3, r2
 8000c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c24:	787b      	ldrb	r3, [r7, #1]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d003      	beq.n	8000c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c2a:	887a      	ldrh	r2, [r7, #2]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000c30:	e003      	b.n	8000c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c32:	887b      	ldrh	r3, [r7, #2]
 8000c34:	041a      	lsls	r2, r3, #16
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	619a      	str	r2, [r3, #24]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e11f      	b.n	8000e9a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d106      	bne.n	8000c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f003 fba6 	bl	80043c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2224      	movs	r2, #36	; 0x24
 8000c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f022 0201 	bic.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000cac:	f001 f846 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8000cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	4a7b      	ldr	r2, [pc, #492]	; (8000ea4 <HAL_I2C_Init+0x25c>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d807      	bhi.n	8000ccc <HAL_I2C_Init+0x84>
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4a7a      	ldr	r2, [pc, #488]	; (8000ea8 <HAL_I2C_Init+0x260>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	bf94      	ite	ls
 8000cc4:	2301      	movls	r3, #1
 8000cc6:	2300      	movhi	r3, #0
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	e006      	b.n	8000cda <HAL_I2C_Init+0x92>
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	4a77      	ldr	r2, [pc, #476]	; (8000eac <HAL_I2C_Init+0x264>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	bf94      	ite	ls
 8000cd4:	2301      	movls	r3, #1
 8000cd6:	2300      	movhi	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e0db      	b.n	8000e9a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4a72      	ldr	r2, [pc, #456]	; (8000eb0 <HAL_I2C_Init+0x268>)
 8000ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cea:	0c9b      	lsrs	r3, r3, #18
 8000cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	68ba      	ldr	r2, [r7, #8]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a1b      	ldr	r3, [r3, #32]
 8000d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	4a64      	ldr	r2, [pc, #400]	; (8000ea4 <HAL_I2C_Init+0x25c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d802      	bhi.n	8000d1c <HAL_I2C_Init+0xd4>
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	e009      	b.n	8000d30 <HAL_I2C_Init+0xe8>
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000d22:	fb02 f303 	mul.w	r3, r2, r3
 8000d26:	4a63      	ldr	r2, [pc, #396]	; (8000eb4 <HAL_I2C_Init+0x26c>)
 8000d28:	fba2 2303 	umull	r2, r3, r2, r3
 8000d2c:	099b      	lsrs	r3, r3, #6
 8000d2e:	3301      	adds	r3, #1
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	430b      	orrs	r3, r1
 8000d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	4956      	ldr	r1, [pc, #344]	; (8000ea4 <HAL_I2C_Init+0x25c>)
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d80d      	bhi.n	8000d6c <HAL_I2C_Init+0x124>
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	1e59      	subs	r1, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d5e:	3301      	adds	r3, #1
 8000d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d64:	2b04      	cmp	r3, #4
 8000d66:	bf38      	it	cc
 8000d68:	2304      	movcc	r3, #4
 8000d6a:	e04f      	b.n	8000e0c <HAL_I2C_Init+0x1c4>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	689b      	ldr	r3, [r3, #8]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d111      	bne.n	8000d98 <HAL_I2C_Init+0x150>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	1e58      	subs	r0, r3, #1
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6859      	ldr	r1, [r3, #4]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	440b      	add	r3, r1
 8000d82:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d86:	3301      	adds	r3, #1
 8000d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	e012      	b.n	8000dbe <HAL_I2C_Init+0x176>
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	1e58      	subs	r0, r3, #1
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6859      	ldr	r1, [r3, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	440b      	add	r3, r1
 8000da6:	0099      	lsls	r1, r3, #2
 8000da8:	440b      	add	r3, r1
 8000daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dae:	3301      	adds	r3, #1
 8000db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	bf0c      	ite	eq
 8000db8:	2301      	moveq	r3, #1
 8000dba:	2300      	movne	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_I2C_Init+0x17e>
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e022      	b.n	8000e0c <HAL_I2C_Init+0x1c4>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10e      	bne.n	8000dec <HAL_I2C_Init+0x1a4>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	1e58      	subs	r0, r3, #1
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6859      	ldr	r1, [r3, #4]
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	440b      	add	r3, r1
 8000ddc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000de0:	3301      	adds	r3, #1
 8000de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dea:	e00f      	b.n	8000e0c <HAL_I2C_Init+0x1c4>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1e58      	subs	r0, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6859      	ldr	r1, [r3, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	440b      	add	r3, r1
 8000dfa:	0099      	lsls	r1, r3, #2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e02:	3301      	adds	r3, #1
 8000e04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e08:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e0c:	6879      	ldr	r1, [r7, #4]
 8000e0e:	6809      	ldr	r1, [r1, #0]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a1b      	ldr	r3, [r3, #32]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689b      	ldr	r3, [r3, #8]
 8000e36:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000e3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6911      	ldr	r1, [r2, #16]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	68d2      	ldr	r2, [r2, #12]
 8000e46:	4311      	orrs	r1, r2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	430b      	orrs	r3, r1
 8000e4e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	695a      	ldr	r2, [r3, #20]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	431a      	orrs	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2220      	movs	r2, #32
 8000e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	000186a0 	.word	0x000186a0
 8000ea8:	001e847f 	.word	0x001e847f
 8000eac:	003d08ff 	.word	0x003d08ff
 8000eb0:	431bde83 	.word	0x431bde83
 8000eb4:	10624dd3 	.word	0x10624dd3

08000eb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	817b      	strh	r3, [r7, #10]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff fbbe 	bl	800064c <HAL_GetTick>
 8000ed0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b20      	cmp	r3, #32
 8000edc:	f040 80e0 	bne.w	80010a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	9300      	str	r3, [sp, #0]
 8000ee4:	2319      	movs	r3, #25
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4970      	ldr	r1, [pc, #448]	; (80010ac <HAL_I2C_Master_Transmit+0x1f4>)
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f000 f964 	bl	80011b8 <I2C_WaitOnFlagUntilTimeout>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	e0d3      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <HAL_I2C_Master_Transmit+0x50>
 8000f04:	2302      	movs	r3, #2
 8000f06:	e0cc      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x1ea>
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d007      	beq.n	8000f2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0201 	orr.w	r2, r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	2221      	movs	r2, #33	; 0x21
 8000f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2210      	movs	r2, #16
 8000f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2200      	movs	r2, #0
 8000f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	893a      	ldrh	r2, [r7, #8]
 8000f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	4a50      	ldr	r2, [pc, #320]	; (80010b0 <HAL_I2C_Master_Transmit+0x1f8>)
 8000f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000f70:	8979      	ldrh	r1, [r7, #10]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	6a3a      	ldr	r2, [r7, #32]
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	f000 f89c 	bl	80010b4 <I2C_MasterRequestWrite>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e08d      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000f9c:	e066      	b.n	800106c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	6a39      	ldr	r1, [r7, #32]
 8000fa2:	68f8      	ldr	r0, [r7, #12]
 8000fa4:	f000 f9de 	bl	8001364 <I2C_WaitOnTXEFlagUntilTimeout>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00d      	beq.n	8000fca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d107      	bne.n	8000fc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e06b      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fce:	781a      	ldrb	r2, [r3, #0]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	1c5a      	adds	r2, r3, #1
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b04      	cmp	r3, #4
 8001006:	d11b      	bne.n	8001040 <HAL_I2C_Master_Transmit+0x188>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800100c:	2b00      	cmp	r3, #0
 800100e:	d017      	beq.n	8001040 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	1c5a      	adds	r2, r3, #1
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800102a:	b29b      	uxth	r3, r3
 800102c:	3b01      	subs	r3, #1
 800102e:	b29a      	uxth	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001038:	3b01      	subs	r3, #1
 800103a:	b29a      	uxth	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	6a39      	ldr	r1, [r7, #32]
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f000 f9ce 	bl	80013e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00d      	beq.n	800106c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	2b04      	cmp	r3, #4
 8001056:	d107      	bne.n	8001068 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001066:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e01a      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001070:	2b00      	cmp	r3, #0
 8001072:	d194      	bne.n	8000f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2220      	movs	r2, #32
 8001088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	e000      	b.n	80010a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80010a0:	2302      	movs	r3, #2
  }
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	00100002 	.word	0x00100002
 80010b0:	ffff0000 	.word	0xffff0000

080010b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af02      	add	r7, sp, #8
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	460b      	mov	r3, r1
 80010c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d006      	beq.n	80010de <I2C_MasterRequestWrite+0x2a>
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d003      	beq.n	80010de <I2C_MasterRequestWrite+0x2a>
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80010dc:	d108      	bne.n	80010f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	e00b      	b.n	8001108 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	2b12      	cmp	r3, #18
 80010f6:	d107      	bne.n	8001108 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001106:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f000 f84f 	bl	80011b8 <I2C_WaitOnFlagUntilTimeout>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00c      	beq.n	800113a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e035      	b.n	80011a6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001142:	d108      	bne.n	8001156 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001144:	897b      	ldrh	r3, [r7, #10]
 8001146:	b2db      	uxtb	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	e01b      	b.n	800118e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001156:	897b      	ldrh	r3, [r7, #10]
 8001158:	11db      	asrs	r3, r3, #7
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f003 0306 	and.w	r3, r3, #6
 8001160:	b2db      	uxtb	r3, r3
 8001162:	f063 030f 	orn	r3, r3, #15
 8001166:	b2da      	uxtb	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	490f      	ldr	r1, [pc, #60]	; (80011b0 <I2C_MasterRequestWrite+0xfc>)
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f000 f876 	bl	8001266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e010      	b.n	80011a6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001184:	897b      	ldrh	r3, [r7, #10]
 8001186:	b2da      	uxtb	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <I2C_MasterRequestWrite+0x100>)
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f000 f866 	bl	8001266 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	00010008 	.word	0x00010008
 80011b4:	00010002 	.word	0x00010002

080011b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	4613      	mov	r3, r2
 80011c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80011c8:	e025      	b.n	8001216 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d021      	beq.n	8001216 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011d2:	f7ff fa3b 	bl	800064c <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d302      	bcc.n	80011e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d116      	bne.n	8001216 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2200      	movs	r2, #0
 80011ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	2220      	movs	r2, #32
 80011f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f043 0220 	orr.w	r2, r3, #32
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e023      	b.n	800125e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b01      	cmp	r3, #1
 800121e:	d10d      	bne.n	800123c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	4013      	ands	r3, r2
 800122c:	b29b      	uxth	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	bf0c      	ite	eq
 8001232:	2301      	moveq	r3, #1
 8001234:	2300      	movne	r3, #0
 8001236:	b2db      	uxtb	r3, r3
 8001238:	461a      	mov	r2, r3
 800123a:	e00c      	b.n	8001256 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4013      	ands	r3, r2
 8001248:	b29b      	uxth	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf0c      	ite	eq
 800124e:	2301      	moveq	r3, #1
 8001250:	2300      	movne	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	429a      	cmp	r2, r3
 800125a:	d0b6      	beq.n	80011ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001274:	e051      	b.n	800131a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001284:	d123      	bne.n	80012ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001294:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800129e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2200      	movs	r2, #0
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2220      	movs	r2, #32
 80012aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f043 0204 	orr.w	r2, r3, #4
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e046      	b.n	800135c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d021      	beq.n	800131a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d6:	f7ff f9b9 	bl	800064c <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d302      	bcc.n	80012ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d116      	bne.n	800131a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2200      	movs	r2, #0
 80012f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2220      	movs	r2, #32
 80012f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f043 0220 	orr.w	r2, r3, #32
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e020      	b.n	800135c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	0c1b      	lsrs	r3, r3, #16
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b01      	cmp	r3, #1
 8001322:	d10c      	bne.n	800133e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	4013      	ands	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	e00b      	b.n	8001356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	43da      	mvns	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	4013      	ands	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf14      	ite	ne
 8001350:	2301      	movne	r3, #1
 8001352:	2300      	moveq	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d18d      	bne.n	8001276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001370:	e02d      	b.n	80013ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	f000 f878 	bl	8001468 <I2C_IsAcknowledgeFailed>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e02d      	b.n	80013de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d021      	beq.n	80013ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800138a:	f7ff f95f 	bl	800064c <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	429a      	cmp	r2, r3
 8001398:	d302      	bcc.n	80013a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d116      	bne.n	80013ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2220      	movs	r2, #32
 80013aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f043 0220 	orr.w	r2, r3, #32
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e007      	b.n	80013de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d8:	2b80      	cmp	r3, #128	; 0x80
 80013da:	d1ca      	bne.n	8001372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013f2:	e02d      	b.n	8001450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 f837 	bl	8001468 <I2C_IsAcknowledgeFailed>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e02d      	b.n	8001460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140a:	d021      	beq.n	8001450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800140c:	f7ff f91e 	bl	800064c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	429a      	cmp	r2, r3
 800141a:	d302      	bcc.n	8001422 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d116      	bne.n	8001450 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2220      	movs	r2, #32
 800142c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	f043 0220 	orr.w	r2, r3, #32
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e007      	b.n	8001460 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b04      	cmp	r3, #4
 800145c:	d1ca      	bne.n	80013f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147e:	d11b      	bne.n	80014b8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001488:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2220      	movs	r2, #32
 8001494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f043 0204 	orr.w	r2, r3, #4
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e25b      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d075      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	4ba3      	ldr	r3, [pc, #652]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d00c      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4ba0      	ldr	r3, [pc, #640]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d112      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4b9d      	ldr	r3, [pc, #628]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b99      	ldr	r3, [pc, #612]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05b      	beq.n	80015d0 <HAL_RCC_OscConfig+0x108>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d157      	bne.n	80015d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e236      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x74>
 800152e:	4b91      	ldr	r3, [pc, #580]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a90      	ldr	r2, [pc, #576]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b8b      	ldr	r3, [pc, #556]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a8a      	ldr	r2, [pc, #552]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a87      	ldr	r2, [pc, #540]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 8001560:	4b84      	ldr	r3, [pc, #528]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a83      	ldr	r2, [pc, #524]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a80      	ldr	r2, [pc, #512]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff f864 	bl	800064c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff f860 	bl	800064c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e1fb      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xc0>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff f850 	bl	800064c <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff f84c 	bl	800064c <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1e7      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0xe8>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	4b65      	ldr	r3, [pc, #404]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b62      	ldr	r3, [pc, #392]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1bb      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b56      	ldr	r3, [pc, #344]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4952      	ldr	r1, [pc, #328]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b4f      	ldr	r3, [pc, #316]	; (8001778 <HAL_RCC_OscConfig+0x2b0>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff f805 	bl	800064c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff f801 	bl	800064c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e19c      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4940      	ldr	r1, [pc, #256]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b3f      	ldr	r3, [pc, #252]	; (8001778 <HAL_RCC_OscConfig+0x2b0>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7fe ffe4 	bl	800064c <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7fe ffe0 	bl	800064c <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e17b      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d030      	beq.n	8001714 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <HAL_RCC_OscConfig+0x2b4>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7fe ffc4 	bl	800064c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7fe ffc0 	bl	800064c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e15b      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
 80016e6:	e015      	b.n	8001714 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_OscConfig+0x2b4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7fe ffad 	bl	800064c <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f6:	f7fe ffa9 	bl	800064c <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e144      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800170a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a0 	beq.w	8001862 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10f      	bne.n	8001752 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	; 0x40
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174e:	2301      	movs	r3, #1
 8001750:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_OscConfig+0x2b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d121      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <HAL_RCC_OscConfig+0x2b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <HAL_RCC_OscConfig+0x2b8>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800176a:	f7fe ff6f 	bl	800064c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001770:	e011      	b.n	8001796 <HAL_RCC_OscConfig+0x2ce>
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800
 8001778:	42470000 	.word	0x42470000
 800177c:	42470e80 	.word	0x42470e80
 8001780:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7fe ff62 	bl	800064c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e0fd      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b81      	ldr	r3, [pc, #516]	; (800199c <HAL_RCC_OscConfig+0x4d4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d106      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
 80017aa:	4b7d      	ldr	r3, [pc, #500]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ae:	4a7c      	ldr	r2, [pc, #496]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6713      	str	r3, [r2, #112]	; 0x70
 80017b6:	e01c      	b.n	80017f2 <HAL_RCC_OscConfig+0x32a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b05      	cmp	r3, #5
 80017be:	d10c      	bne.n	80017da <HAL_RCC_OscConfig+0x312>
 80017c0:	4b77      	ldr	r3, [pc, #476]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c4:	4a76      	ldr	r2, [pc, #472]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017c6:	f043 0304 	orr.w	r3, r3, #4
 80017ca:	6713      	str	r3, [r2, #112]	; 0x70
 80017cc:	4b74      	ldr	r3, [pc, #464]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d0:	4a73      	ldr	r2, [pc, #460]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6713      	str	r3, [r2, #112]	; 0x70
 80017d8:	e00b      	b.n	80017f2 <HAL_RCC_OscConfig+0x32a>
 80017da:	4b71      	ldr	r3, [pc, #452]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	4a70      	ldr	r2, [pc, #448]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6713      	str	r3, [r2, #112]	; 0x70
 80017e6:	4b6e      	ldr	r3, [pc, #440]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	4a6d      	ldr	r2, [pc, #436]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80017ec:	f023 0304 	bic.w	r3, r3, #4
 80017f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d015      	beq.n	8001826 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fa:	f7fe ff27 	bl	800064c <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7fe ff23 	bl	800064c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0bc      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001818:	4b61      	ldr	r3, [pc, #388]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0ee      	beq.n	8001802 <HAL_RCC_OscConfig+0x33a>
 8001824:	e014      	b.n	8001850 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001826:	f7fe ff11 	bl	800064c <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800182c:	e00a      	b.n	8001844 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7fe ff0d 	bl	800064c <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f241 3288 	movw	r2, #5000	; 0x1388
 800183c:	4293      	cmp	r3, r2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e0a6      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001844:	4b56      	ldr	r3, [pc, #344]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 8001846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1ee      	bne.n	800182e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001850:	7dfb      	ldrb	r3, [r7, #23]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d105      	bne.n	8001862 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001856:	4b52      	ldr	r3, [pc, #328]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 800185c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8092 	beq.w	8001990 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800186c:	4b4c      	ldr	r3, [pc, #304]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d05c      	beq.n	8001932 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d141      	bne.n	8001904 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001880:	4b48      	ldr	r3, [pc, #288]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7fe fee1 	bl	800064c <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800188e:	f7fe fedd 	bl	800064c <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e078      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a0:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69da      	ldr	r2, [r3, #28]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	019b      	lsls	r3, r3, #6
 80018bc:	431a      	orrs	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	3b01      	subs	r3, #1
 80018c6:	041b      	lsls	r3, r3, #16
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	061b      	lsls	r3, r3, #24
 80018d0:	4933      	ldr	r1, [pc, #204]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d6:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7fe feb6 	bl	800064c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7fe feb2 	bl	800064c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e04d      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x41c>
 8001902:	e045      	b.n	8001990 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_RCC_OscConfig+0x4dc>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190a:	f7fe fe9f 	bl	800064c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001912:	f7fe fe9b 	bl	800064c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e036      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x44a>
 8001930:	e02e      	b.n	8001990 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d101      	bne.n	800193e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e029      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800193e:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <HAL_RCC_OscConfig+0x4d8>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	429a      	cmp	r2, r3
 8001950:	d11c      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d115      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001966:	4013      	ands	r3, r2
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800196c:	4293      	cmp	r3, r2
 800196e:	d10d      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d106      	bne.n	800198c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40007000 	.word	0x40007000
 80019a0:	40023800 	.word	0x40023800
 80019a4:	42470060 	.word	0x42470060

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0cc      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d90c      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b65      	ldr	r3, [pc, #404]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d2:	4b63      	ldr	r3, [pc, #396]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0b8      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d020      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d005      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019fc:	4b59      	ldr	r3, [pc, #356]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a14:	4b53      	ldr	r3, [pc, #332]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a52      	ldr	r2, [pc, #328]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	494d      	ldr	r1, [pc, #308]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d044      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b47      	ldr	r3, [pc, #284]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d119      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e07f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d003      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	d107      	bne.n	8001a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e06f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a76:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e067      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f023 0203 	bic.w	r2, r3, #3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	4934      	ldr	r1, [pc, #208]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	4313      	orrs	r3, r2
 8001a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a98:	f7fe fdd8 	bl	800064c <HAL_GetTick>
 8001a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	e00a      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa0:	f7fe fdd4 	bl	800064c <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e04f      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab6:	4b2b      	ldr	r3, [pc, #172]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 020c 	and.w	r2, r3, #12
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1eb      	bne.n	8001aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 030f 	and.w	r3, r3, #15
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d20c      	bcs.n	8001af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ade:	4b20      	ldr	r3, [pc, #128]	; (8001b60 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d001      	beq.n	8001af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e032      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d008      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4916      	ldr	r1, [pc, #88]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d009      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b2e:	f000 f821 	bl	8001b74 <HAL_RCC_GetSysClockFreq>
 8001b32:	4601      	mov	r1, r0
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	091b      	lsrs	r3, r3, #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	fa21 f303 	lsr.w	r3, r1, r3
 8001b46:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <HAL_RCC_ClockConfig+0x1c4>)
 8001b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd38 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00
 8001b64:	40023800 	.word	0x40023800
 8001b68:	080055d8 	.word	0x080055d8
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000000 	.word	0x20000000

08001b74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	2300      	movs	r3, #0
 8001b84:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b8a:	4b63      	ldr	r3, [pc, #396]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d007      	beq.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x32>
 8001b96:	2b08      	cmp	r3, #8
 8001b98:	d008      	beq.n	8001bac <HAL_RCC_GetSysClockFreq+0x38>
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 80b4 	bne.w	8001d08 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ba0:	4b5e      	ldr	r3, [pc, #376]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001ba2:	60bb      	str	r3, [r7, #8]
       break;
 8001ba4:	e0b3      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ba6:	4b5e      	ldr	r3, [pc, #376]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ba8:	60bb      	str	r3, [r7, #8]
      break;
 8001baa:	e0b0      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bac:	4b5a      	ldr	r3, [pc, #360]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d04a      	beq.n	8001c58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc2:	4b55      	ldr	r3, [pc, #340]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	099b      	lsrs	r3, r3, #6
 8001bc8:	f04f 0400 	mov.w	r4, #0
 8001bcc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	ea03 0501 	and.w	r5, r3, r1
 8001bd8:	ea04 0602 	and.w	r6, r4, r2
 8001bdc:	4629      	mov	r1, r5
 8001bde:	4632      	mov	r2, r6
 8001be0:	f04f 0300 	mov.w	r3, #0
 8001be4:	f04f 0400 	mov.w	r4, #0
 8001be8:	0154      	lsls	r4, r2, #5
 8001bea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bee:	014b      	lsls	r3, r1, #5
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4622      	mov	r2, r4
 8001bf4:	1b49      	subs	r1, r1, r5
 8001bf6:	eb62 0206 	sbc.w	r2, r2, r6
 8001bfa:	f04f 0300 	mov.w	r3, #0
 8001bfe:	f04f 0400 	mov.w	r4, #0
 8001c02:	0194      	lsls	r4, r2, #6
 8001c04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c08:	018b      	lsls	r3, r1, #6
 8001c0a:	1a5b      	subs	r3, r3, r1
 8001c0c:	eb64 0402 	sbc.w	r4, r4, r2
 8001c10:	f04f 0100 	mov.w	r1, #0
 8001c14:	f04f 0200 	mov.w	r2, #0
 8001c18:	00e2      	lsls	r2, r4, #3
 8001c1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c1e:	00d9      	lsls	r1, r3, #3
 8001c20:	460b      	mov	r3, r1
 8001c22:	4614      	mov	r4, r2
 8001c24:	195b      	adds	r3, r3, r5
 8001c26:	eb44 0406 	adc.w	r4, r4, r6
 8001c2a:	f04f 0100 	mov.w	r1, #0
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	0262      	lsls	r2, r4, #9
 8001c34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001c38:	0259      	lsls	r1, r3, #9
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4614      	mov	r4, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4621      	mov	r1, r4
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f04f 0400 	mov.w	r4, #0
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4623      	mov	r3, r4
 8001c4c:	f7fe fb18 	bl	8000280 <__aeabi_uldivmod>
 8001c50:	4603      	mov	r3, r0
 8001c52:	460c      	mov	r4, r1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	e049      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c58:	4b2f      	ldr	r3, [pc, #188]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	099b      	lsrs	r3, r3, #6
 8001c5e:	f04f 0400 	mov.w	r4, #0
 8001c62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	ea03 0501 	and.w	r5, r3, r1
 8001c6e:	ea04 0602 	and.w	r6, r4, r2
 8001c72:	4629      	mov	r1, r5
 8001c74:	4632      	mov	r2, r6
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f04f 0400 	mov.w	r4, #0
 8001c7e:	0154      	lsls	r4, r2, #5
 8001c80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c84:	014b      	lsls	r3, r1, #5
 8001c86:	4619      	mov	r1, r3
 8001c88:	4622      	mov	r2, r4
 8001c8a:	1b49      	subs	r1, r1, r5
 8001c8c:	eb62 0206 	sbc.w	r2, r2, r6
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	f04f 0400 	mov.w	r4, #0
 8001c98:	0194      	lsls	r4, r2, #6
 8001c9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c9e:	018b      	lsls	r3, r1, #6
 8001ca0:	1a5b      	subs	r3, r3, r1
 8001ca2:	eb64 0402 	sbc.w	r4, r4, r2
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	00e2      	lsls	r2, r4, #3
 8001cb0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001cb4:	00d9      	lsls	r1, r3, #3
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	4614      	mov	r4, r2
 8001cba:	195b      	adds	r3, r3, r5
 8001cbc:	eb44 0406 	adc.w	r4, r4, r6
 8001cc0:	f04f 0100 	mov.w	r1, #0
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	02a2      	lsls	r2, r4, #10
 8001cca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001cce:	0299      	lsls	r1, r3, #10
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	4614      	mov	r4, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0400 	mov.w	r4, #0
 8001cde:	461a      	mov	r2, r3
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f7fe facd 	bl	8000280 <__aeabi_uldivmod>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460c      	mov	r4, r1
 8001cea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	0c1b      	lsrs	r3, r3, #16
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	60bb      	str	r3, [r7, #8]
      break;
 8001d06:	e002      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001d0a:	60bb      	str	r3, [r7, #8]
      break;
 8001d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0e:	68bb      	ldr	r3, [r7, #8]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	007a1200 	.word	0x007a1200

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b03      	ldr	r3, [pc, #12]	; (8001d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4601      	mov	r1, r0
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a9b      	lsrs	r3, r3, #10
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4a03      	ldr	r2, [pc, #12]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d52:	5cd3      	ldrb	r3, [r2, r3]
 8001d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	080055e8 	.word	0x080055e8

08001d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d68:	f7ff ffdc 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d6c:	4601      	mov	r1, r0
 8001d6e:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	0b5b      	lsrs	r3, r3, #13
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	4a03      	ldr	r2, [pc, #12]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40023800 	.word	0x40023800
 8001d88:	080055e8 	.word	0x080055e8

08001d8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d035      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001db4:	4b67      	ldr	r3, [pc, #412]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dba:	f7fe fc47 	bl	800064c <HAL_GetTick>
 8001dbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dc2:	f7fe fc43 	bl	800064c <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d901      	bls.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e0ba      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dd4:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f0      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	019a      	lsls	r2, r3, #6
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	071b      	lsls	r3, r3, #28
 8001dec:	495a      	ldr	r1, [pc, #360]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001df4:	4b57      	ldr	r3, [pc, #348]	; (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dfa:	f7fe fc27 	bl	800064c <HAL_GetTick>
 8001dfe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e02:	f7fe fc23 	bl	800064c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e09a      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e14:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8083 	beq.w	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b49      	ldr	r3, [pc, #292]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a48      	ldr	r2, [pc, #288]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e4a:	4b44      	ldr	r3, [pc, #272]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a43      	ldr	r2, [pc, #268]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e56:	f7fe fbf9 	bl	800064c <HAL_GetTick>
 8001e5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e5e:	f7fe fbf5 	bl	800064c <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e06c      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e70:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e7c:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d02f      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d028      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ea2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ea4:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	; (8001f60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001eb0:	4a29      	ldr	r2, [pc, #164]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eb6:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d114      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7fe fbc3 	bl	800064c <HAL_GetTick>
 8001ec6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7fe fbbf 	bl	800064c <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e034      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ee      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ef8:	d10d      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001efa:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f0e:	4912      	ldr	r1, [pc, #72]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	608b      	str	r3, [r1, #8]
 8001f14:	e005      	b.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f20:	6093      	str	r3, [r2, #8]
 8001f22:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f2e:	490a      	ldr	r1, [pc, #40]	; (8001f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	7c1a      	ldrb	r2, [r3, #16]
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f46:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	42470068 	.word	0x42470068
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	42470e40 	.word	0x42470e40
 8001f64:	424711e0 	.word	0x424711e0

08001f68 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e083      	b.n	8002082 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7f5b      	ldrb	r3, [r3, #29]
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f002 fc0a 	bl	80047a4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2202      	movs	r2, #2
 8001f94:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	22ca      	movs	r2, #202	; 0xca
 8001f9c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2253      	movs	r2, #83	; 0x53
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 faa8 	bl	80024fc <RTC_EnterInitMode>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d008      	beq.n	8001fc4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	22ff      	movs	r2, #255	; 0xff
 8001fb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2204      	movs	r2, #4
 8001fbe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e05e      	b.n	8002082 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6812      	ldr	r2, [r2, #0]
 8001fce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8001fd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fd6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6899      	ldr	r1, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685a      	ldr	r2, [r3, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	68d2      	ldr	r2, [r2, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6919      	ldr	r1, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002022:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10e      	bne.n	8002050 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fa3a 	bl	80024ac <HAL_RTC_WaitForSynchro>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d008      	beq.n	8002050 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	22ff      	movs	r2, #255	; 0xff
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2204      	movs	r2, #4
 800204a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e018      	b.n	8002082 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800205e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	22ff      	movs	r2, #255	; 0xff
 8002078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002080:	2300      	movs	r3, #0
  }
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800208a:	b590      	push	{r4, r7, lr}
 800208c:	b087      	sub	sp, #28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	7f1b      	ldrb	r3, [r3, #28]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_RTC_SetTime+0x1c>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e0aa      	b.n	80021fc <HAL_RTC_SetTime+0x172>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2202      	movs	r2, #2
 80020b0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d126      	bne.n	8002106 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2200      	movs	r2, #0
 80020ca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f000 fa3f 	bl	8002554 <RTC_ByteToBcd2>
 80020d6:	4603      	mov	r3, r0
 80020d8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	785b      	ldrb	r3, [r3, #1]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fa38 	bl	8002554 <RTC_ByteToBcd2>
 80020e4:	4603      	mov	r3, r0
 80020e6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80020e8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	789b      	ldrb	r3, [r3, #2]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 fa30 	bl	8002554 <RTC_ByteToBcd2>
 80020f4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80020f6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	78db      	ldrb	r3, [r3, #3]
 80020fe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e018      	b.n	8002138 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	785b      	ldrb	r3, [r3, #1]
 8002124:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002126:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800212c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	78db      	ldrb	r3, [r3, #3]
 8002132:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002134:	4313      	orrs	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	22ca      	movs	r2, #202	; 0xca
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2253      	movs	r2, #83	; 0x53
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f9d7 	bl	80024fc <RTC_EnterInitMode>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00b      	beq.n	800216c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	22ff      	movs	r2, #255	; 0xff
 800215a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2204      	movs	r2, #4
 8002160:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e047      	b.n	80021fc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002176:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800217a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800218a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6899      	ldr	r1, [r3, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	431a      	orrs	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d111      	bne.n	80021e6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f972 	bl	80024ac <HAL_RTC_WaitForSynchro>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	22ff      	movs	r2, #255	; 0xff
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2204      	movs	r2, #4
 80021da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00a      	b.n	80021fc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	22ff      	movs	r2, #255	; 0xff
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2201      	movs	r2, #1
 80021f2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2200      	movs	r2, #0
 80021f8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80021fa:	2300      	movs	r3, #0
  }
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}

08002204 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002236:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800223a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	0c1b      	lsrs	r3, r3, #16
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002246:	b2da      	uxtb	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002256:	b2da      	uxtb	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002264:	b2da      	uxtb	r2, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	0c1b      	lsrs	r3, r3, #16
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d11a      	bne.n	80022b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f983 	bl	8002590 <RTC_Bcd2ToByte>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f97a 	bl	8002590 <RTC_Bcd2ToByte>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	789b      	ldrb	r3, [r3, #2]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f971 	bl	8002590 <RTC_Bcd2ToByte>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	7f1b      	ldrb	r3, [r3, #28]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <HAL_RTC_SetDate+0x1c>
 80022d8:	2302      	movs	r3, #2
 80022da:	e094      	b.n	8002406 <HAL_RTC_SetDate+0x146>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2201      	movs	r2, #1
 80022e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2202      	movs	r2, #2
 80022e6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10e      	bne.n	800230c <HAL_RTC_SetDate+0x4c>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	f003 0310 	and.w	r3, r3, #16
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d008      	beq.n	800230c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	785b      	ldrb	r3, [r3, #1]
 80022fe:	f023 0310 	bic.w	r3, r3, #16
 8002302:	b2db      	uxtb	r3, r3
 8002304:	330a      	adds	r3, #10
 8002306:	b2da      	uxtb	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11c      	bne.n	800234c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	78db      	ldrb	r3, [r3, #3]
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f91c 	bl	8002554 <RTC_ByteToBcd2>
 800231c:	4603      	mov	r3, r0
 800231e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	785b      	ldrb	r3, [r3, #1]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 f915 	bl	8002554 <RTC_ByteToBcd2>
 800232a:	4603      	mov	r3, r0
 800232c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800232e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f90d 	bl	8002554 <RTC_ByteToBcd2>
 800233a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800233c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e00e      	b.n	800236a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	78db      	ldrb	r3, [r3, #3]
 8002350:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	785b      	ldrb	r3, [r3, #1]
 8002356:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002358:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800235e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002366:	4313      	orrs	r3, r2
 8002368:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	22ca      	movs	r2, #202	; 0xca
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2253      	movs	r2, #83	; 0x53
 8002378:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f8be 	bl	80024fc <RTC_EnterInitMode>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00b      	beq.n	800239e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	22ff      	movs	r2, #255	; 0xff
 800238c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2204      	movs	r2, #4
 8002392:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e033      	b.n	8002406 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80023ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d111      	bne.n	80023f0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f000 f86d 	bl	80024ac <HAL_RTC_WaitForSynchro>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00b      	beq.n	80023f0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	22ff      	movs	r2, #255	; 0xff
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2204      	movs	r2, #4
 80023e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00a      	b.n	8002406 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	22ff      	movs	r2, #255	; 0xff
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2201      	movs	r2, #1
 80023fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	371c      	adds	r7, #28
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}

0800240e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002428:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800242c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	b2da      	uxtb	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	0a1b      	lsrs	r3, r3, #8
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	b2da      	uxtb	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002450:	b2da      	uxtb	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	0b5b      	lsrs	r3, r3, #13
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d11a      	bne.n	80024a2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	78db      	ldrb	r3, [r3, #3]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 f88d 	bl	8002590 <RTC_Bcd2ToByte>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	785b      	ldrb	r3, [r3, #1]
 8002482:	4618      	mov	r0, r3
 8002484:	f000 f884 	bl	8002590 <RTC_Bcd2ToByte>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	789b      	ldrb	r3, [r3, #2]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 f87b 	bl	8002590 <RTC_Bcd2ToByte>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024c8:	f7fe f8c0 	bl	800064c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80024ce:	e009      	b.n	80024e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024d0:	f7fe f8bc 	bl	800064c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024de:	d901      	bls.n	80024e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e007      	b.n	80024f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f003 0320 	and.w	r3, r3, #32
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ee      	beq.n	80024d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d119      	bne.n	800254a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f04f 32ff 	mov.w	r2, #4294967295
 800251e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002520:	f7fe f894 	bl	800064c <HAL_GetTick>
 8002524:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8002526:	e009      	b.n	800253c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002528:	f7fe f890 	bl	800064c <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002536:	d901      	bls.n	800253c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e007      	b.n	800254c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ee      	beq.n	8002528 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8002562:	e005      	b.n	8002570 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3301      	adds	r3, #1
 8002568:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	3b0a      	subs	r3, #10
 800256e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b09      	cmp	r3, #9
 8002574:	d8f6      	bhi.n	8002564 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	b2da      	uxtb	r2, r3
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	4313      	orrs	r3, r2
 8002582:	b2db      	uxtb	r3, r3
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	4413      	add	r3, r2
 80025be:	b2db      	uxtb	r3, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e01d      	b.n	800261a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d106      	bne.n	80025f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f002 faa2 	bl	8004b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2202      	movs	r2, #2
 80025fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	3304      	adds	r3, #4
 8002608:	4619      	mov	r1, r3
 800260a:	4610      	mov	r0, r2
 800260c:	f000 fa08 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2b06      	cmp	r3, #6
 8002642:	d007      	beq.n	8002654 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d101      	bne.n	800267c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e01d      	b.n	80026b8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d106      	bne.n	8002696 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f002 fa31 	bl	8004af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3304      	adds	r3, #4
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f000 f9b9 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2201      	movs	r2, #1
 80026d0:	6839      	ldr	r1, [r7, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fc4a 	bl	8002f6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a10      	ldr	r2, [pc, #64]	; (8002720 <HAL_TIM_PWM_Start+0x60>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d107      	bne.n	80026f2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d007      	beq.n	8002714 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f042 0201 	orr.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40010000 	.word	0x40010000

08002724 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800273a:	2302      	movs	r3, #2
 800273c:	e0b4      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0c      	cmp	r3, #12
 8002752:	f200 809f 	bhi.w	8002894 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002756:	a201      	add	r2, pc, #4	; (adr r2, 800275c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	08002791 	.word	0x08002791
 8002760:	08002895 	.word	0x08002895
 8002764:	08002895 	.word	0x08002895
 8002768:	08002895 	.word	0x08002895
 800276c:	080027d1 	.word	0x080027d1
 8002770:	08002895 	.word	0x08002895
 8002774:	08002895 	.word	0x08002895
 8002778:	08002895 	.word	0x08002895
 800277c:	08002813 	.word	0x08002813
 8002780:	08002895 	.word	0x08002895
 8002784:	08002895 	.word	0x08002895
 8002788:	08002895 	.word	0x08002895
 800278c:	08002853 	.word	0x08002853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f9c2 	bl	8002b20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699a      	ldr	r2, [r3, #24]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0208 	orr.w	r2, r2, #8
 80027aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f022 0204 	bic.w	r2, r2, #4
 80027ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6999      	ldr	r1, [r3, #24]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	619a      	str	r2, [r3, #24]
      break;
 80027ce:	e062      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fa08 	bl	8002bec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6999      	ldr	r1, [r3, #24]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	021a      	lsls	r2, r3, #8
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	619a      	str	r2, [r3, #24]
      break;
 8002810:	e041      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fa53 	bl	8002cc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f042 0208 	orr.w	r2, r2, #8
 800282c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0204 	bic.w	r2, r2, #4
 800283c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69d9      	ldr	r1, [r3, #28]
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	61da      	str	r2, [r3, #28]
      break;
 8002850:	e021      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fa9d 	bl	8002d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69da      	ldr	r2, [r3, #28]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800286c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69da      	ldr	r2, [r3, #28]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69d9      	ldr	r1, [r3, #28]
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	021a      	lsls	r2, r3, #8
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	61da      	str	r2, [r3, #28]
      break;
 8002892:	e000      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002894:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d101      	bne.n	80028c8 <HAL_TIM_ConfigClockSource+0x18>
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0a6      	b.n	8002a16 <HAL_TIM_ConfigClockSource+0x166>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d067      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x120>
 8002900:	2b40      	cmp	r3, #64	; 0x40
 8002902:	d80b      	bhi.n	800291c <HAL_TIM_ConfigClockSource+0x6c>
 8002904:	2b10      	cmp	r3, #16
 8002906:	d073      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0x140>
 8002908:	2b10      	cmp	r3, #16
 800290a:	d802      	bhi.n	8002912 <HAL_TIM_ConfigClockSource+0x62>
 800290c:	2b00      	cmp	r3, #0
 800290e:	d06f      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002910:	e078      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002912:	2b20      	cmp	r3, #32
 8002914:	d06c      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0x140>
 8002916:	2b30      	cmp	r3, #48	; 0x30
 8002918:	d06a      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800291a:	e073      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800291c:	2b70      	cmp	r3, #112	; 0x70
 800291e:	d00d      	beq.n	800293c <HAL_TIM_ConfigClockSource+0x8c>
 8002920:	2b70      	cmp	r3, #112	; 0x70
 8002922:	d804      	bhi.n	800292e <HAL_TIM_ConfigClockSource+0x7e>
 8002924:	2b50      	cmp	r3, #80	; 0x50
 8002926:	d033      	beq.n	8002990 <HAL_TIM_ConfigClockSource+0xe0>
 8002928:	2b60      	cmp	r3, #96	; 0x60
 800292a:	d041      	beq.n	80029b0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800292c:	e06a      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800292e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002932:	d066      	beq.n	8002a02 <HAL_TIM_ConfigClockSource+0x152>
 8002934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002938:	d017      	beq.n	800296a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800293a:	e063      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6899      	ldr	r1, [r3, #8]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685a      	ldr	r2, [r3, #4]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f000 faee 	bl	8002f2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800295e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	609a      	str	r2, [r3, #8]
      break;
 8002968:	e04c      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6899      	ldr	r1, [r3, #8]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f000 fad7 	bl	8002f2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800298c:	609a      	str	r2, [r3, #8]
      break;
 800298e:	e039      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6818      	ldr	r0, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	6859      	ldr	r1, [r3, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	461a      	mov	r2, r3
 800299e:	f000 fa4b 	bl	8002e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2150      	movs	r1, #80	; 0x50
 80029a8:	4618      	mov	r0, r3
 80029aa:	f000 faa4 	bl	8002ef6 <TIM_ITRx_SetConfig>
      break;
 80029ae:	e029      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	461a      	mov	r2, r3
 80029be:	f000 fa6a 	bl	8002e96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2160      	movs	r1, #96	; 0x60
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fa94 	bl	8002ef6 <TIM_ITRx_SetConfig>
      break;
 80029ce:	e019      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	461a      	mov	r2, r3
 80029de:	f000 fa2b 	bl	8002e38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2140      	movs	r1, #64	; 0x40
 80029e8:	4618      	mov	r0, r3
 80029ea:	f000 fa84 	bl	8002ef6 <TIM_ITRx_SetConfig>
      break;
 80029ee:	e009      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4619      	mov	r1, r3
 80029fa:	4610      	mov	r0, r2
 80029fc:	f000 fa7b 	bl	8002ef6 <TIM_ITRx_SetConfig>
      break;
 8002a00:	e000      	b.n	8002a04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002a02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <TIM_Base_SetConfig+0xe4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00f      	beq.n	8002a58 <TIM_Base_SetConfig+0x38>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d00b      	beq.n	8002a58 <TIM_Base_SetConfig+0x38>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a31      	ldr	r2, [pc, #196]	; (8002b08 <TIM_Base_SetConfig+0xe8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d007      	beq.n	8002a58 <TIM_Base_SetConfig+0x38>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a30      	ldr	r2, [pc, #192]	; (8002b0c <TIM_Base_SetConfig+0xec>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d003      	beq.n	8002a58 <TIM_Base_SetConfig+0x38>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a2f      	ldr	r2, [pc, #188]	; (8002b10 <TIM_Base_SetConfig+0xf0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d108      	bne.n	8002a6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a25      	ldr	r2, [pc, #148]	; (8002b04 <TIM_Base_SetConfig+0xe4>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01b      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a78:	d017      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a22      	ldr	r2, [pc, #136]	; (8002b08 <TIM_Base_SetConfig+0xe8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <TIM_Base_SetConfig+0xec>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00f      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a20      	ldr	r2, [pc, #128]	; (8002b10 <TIM_Base_SetConfig+0xf0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1f      	ldr	r2, [pc, #124]	; (8002b14 <TIM_Base_SetConfig+0xf4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a1e      	ldr	r2, [pc, #120]	; (8002b18 <TIM_Base_SetConfig+0xf8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d003      	beq.n	8002aaa <TIM_Base_SetConfig+0x8a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1d      	ldr	r2, [pc, #116]	; (8002b1c <TIM_Base_SetConfig+0xfc>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d108      	bne.n	8002abc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <TIM_Base_SetConfig+0xe4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d103      	bne.n	8002af0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	691a      	ldr	r2, [r3, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	615a      	str	r2, [r3, #20]
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40010000 	.word	0x40010000
 8002b08:	40000400 	.word	0x40000400
 8002b0c:	40000800 	.word	0x40000800
 8002b10:	40000c00 	.word	0x40000c00
 8002b14:	40014000 	.word	0x40014000
 8002b18:	40014400 	.word	0x40014400
 8002b1c:	40014800 	.word	0x40014800

08002b20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b087      	sub	sp, #28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	f023 0201 	bic.w	r2, r3, #1
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f023 0303 	bic.w	r3, r3, #3
 8002b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f023 0302 	bic.w	r3, r3, #2
 8002b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <TIM_OC1_SetConfig+0xc8>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10c      	bne.n	8002b96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0308 	bic.w	r3, r3, #8
 8002b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f023 0304 	bic.w	r3, r3, #4
 8002b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <TIM_OC1_SetConfig+0xc8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d111      	bne.n	8002bc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40010000 	.word	0x40010000

08002bec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f023 0210 	bic.w	r2, r3, #16
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f023 0320 	bic.w	r3, r3, #32
 8002c36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a1e      	ldr	r2, [pc, #120]	; (8002cc0 <TIM_OC2_SetConfig+0xd4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d10d      	bne.n	8002c68 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a15      	ldr	r2, [pc, #84]	; (8002cc0 <TIM_OC2_SetConfig+0xd4>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d113      	bne.n	8002c98 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	621a      	str	r2, [r3, #32]
}
 8002cb2:	bf00      	nop
 8002cb4:	371c      	adds	r7, #28
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40010000 	.word	0x40010000

08002cc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b087      	sub	sp, #28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f023 0303 	bic.w	r3, r3, #3
 8002cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	021b      	lsls	r3, r3, #8
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	; (8002d94 <TIM_OC3_SetConfig+0xd0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10d      	bne.n	8002d3e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <TIM_OC3_SetConfig+0xd0>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d113      	bne.n	8002d6e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	011b      	lsls	r3, r3, #4
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	621a      	str	r2, [r3, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	371c      	adds	r7, #28
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	40010000 	.word	0x40010000

08002d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b087      	sub	sp, #28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	031b      	lsls	r3, r3, #12
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a10      	ldr	r2, [pc, #64]	; (8002e34 <TIM_OC4_SetConfig+0x9c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d109      	bne.n	8002e0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	019b      	lsls	r3, r3, #6
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	621a      	str	r2, [r3, #32]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40010000 	.word	0x40010000

08002e38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1b      	ldr	r3, [r3, #32]
 8002e48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0201 	bic.w	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f023 030a 	bic.w	r3, r3, #10
 8002e74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	621a      	str	r2, [r3, #32]
}
 8002e8a:	bf00      	nop
 8002e8c:	371c      	adds	r7, #28
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b087      	sub	sp, #28
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	f023 0210 	bic.w	r2, r3, #16
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	031b      	lsls	r3, r3, #12
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	621a      	str	r2, [r3, #32]
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b085      	sub	sp, #20
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f043 0307 	orr.w	r3, r3, #7
 8002f18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	021a      	lsls	r2, r3, #8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	609a      	str	r2, [r3, #8]
}
 8002f60:	bf00      	nop
 8002f62:	371c      	adds	r7, #28
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 031f 	and.w	r3, r3, #31
 8002f7e:	2201      	movs	r2, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	401a      	ands	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 031f 	and.w	r3, r3, #31
 8002f9e:	6879      	ldr	r1, [r7, #4]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	621a      	str	r2, [r3, #32]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b084      	sub	sp, #16
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	6839      	ldr	r1, [r7, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f000 f8df 	bl	800318c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d007      	beq.n	8003000 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003020:	2302      	movs	r3, #2
 8003022:	e050      	b.n	80030c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800304a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4313      	orrs	r3, r2
 8003054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1c      	ldr	r2, [pc, #112]	; (80030d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d018      	beq.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d013      	beq.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a18      	ldr	r2, [pc, #96]	; (80030d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d00e      	beq.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a16      	ldr	r2, [pc, #88]	; (80030dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a15      	ldr	r2, [pc, #84]	; (80030e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a13      	ldr	r2, [pc, #76]	; (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d10c      	bne.n	80030b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40010000 	.word	0x40010000
 80030d8:	40000400 	.word	0x40000400
 80030dc:	40000800 	.word	0x40000800
 80030e0:	40000c00 	.word	0x40000c00
 80030e4:	40014000 	.word	0x40014000

080030e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003100:	2302      	movs	r3, #2
 8003102:	e03d      	b.n	8003180 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4313      	orrs	r3, r2
 8003126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4313      	orrs	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	4313      	orrs	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2204      	movs	r2, #4
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1a      	ldr	r2, [r3, #32]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	43db      	mvns	r3, r3
 80031ae:	401a      	ands	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6a1a      	ldr	r2, [r3, #32]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	fa01 f303 	lsl.w	r3, r1, r3
 80031c4:	431a      	orrs	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	621a      	str	r2, [r3, #32]
}
 80031ca:	bf00      	nop
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e03f      	b.n	8003268 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f001 fd23 	bl	8004c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2224      	movs	r2, #36	; 0x24
 8003206:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003218:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fa9a 	bl	8003754 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800322e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800323e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800324e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	d130      	bne.n	80032ec <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_UART_Transmit_IT+0x26>
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e029      	b.n	80032ee <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_UART_Transmit_IT+0x38>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e022      	b.n	80032ee <HAL_UART_Transmit_IT+0x7e>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2221      	movs	r2, #33	; 0x21
 80032cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032e6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0320 	and.w	r3, r3, #32
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_UART_IRQHandler+0x52>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f982 	bl	8003650 <UART_Receive_IT>
      return;
 800334c:	e0d1      	b.n	80034f2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80b0 	beq.w	80034b6 <HAL_UART_IRQHandler+0x1ba>
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d105      	bne.n	800336c <HAL_UART_IRQHandler+0x70>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80a5 	beq.w	80034b6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00a      	beq.n	800338c <HAL_UART_IRQHandler+0x90>
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	f043 0201 	orr.w	r2, r3, #1
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	f003 0304 	and.w	r3, r3, #4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_UART_IRQHandler+0xb0>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a4:	f043 0202 	orr.w	r2, r3, #2
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <HAL_UART_IRQHandler+0xd0>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c4:	f043 0204 	orr.w	r2, r3, #4
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00f      	beq.n	80033f6 <HAL_UART_IRQHandler+0xfa>
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d104      	bne.n	80033ea <HAL_UART_IRQHandler+0xee>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	f043 0208 	orr.w	r2, r3, #8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d078      	beq.n	80034f0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0320 	and.w	r3, r3, #32
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_UART_IRQHandler+0x11c>
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f91c 	bl	8003650 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b40      	cmp	r3, #64	; 0x40
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d102      	bne.n	8003440 <HAL_UART_IRQHandler+0x144>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d031      	beq.n	80034a4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f865 	bl	8003510 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003450:	2b40      	cmp	r3, #64	; 0x40
 8003452:	d123      	bne.n	800349c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003462:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <HAL_UART_IRQHandler+0x1fc>)
 8003472:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd fa26 	bl	80008ca <HAL_DMA_Abort_IT>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d016      	beq.n	80034b2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800348e:	4610      	mov	r0, r2
 8003490:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003492:	e00e      	b.n	80034b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f831 	bl	80034fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800349a:	e00a      	b.n	80034b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f82d 	bl	80034fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a2:	e006      	b.n	80034b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f829 	bl	80034fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80034b0:	e01e      	b.n	80034f0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b2:	bf00      	nop
    return;
 80034b4:	e01c      	b.n	80034f0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_UART_IRQHandler+0x1d6>
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f852 	bl	8003574 <UART_Transmit_IT>
    return;
 80034d0:	e00f      	b.n	80034f2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_UART_IRQHandler+0x1f6>
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f89a 	bl	8003620 <UART_EndTransmit_IT>
    return;
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80034f0:	bf00      	nop
  }
}
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	0800354d 	.word	0x0800354d

080034fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003526:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff ffc8 	bl	80034fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b21      	cmp	r3, #33	; 0x21
 8003586:	d144      	bne.n	8003612 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003590:	d11a      	bne.n	80035c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	1c9a      	adds	r2, r3, #2
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	621a      	str	r2, [r3, #32]
 80035ba:	e00e      	b.n	80035da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]
 80035c6:	e008      	b.n	80035da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	1c59      	adds	r1, r3, #1
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6211      	str	r1, [r2, #32]
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4619      	mov	r1, r3
 80035e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68da      	ldr	r2, [r3, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003636:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2220      	movs	r2, #32
 800363c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f001 f823 	bl	800468c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b22      	cmp	r3, #34	; 0x22
 8003662:	d171      	bne.n	8003748 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366c:	d123      	bne.n	80036b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10e      	bne.n	800369a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	1c9a      	adds	r2, r3, #2
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
 8003698:	e029      	b.n	80036ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
 80036b4:	e01b      	b.n	80036ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d10a      	bne.n	80036d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6858      	ldr	r0, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	1c59      	adds	r1, r3, #1
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6291      	str	r1, [r2, #40]	; 0x28
 80036ce:	b2c2      	uxtb	r2, r0
 80036d0:	701a      	strb	r2, [r3, #0]
 80036d2:	e00c      	b.n	80036ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	1c58      	adds	r0, r3, #1
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	6288      	str	r0, [r1, #40]	; 0x28
 80036e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	4619      	mov	r1, r3
 80036fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d120      	bne.n	8003744 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0220 	bic.w	r2, r2, #32
 8003710:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003720:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 ffba 	bl	80046b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003740:	2300      	movs	r3, #0
 8003742:	e002      	b.n	800374a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e000      	b.n	800374a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003748:	2302      	movs	r3, #2
  }
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
	...

08003754 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003758:	b085      	sub	sp, #20
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003796:	f023 030c 	bic.w	r3, r3, #12
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	68f9      	ldr	r1, [r7, #12]
 80037a0:	430b      	orrs	r3, r1
 80037a2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69db      	ldr	r3, [r3, #28]
 80037be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c2:	f040 818b 	bne.w	8003adc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4ac1      	ldr	r2, [pc, #772]	; (8003ad0 <UART_SetConfig+0x37c>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d005      	beq.n	80037dc <UART_SetConfig+0x88>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4abf      	ldr	r2, [pc, #764]	; (8003ad4 <UART_SetConfig+0x380>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f040 80bd 	bne.w	8003956 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037dc:	f7fe fac2 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 80037e0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	461d      	mov	r5, r3
 80037e6:	f04f 0600 	mov.w	r6, #0
 80037ea:	46a8      	mov	r8, r5
 80037ec:	46b1      	mov	r9, r6
 80037ee:	eb18 0308 	adds.w	r3, r8, r8
 80037f2:	eb49 0409 	adc.w	r4, r9, r9
 80037f6:	4698      	mov	r8, r3
 80037f8:	46a1      	mov	r9, r4
 80037fa:	eb18 0805 	adds.w	r8, r8, r5
 80037fe:	eb49 0906 	adc.w	r9, r9, r6
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800380e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003812:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003816:	4688      	mov	r8, r1
 8003818:	4691      	mov	r9, r2
 800381a:	eb18 0005 	adds.w	r0, r8, r5
 800381e:	eb49 0106 	adc.w	r1, r9, r6
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	461d      	mov	r5, r3
 8003828:	f04f 0600 	mov.w	r6, #0
 800382c:	196b      	adds	r3, r5, r5
 800382e:	eb46 0406 	adc.w	r4, r6, r6
 8003832:	461a      	mov	r2, r3
 8003834:	4623      	mov	r3, r4
 8003836:	f7fc fd23 	bl	8000280 <__aeabi_uldivmod>
 800383a:	4603      	mov	r3, r0
 800383c:	460c      	mov	r4, r1
 800383e:	461a      	mov	r2, r3
 8003840:	4ba5      	ldr	r3, [pc, #660]	; (8003ad8 <UART_SetConfig+0x384>)
 8003842:	fba3 2302 	umull	r2, r3, r3, r2
 8003846:	095b      	lsrs	r3, r3, #5
 8003848:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	461d      	mov	r5, r3
 8003850:	f04f 0600 	mov.w	r6, #0
 8003854:	46a9      	mov	r9, r5
 8003856:	46b2      	mov	sl, r6
 8003858:	eb19 0309 	adds.w	r3, r9, r9
 800385c:	eb4a 040a 	adc.w	r4, sl, sl
 8003860:	4699      	mov	r9, r3
 8003862:	46a2      	mov	sl, r4
 8003864:	eb19 0905 	adds.w	r9, r9, r5
 8003868:	eb4a 0a06 	adc.w	sl, sl, r6
 800386c:	f04f 0100 	mov.w	r1, #0
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003878:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800387c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003880:	4689      	mov	r9, r1
 8003882:	4692      	mov	sl, r2
 8003884:	eb19 0005 	adds.w	r0, r9, r5
 8003888:	eb4a 0106 	adc.w	r1, sl, r6
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	461d      	mov	r5, r3
 8003892:	f04f 0600 	mov.w	r6, #0
 8003896:	196b      	adds	r3, r5, r5
 8003898:	eb46 0406 	adc.w	r4, r6, r6
 800389c:	461a      	mov	r2, r3
 800389e:	4623      	mov	r3, r4
 80038a0:	f7fc fcee 	bl	8000280 <__aeabi_uldivmod>
 80038a4:	4603      	mov	r3, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	461a      	mov	r2, r3
 80038aa:	4b8b      	ldr	r3, [pc, #556]	; (8003ad8 <UART_SetConfig+0x384>)
 80038ac:	fba3 1302 	umull	r1, r3, r3, r2
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	2164      	movs	r1, #100	; 0x64
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	3332      	adds	r3, #50	; 0x32
 80038be:	4a86      	ldr	r2, [pc, #536]	; (8003ad8 <UART_SetConfig+0x384>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038cc:	4498      	add	r8, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	461d      	mov	r5, r3
 80038d2:	f04f 0600 	mov.w	r6, #0
 80038d6:	46a9      	mov	r9, r5
 80038d8:	46b2      	mov	sl, r6
 80038da:	eb19 0309 	adds.w	r3, r9, r9
 80038de:	eb4a 040a 	adc.w	r4, sl, sl
 80038e2:	4699      	mov	r9, r3
 80038e4:	46a2      	mov	sl, r4
 80038e6:	eb19 0905 	adds.w	r9, r9, r5
 80038ea:	eb4a 0a06 	adc.w	sl, sl, r6
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003902:	4689      	mov	r9, r1
 8003904:	4692      	mov	sl, r2
 8003906:	eb19 0005 	adds.w	r0, r9, r5
 800390a:	eb4a 0106 	adc.w	r1, sl, r6
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	461d      	mov	r5, r3
 8003914:	f04f 0600 	mov.w	r6, #0
 8003918:	196b      	adds	r3, r5, r5
 800391a:	eb46 0406 	adc.w	r4, r6, r6
 800391e:	461a      	mov	r2, r3
 8003920:	4623      	mov	r3, r4
 8003922:	f7fc fcad 	bl	8000280 <__aeabi_uldivmod>
 8003926:	4603      	mov	r3, r0
 8003928:	460c      	mov	r4, r1
 800392a:	461a      	mov	r2, r3
 800392c:	4b6a      	ldr	r3, [pc, #424]	; (8003ad8 <UART_SetConfig+0x384>)
 800392e:	fba3 1302 	umull	r1, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2164      	movs	r1, #100	; 0x64
 8003936:	fb01 f303 	mul.w	r3, r1, r3
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	3332      	adds	r3, #50	; 0x32
 8003940:	4a65      	ldr	r2, [pc, #404]	; (8003ad8 <UART_SetConfig+0x384>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	095b      	lsrs	r3, r3, #5
 8003948:	f003 0207 	and.w	r2, r3, #7
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4442      	add	r2, r8
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	e26f      	b.n	8003e36 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003956:	f7fe f9f1 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 800395a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	461d      	mov	r5, r3
 8003960:	f04f 0600 	mov.w	r6, #0
 8003964:	46a8      	mov	r8, r5
 8003966:	46b1      	mov	r9, r6
 8003968:	eb18 0308 	adds.w	r3, r8, r8
 800396c:	eb49 0409 	adc.w	r4, r9, r9
 8003970:	4698      	mov	r8, r3
 8003972:	46a1      	mov	r9, r4
 8003974:	eb18 0805 	adds.w	r8, r8, r5
 8003978:	eb49 0906 	adc.w	r9, r9, r6
 800397c:	f04f 0100 	mov.w	r1, #0
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003988:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800398c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003990:	4688      	mov	r8, r1
 8003992:	4691      	mov	r9, r2
 8003994:	eb18 0005 	adds.w	r0, r8, r5
 8003998:	eb49 0106 	adc.w	r1, r9, r6
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	461d      	mov	r5, r3
 80039a2:	f04f 0600 	mov.w	r6, #0
 80039a6:	196b      	adds	r3, r5, r5
 80039a8:	eb46 0406 	adc.w	r4, r6, r6
 80039ac:	461a      	mov	r2, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	f7fc fc66 	bl	8000280 <__aeabi_uldivmod>
 80039b4:	4603      	mov	r3, r0
 80039b6:	460c      	mov	r4, r1
 80039b8:	461a      	mov	r2, r3
 80039ba:	4b47      	ldr	r3, [pc, #284]	; (8003ad8 <UART_SetConfig+0x384>)
 80039bc:	fba3 2302 	umull	r2, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	461d      	mov	r5, r3
 80039ca:	f04f 0600 	mov.w	r6, #0
 80039ce:	46a9      	mov	r9, r5
 80039d0:	46b2      	mov	sl, r6
 80039d2:	eb19 0309 	adds.w	r3, r9, r9
 80039d6:	eb4a 040a 	adc.w	r4, sl, sl
 80039da:	4699      	mov	r9, r3
 80039dc:	46a2      	mov	sl, r4
 80039de:	eb19 0905 	adds.w	r9, r9, r5
 80039e2:	eb4a 0a06 	adc.w	sl, sl, r6
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039fa:	4689      	mov	r9, r1
 80039fc:	4692      	mov	sl, r2
 80039fe:	eb19 0005 	adds.w	r0, r9, r5
 8003a02:	eb4a 0106 	adc.w	r1, sl, r6
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	461d      	mov	r5, r3
 8003a0c:	f04f 0600 	mov.w	r6, #0
 8003a10:	196b      	adds	r3, r5, r5
 8003a12:	eb46 0406 	adc.w	r4, r6, r6
 8003a16:	461a      	mov	r2, r3
 8003a18:	4623      	mov	r3, r4
 8003a1a:	f7fc fc31 	bl	8000280 <__aeabi_uldivmod>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	460c      	mov	r4, r1
 8003a22:	461a      	mov	r2, r3
 8003a24:	4b2c      	ldr	r3, [pc, #176]	; (8003ad8 <UART_SetConfig+0x384>)
 8003a26:	fba3 1302 	umull	r1, r3, r3, r2
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	2164      	movs	r1, #100	; 0x64
 8003a2e:	fb01 f303 	mul.w	r3, r1, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	3332      	adds	r3, #50	; 0x32
 8003a38:	4a27      	ldr	r2, [pc, #156]	; (8003ad8 <UART_SetConfig+0x384>)
 8003a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a46:	4498      	add	r8, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	461d      	mov	r5, r3
 8003a4c:	f04f 0600 	mov.w	r6, #0
 8003a50:	46a9      	mov	r9, r5
 8003a52:	46b2      	mov	sl, r6
 8003a54:	eb19 0309 	adds.w	r3, r9, r9
 8003a58:	eb4a 040a 	adc.w	r4, sl, sl
 8003a5c:	4699      	mov	r9, r3
 8003a5e:	46a2      	mov	sl, r4
 8003a60:	eb19 0905 	adds.w	r9, r9, r5
 8003a64:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a68:	f04f 0100 	mov.w	r1, #0
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a7c:	4689      	mov	r9, r1
 8003a7e:	4692      	mov	sl, r2
 8003a80:	eb19 0005 	adds.w	r0, r9, r5
 8003a84:	eb4a 0106 	adc.w	r1, sl, r6
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	461d      	mov	r5, r3
 8003a8e:	f04f 0600 	mov.w	r6, #0
 8003a92:	196b      	adds	r3, r5, r5
 8003a94:	eb46 0406 	adc.w	r4, r6, r6
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	f7fc fbf0 	bl	8000280 <__aeabi_uldivmod>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	460c      	mov	r4, r1
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <UART_SetConfig+0x384>)
 8003aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8003aac:	095b      	lsrs	r3, r3, #5
 8003aae:	2164      	movs	r1, #100	; 0x64
 8003ab0:	fb01 f303 	mul.w	r3, r1, r3
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	3332      	adds	r3, #50	; 0x32
 8003aba:	4a07      	ldr	r2, [pc, #28]	; (8003ad8 <UART_SetConfig+0x384>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	f003 0207 	and.w	r2, r3, #7
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4442      	add	r2, r8
 8003acc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003ace:	e1b2      	b.n	8003e36 <UART_SetConfig+0x6e2>
 8003ad0:	40011000 	.word	0x40011000
 8003ad4:	40011400 	.word	0x40011400
 8003ad8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4ad7      	ldr	r2, [pc, #860]	; (8003e40 <UART_SetConfig+0x6ec>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d005      	beq.n	8003af2 <UART_SetConfig+0x39e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4ad6      	ldr	r2, [pc, #856]	; (8003e44 <UART_SetConfig+0x6f0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	f040 80d1 	bne.w	8003c94 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af2:	f7fe f937 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 8003af6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	469a      	mov	sl, r3
 8003afc:	f04f 0b00 	mov.w	fp, #0
 8003b00:	46d0      	mov	r8, sl
 8003b02:	46d9      	mov	r9, fp
 8003b04:	eb18 0308 	adds.w	r3, r8, r8
 8003b08:	eb49 0409 	adc.w	r4, r9, r9
 8003b0c:	4698      	mov	r8, r3
 8003b0e:	46a1      	mov	r9, r4
 8003b10:	eb18 080a 	adds.w	r8, r8, sl
 8003b14:	eb49 090b 	adc.w	r9, r9, fp
 8003b18:	f04f 0100 	mov.w	r1, #0
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b24:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b28:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b2c:	4688      	mov	r8, r1
 8003b2e:	4691      	mov	r9, r2
 8003b30:	eb1a 0508 	adds.w	r5, sl, r8
 8003b34:	eb4b 0609 	adc.w	r6, fp, r9
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f04f 0200 	mov.w	r2, #0
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	f04f 0400 	mov.w	r4, #0
 8003b4a:	0094      	lsls	r4, r2, #2
 8003b4c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b50:	008b      	lsls	r3, r1, #2
 8003b52:	461a      	mov	r2, r3
 8003b54:	4623      	mov	r3, r4
 8003b56:	4628      	mov	r0, r5
 8003b58:	4631      	mov	r1, r6
 8003b5a:	f7fc fb91 	bl	8000280 <__aeabi_uldivmod>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	460c      	mov	r4, r1
 8003b62:	461a      	mov	r2, r3
 8003b64:	4bb8      	ldr	r3, [pc, #736]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003b66:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	469b      	mov	fp, r3
 8003b74:	f04f 0c00 	mov.w	ip, #0
 8003b78:	46d9      	mov	r9, fp
 8003b7a:	46e2      	mov	sl, ip
 8003b7c:	eb19 0309 	adds.w	r3, r9, r9
 8003b80:	eb4a 040a 	adc.w	r4, sl, sl
 8003b84:	4699      	mov	r9, r3
 8003b86:	46a2      	mov	sl, r4
 8003b88:	eb19 090b 	adds.w	r9, r9, fp
 8003b8c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ba0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ba4:	4689      	mov	r9, r1
 8003ba6:	4692      	mov	sl, r2
 8003ba8:	eb1b 0509 	adds.w	r5, fp, r9
 8003bac:	eb4c 060a 	adc.w	r6, ip, sl
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	f04f 0400 	mov.w	r4, #0
 8003bc2:	0094      	lsls	r4, r2, #2
 8003bc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bc8:	008b      	lsls	r3, r1, #2
 8003bca:	461a      	mov	r2, r3
 8003bcc:	4623      	mov	r3, r4
 8003bce:	4628      	mov	r0, r5
 8003bd0:	4631      	mov	r1, r6
 8003bd2:	f7fc fb55 	bl	8000280 <__aeabi_uldivmod>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4b9a      	ldr	r3, [pc, #616]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003bde:	fba3 1302 	umull	r1, r3, r3, r2
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2164      	movs	r1, #100	; 0x64
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	3332      	adds	r3, #50	; 0x32
 8003bf0:	4a95      	ldr	r2, [pc, #596]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bfc:	4498      	add	r8, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	469b      	mov	fp, r3
 8003c02:	f04f 0c00 	mov.w	ip, #0
 8003c06:	46d9      	mov	r9, fp
 8003c08:	46e2      	mov	sl, ip
 8003c0a:	eb19 0309 	adds.w	r3, r9, r9
 8003c0e:	eb4a 040a 	adc.w	r4, sl, sl
 8003c12:	4699      	mov	r9, r3
 8003c14:	46a2      	mov	sl, r4
 8003c16:	eb19 090b 	adds.w	r9, r9, fp
 8003c1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c32:	4689      	mov	r9, r1
 8003c34:	4692      	mov	sl, r2
 8003c36:	eb1b 0509 	adds.w	r5, fp, r9
 8003c3a:	eb4c 060a 	adc.w	r6, ip, sl
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	4619      	mov	r1, r3
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	f04f 0400 	mov.w	r4, #0
 8003c50:	0094      	lsls	r4, r2, #2
 8003c52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c56:	008b      	lsls	r3, r1, #2
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	4631      	mov	r1, r6
 8003c60:	f7fc fb0e 	bl	8000280 <__aeabi_uldivmod>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4b77      	ldr	r3, [pc, #476]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	2164      	movs	r1, #100	; 0x64
 8003c74:	fb01 f303 	mul.w	r3, r1, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	3332      	adds	r3, #50	; 0x32
 8003c7e:	4a72      	ldr	r2, [pc, #456]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4442      	add	r2, r8
 8003c90:	609a      	str	r2, [r3, #8]
 8003c92:	e0d0      	b.n	8003e36 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c94:	f7fe f852 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8003c98:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	469a      	mov	sl, r3
 8003c9e:	f04f 0b00 	mov.w	fp, #0
 8003ca2:	46d0      	mov	r8, sl
 8003ca4:	46d9      	mov	r9, fp
 8003ca6:	eb18 0308 	adds.w	r3, r8, r8
 8003caa:	eb49 0409 	adc.w	r4, r9, r9
 8003cae:	4698      	mov	r8, r3
 8003cb0:	46a1      	mov	r9, r4
 8003cb2:	eb18 080a 	adds.w	r8, r8, sl
 8003cb6:	eb49 090b 	adc.w	r9, r9, fp
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cc6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cca:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cce:	4688      	mov	r8, r1
 8003cd0:	4691      	mov	r9, r2
 8003cd2:	eb1a 0508 	adds.w	r5, sl, r8
 8003cd6:	eb4b 0609 	adc.w	r6, fp, r9
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	f04f 0400 	mov.w	r4, #0
 8003cec:	0094      	lsls	r4, r2, #2
 8003cee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cf2:	008b      	lsls	r3, r1, #2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	4631      	mov	r1, r6
 8003cfc:	f7fc fac0 	bl	8000280 <__aeabi_uldivmod>
 8003d00:	4603      	mov	r3, r0
 8003d02:	460c      	mov	r4, r1
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b50      	ldr	r3, [pc, #320]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003d08:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	469b      	mov	fp, r3
 8003d16:	f04f 0c00 	mov.w	ip, #0
 8003d1a:	46d9      	mov	r9, fp
 8003d1c:	46e2      	mov	sl, ip
 8003d1e:	eb19 0309 	adds.w	r3, r9, r9
 8003d22:	eb4a 040a 	adc.w	r4, sl, sl
 8003d26:	4699      	mov	r9, r3
 8003d28:	46a2      	mov	sl, r4
 8003d2a:	eb19 090b 	adds.w	r9, r9, fp
 8003d2e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d3e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d42:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d46:	4689      	mov	r9, r1
 8003d48:	4692      	mov	sl, r2
 8003d4a:	eb1b 0509 	adds.w	r5, fp, r9
 8003d4e:	eb4c 060a 	adc.w	r6, ip, sl
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4619      	mov	r1, r3
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	f04f 0400 	mov.w	r4, #0
 8003d64:	0094      	lsls	r4, r2, #2
 8003d66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d6a:	008b      	lsls	r3, r1, #2
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	4623      	mov	r3, r4
 8003d70:	4628      	mov	r0, r5
 8003d72:	4631      	mov	r1, r6
 8003d74:	f7fc fa84 	bl	8000280 <__aeabi_uldivmod>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	460c      	mov	r4, r1
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003d80:	fba3 1302 	umull	r1, r3, r3, r2
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	2164      	movs	r1, #100	; 0x64
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	3332      	adds	r3, #50	; 0x32
 8003d92:	4a2d      	ldr	r2, [pc, #180]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003d94:	fba2 2303 	umull	r2, r3, r2, r3
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d9e:	4498      	add	r8, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	469b      	mov	fp, r3
 8003da4:	f04f 0c00 	mov.w	ip, #0
 8003da8:	46d9      	mov	r9, fp
 8003daa:	46e2      	mov	sl, ip
 8003dac:	eb19 0309 	adds.w	r3, r9, r9
 8003db0:	eb4a 040a 	adc.w	r4, sl, sl
 8003db4:	4699      	mov	r9, r3
 8003db6:	46a2      	mov	sl, r4
 8003db8:	eb19 090b 	adds.w	r9, r9, fp
 8003dbc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dc0:	f04f 0100 	mov.w	r1, #0
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dcc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dd0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003dd4:	4689      	mov	r9, r1
 8003dd6:	4692      	mov	sl, r2
 8003dd8:	eb1b 0509 	adds.w	r5, fp, r9
 8003ddc:	eb4c 060a 	adc.w	r6, ip, sl
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4619      	mov	r1, r3
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	f04f 0400 	mov.w	r4, #0
 8003df2:	0094      	lsls	r4, r2, #2
 8003df4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003df8:	008b      	lsls	r3, r1, #2
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	4628      	mov	r0, r5
 8003e00:	4631      	mov	r1, r6
 8003e02:	f7fc fa3d 	bl	8000280 <__aeabi_uldivmod>
 8003e06:	4603      	mov	r3, r0
 8003e08:	460c      	mov	r4, r1
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4b0e      	ldr	r3, [pc, #56]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2164      	movs	r1, #100	; 0x64
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	3332      	adds	r3, #50	; 0x32
 8003e20:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <UART_SetConfig+0x6f4>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4442      	add	r2, r8
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	e7ff      	b.n	8003e36 <UART_SetConfig+0x6e2>
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e40:	40011000 	.word	0x40011000
 8003e44:	40011400 	.word	0x40011400
 8003e48:	51eb851f 	.word	0x51eb851f

08003e4c <LCD_SendDataToExpander>:

//
//	Send/Read data to/from expander function
//
void LCD_SendDataToExpander(uint8_t *Data)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit(hi2c_lcd, LCD_I2C_ADDRESS, Data, 1, LCD_I2C_TIMEOUT);
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <LCD_SendDataToExpander+0x24>)
 8003e56:	6818      	ldr	r0, [r3, #0]
 8003e58:	230a      	movs	r3, #10
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	214e      	movs	r1, #78	; 0x4e
 8003e62:	f7fd f829 	bl	8000eb8 <HAL_I2C_Master_Transmit>
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200000a4 	.word	0x200000a4

08003e74 <LCD_SetDataPort>:

//
//	Set data port
//
static inline void LCD_SetDataPort(uint8_t Data)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
	ByteToExpander &= ~(0xF0); // Clear Data bits
 8003e7e:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <LCD_SetDataPort+0x88>)
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <LCD_SetDataPort+0x88>)
 8003e8a:	701a      	strb	r2, [r3, #0]

	if(Data & (1<<0))
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	f003 0301 	and.w	r3, r3, #1
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d006      	beq.n	8003ea4 <LCD_SetDataPort+0x30>
		ByteToExpander |= D4_BIT_MASK;
 8003e96:	4b19      	ldr	r3, [pc, #100]	; (8003efc <LCD_SetDataPort+0x88>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f043 0310 	orr.w	r3, r3, #16
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <LCD_SetDataPort+0x88>)
 8003ea2:	701a      	strb	r2, [r3, #0]

	if(Data & (1<<1))
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d006      	beq.n	8003ebc <LCD_SetDataPort+0x48>
		ByteToExpander |= D5_BIT_MASK;
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <LCD_SetDataPort+0x88>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	f043 0320 	orr.w	r3, r3, #32
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	4b10      	ldr	r3, [pc, #64]	; (8003efc <LCD_SetDataPort+0x88>)
 8003eba:	701a      	strb	r2, [r3, #0]

	if(Data & (1<<2))
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d006      	beq.n	8003ed4 <LCD_SetDataPort+0x60>
		ByteToExpander |= D6_BIT_MASK;
 8003ec6:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <LCD_SetDataPort+0x88>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <LCD_SetDataPort+0x88>)
 8003ed2:	701a      	strb	r2, [r3, #0]

	if(Data & (1<<3))
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	f003 0308 	and.w	r3, r3, #8
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d006      	beq.n	8003eec <LCD_SetDataPort+0x78>
		ByteToExpander |= D7_BIT_MASK;
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <LCD_SetDataPort+0x88>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <LCD_SetDataPort+0x88>)
 8003eea:	701a      	strb	r2, [r3, #0]

	LCD_SendDataToExpander(&ByteToExpander);
 8003eec:	4803      	ldr	r0, [pc, #12]	; (8003efc <LCD_SetDataPort+0x88>)
 8003eee:	f7ff ffad 	bl	8003e4c <LCD_SendDataToExpander>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200000a0 	.word	0x200000a0

08003f00 <LCD_SetRS>:
//
//	Control signals
//
static inline void LCD_SetRS(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
	ByteToExpander |= RS_BIT_MASK;
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <LCD_SetRS+0x1c>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <LCD_SetRS+0x1c>)
 8003f10:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8003f12:	4802      	ldr	r0, [pc, #8]	; (8003f1c <LCD_SetRS+0x1c>)
 8003f14:	f7ff ff9a 	bl	8003e4c <LCD_SendDataToExpander>
}
 8003f18:	bf00      	nop
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	200000a0 	.word	0x200000a0

08003f20 <LCD_ClearRS>:

static inline void LCD_ClearRS(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
	ByteToExpander &= ~(RS_BIT_MASK);
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <LCD_ClearRS+0x1c>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f023 0301 	bic.w	r3, r3, #1
 8003f2c:	b2da      	uxtb	r2, r3
 8003f2e:	4b03      	ldr	r3, [pc, #12]	; (8003f3c <LCD_ClearRS+0x1c>)
 8003f30:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8003f32:	4802      	ldr	r0, [pc, #8]	; (8003f3c <LCD_ClearRS+0x1c>)
 8003f34:	f7ff ff8a 	bl	8003e4c <LCD_SendDataToExpander>
}
 8003f38:	bf00      	nop
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	200000a0 	.word	0x200000a0

08003f40 <LCD_SetEN>:

static inline void LCD_SetEN(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
	ByteToExpander |= EN_BIT_MASK;
 8003f44:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <LCD_SetEN+0x1c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	4b03      	ldr	r3, [pc, #12]	; (8003f5c <LCD_SetEN+0x1c>)
 8003f50:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8003f52:	4802      	ldr	r0, [pc, #8]	; (8003f5c <LCD_SetEN+0x1c>)
 8003f54:	f7ff ff7a 	bl	8003e4c <LCD_SendDataToExpander>
}
 8003f58:	bf00      	nop
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	200000a0 	.word	0x200000a0

08003f60 <LCD_ClearEN>:

static inline void LCD_ClearEN(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
	ByteToExpander &= ~(EN_BIT_MASK);
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <LCD_ClearEN+0x1c>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <LCD_ClearEN+0x1c>)
 8003f70:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8003f72:	4802      	ldr	r0, [pc, #8]	; (8003f7c <LCD_ClearEN+0x1c>)
 8003f74:	f7ff ff6a 	bl	8003e4c <LCD_SendDataToExpander>
}
 8003f78:	bf00      	nop
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	200000a0 	.word	0x200000a0

08003f80 <LCD_ClearRW>:
	ByteToExpander |= RW_BIT_MASK;
	LCD_SendDataToExpander(&ByteToExpander);
}

static inline void LCD_ClearRW(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	ByteToExpander &= ~(RW_BIT_MASK);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <LCD_ClearRW+0x1c>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	f023 0302 	bic.w	r3, r3, #2
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <LCD_ClearRW+0x1c>)
 8003f90:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8003f92:	4802      	ldr	r0, [pc, #8]	; (8003f9c <LCD_ClearRW+0x1c>)
 8003f94:	f7ff ff5a 	bl	8003e4c <LCD_SendDataToExpander>
}
 8003f98:	bf00      	nop
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	200000a0 	.word	0x200000a0

08003fa0 <LCD_BacklightOn>:
	ByteToExpander &= ~(BL_BIT_MASK);
	LCD_SendDataToExpander(&ByteToExpander);
}

void LCD_BacklightOn(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
	ByteToExpander |= BL_BIT_MASK;
 8003fa4:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <LCD_BacklightOn+0x1c>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	f043 0308 	orr.w	r3, r3, #8
 8003fac:	b2da      	uxtb	r2, r3
 8003fae:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <LCD_BacklightOn+0x1c>)
 8003fb0:	701a      	strb	r2, [r3, #0]
	LCD_SendDataToExpander(&ByteToExpander);
 8003fb2:	4802      	ldr	r0, [pc, #8]	; (8003fbc <LCD_BacklightOn+0x1c>)
 8003fb4:	f7ff ff4a 	bl	8003e4c <LCD_SendDataToExpander>
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	200000a0 	.word	0x200000a0

08003fc0 <LCD_WriteByte>:

//
//	Write byte to LCD
//
void LCD_WriteByte(uint8_t data)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	71fb      	strb	r3, [r7, #7]

	LCD_SetEN();
 8003fca:	f7ff ffb9 	bl	8003f40 <LCD_SetEN>
	LCD_SetDataPort(data >> 4);
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	091b      	lsrs	r3, r3, #4
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff ff4d 	bl	8003e74 <LCD_SetDataPort>
	LCD_ClearEN();
 8003fda:	f7ff ffc1 	bl	8003f60 <LCD_ClearEN>
	Delay_us(120);
 8003fde:	2078      	movs	r0, #120	; 0x78
 8003fe0:	f000 f928 	bl	8004234 <Delay_us>
	LCD_SetEN();
 8003fe4:	f7ff ffac 	bl	8003f40 <LCD_SetEN>
	LCD_SetDataPort(data);
 8003fe8:	79fb      	ldrb	r3, [r7, #7]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ff42 	bl	8003e74 <LCD_SetDataPort>
	LCD_ClearEN();
 8003ff0:	f7ff ffb6 	bl	8003f60 <LCD_ClearEN>

	Delay_us(120); // Wait for data processing
 8003ff4:	2078      	movs	r0, #120	; 0x78
 8003ff6:	f000 f91d 	bl	8004234 <Delay_us>
}
 8003ffa:	bf00      	nop
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <LCD_WriteCmd>:

//
//	Write command to LCD
//
void LCD_WriteCmd(uint8_t cmd)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	4603      	mov	r3, r0
 800400a:	71fb      	strb	r3, [r7, #7]
	LCD_ClearRS();
 800400c:	f7ff ff88 	bl	8003f20 <LCD_ClearRS>
	LCD_WriteByte(cmd);
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff ffd4 	bl	8003fc0 <LCD_WriteByte>
	Delay_us(1000); //<<--- wait for command processing
 8004018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800401c:	f000 f90a 	bl	8004234 <Delay_us>
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <LCD_WriteData>:

//
//	Write data to LCD
//
void LCD_WriteData(uint8_t data)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	71fb      	strb	r3, [r7, #7]
	LCD_SetRS();
 8004032:	f7ff ff65 	bl	8003f00 <LCD_SetRS>
	LCD_WriteByte(data);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	4618      	mov	r0, r3
 800403a:	f7ff ffc1 	bl	8003fc0 <LCD_WriteByte>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <LCD_Char>:

//
//	Write one character to LCD
//
void LCD_Char(char c)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
 800404c:	4603      	mov	r3, r0
 800404e:	71fb      	strb	r3, [r7, #7]
	LCD_WriteData(((c >= 0x80) && (c <= 0x87)) ? (c & 0x07) : c);
 8004050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004054:	2b00      	cmp	r3, #0
 8004056:	da07      	bge.n	8004068 <LCD_Char+0x22>
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	2b87      	cmp	r3, #135	; 0x87
 800405c:	d804      	bhi.n	8004068 <LCD_Char+0x22>
 800405e:	79fb      	ldrb	r3, [r7, #7]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e000      	b.n	800406a <LCD_Char+0x24>
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff ffdc 	bl	8004028 <LCD_WriteData>
}
 8004070:	bf00      	nop
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <LCD_String>:

//
//	Write string to LCD
//
void LCD_String(char* str)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
	char c;
	while((c = *(str++)))
 8004080:	e003      	b.n	800408a <LCD_String+0x12>
		LCD_Char(c);
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ffde 	bl	8004046 <LCD_Char>
	while((c = *(str++)))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	1c5a      	adds	r2, r3, #1
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	73fb      	strb	r3, [r7, #15]
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f3      	bne.n	8004082 <LCD_String+0xa>
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <LCD_Int>:

//
// Print integer on LCD
//
void LCD_Int(int value)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b088      	sub	sp, #32
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
	char buf[LCD_X+1];
	sprintf(buf, "%d", value);
 80040ac:	f107 0308 	add.w	r3, r7, #8
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4906      	ldr	r1, [pc, #24]	; (80040cc <LCD_Int+0x28>)
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fe73 	bl	8004da0 <siprintf>
	LCD_String(buf);
 80040ba:	f107 0308 	add.w	r3, r7, #8
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ffda 	bl	8004078 <LCD_String>
}
 80040c4:	bf00      	nop
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	080055c4 	.word	0x080055c4

080040d0 <LCD_Locate>:

//
// Set cursor for x-column, y-row
//
void LCD_Locate(uint8_t x, uint8_t y)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	460a      	mov	r2, r1
 80040da:	71fb      	strb	r3, [r7, #7]
 80040dc:	4613      	mov	r3, r2
 80040de:	71bb      	strb	r3, [r7, #6]
	switch(y)
 80040e0:	79bb      	ldrb	r3, [r7, #6]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d816      	bhi.n	8004114 <LCD_Locate+0x44>
 80040e6:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <LCD_Locate+0x1c>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	080040fd 	.word	0x080040fd
 80040f0:	08004103 	.word	0x08004103
 80040f4:	08004109 	.word	0x08004109
 80040f8:	0800410f 	.word	0x0800410f
	{
		case 0:
			y = LCD_LINE1;
 80040fc:	2300      	movs	r3, #0
 80040fe:	71bb      	strb	r3, [r7, #6]
			break;
 8004100:	e008      	b.n	8004114 <LCD_Locate+0x44>
#if (LCD_Y>1)
		case 1:
			y = LCD_LINE2;
 8004102:	2340      	movs	r3, #64	; 0x40
 8004104:	71bb      	strb	r3, [r7, #6]
			break;
 8004106:	e005      	b.n	8004114 <LCD_Locate+0x44>
#endif
#if (LCD_Y>2)
		case 2:
			y = LCD_LINE3;
 8004108:	2310      	movs	r3, #16
 800410a:	71bb      	strb	r3, [r7, #6]
			break;
 800410c:	e002      	b.n	8004114 <LCD_Locate+0x44>
#endif
#if (LCD_Y>3)
		case 3:
			y = LCD_LINE4;
 800410e:	2350      	movs	r3, #80	; 0x50
 8004110:	71bb      	strb	r3, [r7, #6]
			break;
 8004112:	bf00      	nop
#endif
	}

	LCD_WriteCmd((0x80 + y + x));
 8004114:	79ba      	ldrb	r2, [r7, #6]
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	4413      	add	r3, r2
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3b80      	subs	r3, #128	; 0x80
 800411e:	b2db      	uxtb	r3, r3
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff ff6e 	bl	8004002 <LCD_WriteCmd>
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop

08004130 <LCD_Cls>:

//
//	Clear LCD
//
void LCD_Cls(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
	LCD_WriteCmd(LCDC_CLS);
 8004134:	2001      	movs	r0, #1
 8004136:	f7ff ff64 	bl	8004002 <LCD_WriteCmd>
}
 800413a:	bf00      	nop
 800413c:	bd80      	pop	{r7, pc}
	...

08004140 <LCD_Init>:

//
//	Initialization
//
void LCD_Init(I2C_HandleTypeDef *hi2c)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	hi2c_lcd = hi2c;
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <LCD_Init+0x70>)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6013      	str	r3, [r2, #0]

	LCD_BacklightOn();
 800414e:	f7ff ff27 	bl	8003fa0 <LCD_BacklightOn>
	LCD_ClearRS();
 8004152:	f7ff fee5 	bl	8003f20 <LCD_ClearRS>
	LCD_ClearEN();
 8004156:	f7ff ff03 	bl	8003f60 <LCD_ClearEN>
	LCD_ClearRW();
 800415a:	f7ff ff11 	bl	8003f80 <LCD_ClearRW>

	Delay_us(15);
 800415e:	200f      	movs	r0, #15
 8004160:	f000 f868 	bl	8004234 <Delay_us>

	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 8004164:	2030      	movs	r0, #48	; 0x30
 8004166:	f7ff fe85 	bl	8003e74 <LCD_SetDataPort>
	Delay_us(4100);
 800416a:	f241 0004 	movw	r0, #4100	; 0x1004
 800416e:	f000 f861 	bl	8004234 <Delay_us>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC8B);
 8004172:	2030      	movs	r0, #48	; 0x30
 8004174:	f7ff fe7e 	bl	8003e74 <LCD_SetDataPort>
	Delay_us(100);
 8004178:	2064      	movs	r0, #100	; 0x64
 800417a:	f000 f85b 	bl	8004234 <Delay_us>
	LCD_SetDataPort(LCDC_FUNC|LCDC_FUNC4B); //4-byte mode
 800417e:	2020      	movs	r0, #32
 8004180:	f7ff fe78 	bl	8003e74 <LCD_SetDataPort>
	Delay_us(100);
 8004184:	2064      	movs	r0, #100	; 0x64
 8004186:	f000 f855 	bl	8004234 <Delay_us>
	LCD_WriteCmd(LCDC_FUNC|LCDC_FUNC4B|LCDC_FUNC2L|LCDC_FUNC5x7); // 4-bit, 2 lanes, 5x7 chars
 800418a:	2028      	movs	r0, #40	; 0x28
 800418c:	f7ff ff39 	bl	8004002 <LCD_WriteCmd>

	LCD_WriteCmd(LCDC_ONOFF|LCDC_CURSOROFF); // Cursor off
 8004190:	2008      	movs	r0, #8
 8004192:	f7ff ff36 	bl	8004002 <LCD_WriteCmd>
	LCD_WriteCmd(LCDC_ONOFF|LCDC_DISPLAYON); // LCD on
 8004196:	200c      	movs	r0, #12
 8004198:	f7ff ff33 	bl	8004002 <LCD_WriteCmd>
	LCD_WriteCmd(LCDC_ENTRY|LCDC_ENTRYR); // Data entry right
 800419c:	2006      	movs	r0, #6
 800419e:	f7ff ff30 	bl	8004002 <LCD_WriteCmd>

	LCD_Cls(); // Clear display
 80041a2:	f7ff ffc5 	bl	8004130 <LCD_Cls>
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	200000a4 	.word	0x200000a4

080041b4 <Servo_Init>:
#include "stdio.h"
#include "tim.h"

#include "MotorControl.h"

void Servo_Init(TIM_HandleTypeDef *htim, uint32_t channel){
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start(htim, channel);
 80041be:	6839      	ldr	r1, [r7, #0]
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f7fe fa7d 	bl	80026c0 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(htim, channel);
 80041c6:	6839      	ldr	r1, [r7, #0]
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f7fe fef4 	bl	8002fb6 <HAL_TIMEx_PWMN_Start>
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <Servo_Angle>:

void Servo_Angle(int8_t angle){
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	71fb      	strb	r3, [r7, #7]
	uint16_t value;

	value = (float)(angle + 90) / 180 * Servo_MAXus + Servo_MINus;
 80041e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e6:	335a      	adds	r3, #90	; 0x5a
 80041e8:	ee07 3a90 	vmov	s15, r3
 80041ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041f0:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8004224 <Servo_Angle+0x4c>
 80041f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041f8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004228 <Servo_Angle+0x50>
 80041fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004200:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800422c <Servo_Angle+0x54>
 8004204:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800420c:	ee17 3a90 	vmov	r3, s15
 8004210:	81fb      	strh	r3, [r7, #14]
	TIM1->CCR1 = value;
 8004212:	4a07      	ldr	r2, [pc, #28]	; (8004230 <Servo_Angle+0x58>)
 8004214:	89fb      	ldrh	r3, [r7, #14]
 8004216:	6353      	str	r3, [r2, #52]	; 0x34
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	43340000 	.word	0x43340000
 8004228:	44eb0000 	.word	0x44eb0000
 800422c:	44020000 	.word	0x44020000
 8004230:	40010000 	.word	0x40010000

08004234 <Delay_us>:
#include "tim.h"

#include "delays.h"

void Delay_us(uint16_t us)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	80fb      	strh	r3, [r7, #6]
	DELAY_US_TIMER.Instance->CNT = 0;
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <Delay_us+0x2c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	625a      	str	r2, [r3, #36]	; 0x24
	while(DELAY_US_TIMER.Instance->CNT <= us);
 8004246:	bf00      	nop
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <Delay_us+0x2c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	429a      	cmp	r2, r3
 8004252:	d9f9      	bls.n	8004248 <Delay_us+0x14>
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	20000128 	.word	0x20000128

08004264 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800426a:	f107 0314 	add.w	r3, r7, #20
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	60da      	str	r2, [r3, #12]
 8004278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	4b35      	ldr	r3, [pc, #212]	; (8004354 <MX_GPIO_Init+0xf0>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a34      	ldr	r2, [pc, #208]	; (8004354 <MX_GPIO_Init+0xf0>)
 8004284:	f043 0304 	orr.w	r3, r3, #4
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b32      	ldr	r3, [pc, #200]	; (8004354 <MX_GPIO_Init+0xf0>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	4b2e      	ldr	r3, [pc, #184]	; (8004354 <MX_GPIO_Init+0xf0>)
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <MX_GPIO_Init+0xf0>)
 80042a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a4:	6313      	str	r3, [r2, #48]	; 0x30
 80042a6:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <MX_GPIO_Init+0xf0>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	4b27      	ldr	r3, [pc, #156]	; (8004354 <MX_GPIO_Init+0xf0>)
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	4a26      	ldr	r2, [pc, #152]	; (8004354 <MX_GPIO_Init+0xf0>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	6313      	str	r3, [r2, #48]	; 0x30
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <MX_GPIO_Init+0xf0>)
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	607b      	str	r3, [r7, #4]
 80042d2:	4b20      	ldr	r3, [pc, #128]	; (8004354 <MX_GPIO_Init+0xf0>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a1f      	ldr	r2, [pc, #124]	; (8004354 <MX_GPIO_Init+0xf0>)
 80042d8:	f043 0302 	orr.w	r3, r3, #2
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b1d      	ldr	r3, [pc, #116]	; (8004354 <MX_GPIO_Init+0xf0>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80042ea:	2200      	movs	r2, #0
 80042ec:	2120      	movs	r1, #32
 80042ee:	481a      	ldr	r0, [pc, #104]	; (8004358 <MX_GPIO_Init+0xf4>)
 80042f0:	f7fc fc90 	bl	8000c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80042f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042fa:	4b18      	ldr	r3, [pc, #96]	; (800435c <MX_GPIO_Init+0xf8>)
 80042fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004302:	f107 0314 	add.w	r3, r7, #20
 8004306:	4619      	mov	r1, r3
 8004308:	4815      	ldr	r0, [pc, #84]	; (8004360 <MX_GPIO_Init+0xfc>)
 800430a:	f7fc fb01 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800430e:	230c      	movs	r3, #12
 8004310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004312:	2302      	movs	r3, #2
 8004314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800431a:	2303      	movs	r3, #3
 800431c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800431e:	2307      	movs	r3, #7
 8004320:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004322:	f107 0314 	add.w	r3, r7, #20
 8004326:	4619      	mov	r1, r3
 8004328:	480b      	ldr	r0, [pc, #44]	; (8004358 <MX_GPIO_Init+0xf4>)
 800432a:	f7fc faf1 	bl	8000910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800432e:	2320      	movs	r3, #32
 8004330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004332:	2301      	movs	r3, #1
 8004334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004336:	2300      	movs	r3, #0
 8004338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800433a:	2300      	movs	r3, #0
 800433c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	4619      	mov	r1, r3
 8004344:	4804      	ldr	r0, [pc, #16]	; (8004358 <MX_GPIO_Init+0xf4>)
 8004346:	f7fc fae3 	bl	8000910 <HAL_GPIO_Init>

}
 800434a:	bf00      	nop
 800434c:	3728      	adds	r7, #40	; 0x28
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	40020000 	.word	0x40020000
 800435c:	10110000 	.word	0x10110000
 8004360:	40020800 	.word	0x40020800

08004364 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8004368:	4b12      	ldr	r3, [pc, #72]	; (80043b4 <MX_I2C1_Init+0x50>)
 800436a:	4a13      	ldr	r2, [pc, #76]	; (80043b8 <MX_I2C1_Init+0x54>)
 800436c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800436e:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <MX_I2C1_Init+0x50>)
 8004370:	4a12      	ldr	r2, [pc, #72]	; (80043bc <MX_I2C1_Init+0x58>)
 8004372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004374:	4b0f      	ldr	r3, [pc, #60]	; (80043b4 <MX_I2C1_Init+0x50>)
 8004376:	2200      	movs	r2, #0
 8004378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800437a:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <MX_I2C1_Init+0x50>)
 800437c:	2200      	movs	r2, #0
 800437e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <MX_I2C1_Init+0x50>)
 8004382:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <MX_I2C1_Init+0x50>)
 800438a:	2200      	movs	r2, #0
 800438c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <MX_I2C1_Init+0x50>)
 8004390:	2200      	movs	r2, #0
 8004392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004394:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <MX_I2C1_Init+0x50>)
 8004396:	2200      	movs	r2, #0
 8004398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <MX_I2C1_Init+0x50>)
 800439c:	2200      	movs	r2, #0
 800439e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80043a0:	4804      	ldr	r0, [pc, #16]	; (80043b4 <MX_I2C1_Init+0x50>)
 80043a2:	f7fc fc51 	bl	8000c48 <HAL_I2C_Init>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80043ac:	f000 f998 	bl	80046e0 <Error_Handler>
  }

}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	200000a8 	.word	0x200000a8
 80043b8:	40005400 	.word	0x40005400
 80043bc:	000186a0 	.word	0x000186a0

080043c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	; 0x28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	60da      	str	r2, [r3, #12]
 80043d6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a19      	ldr	r2, [pc, #100]	; (8004444 <HAL_I2C_MspInit+0x84>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d12b      	bne.n	800443a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <HAL_I2C_MspInit+0x88>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <HAL_I2C_MspInit+0x88>)
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	6313      	str	r3, [r2, #48]	; 0x30
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <HAL_I2C_MspInit+0x88>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043fe:	23c0      	movs	r3, #192	; 0xc0
 8004400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004402:	2312      	movs	r3, #18
 8004404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004406:	2301      	movs	r3, #1
 8004408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800440a:	2303      	movs	r3, #3
 800440c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800440e:	2304      	movs	r3, #4
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	4619      	mov	r1, r3
 8004418:	480c      	ldr	r0, [pc, #48]	; (800444c <HAL_I2C_MspInit+0x8c>)
 800441a:	f7fc fa79 	bl	8000910 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	4b09      	ldr	r3, [pc, #36]	; (8004448 <HAL_I2C_MspInit+0x88>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a08      	ldr	r2, [pc, #32]	; (8004448 <HAL_I2C_MspInit+0x88>)
 8004428:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_I2C_MspInit+0x88>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004436:	60fb      	str	r3, [r7, #12]
 8004438:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800443a:	bf00      	nop
 800443c:	3728      	adds	r7, #40	; 0x28
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40005400 	.word	0x40005400
 8004448:	40023800 	.word	0x40023800
 800444c:	40020400 	.word	0x40020400

08004450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004456:	f7fc f893 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800445a:	f000 f893 	bl	8004584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800445e:	f7ff ff01 	bl	8004264 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8004462:	f000 fbc7 	bl	8004bf4 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8004466:	f000 f943 	bl	80046f0 <MX_RTC_Init>
  MX_I2C1_Init();
 800446a:	f7ff ff7b 	bl	8004364 <MX_I2C1_Init>
  MX_TIM3_Init();
 800446e:	f000 faf5 	bl	8004a5c <MX_TIM3_Init>
  MX_TIM1_Init();
 8004472:	f000 fa6f 	bl	8004954 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8004476:	483d      	ldr	r0, [pc, #244]	; (800456c <main+0x11c>)
 8004478:	f7fe f8d3 	bl	8002622 <HAL_TIM_Base_Start>
  HAL_Delay(1000);
 800447c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004480:	f7fc f8f0 	bl	8000664 <HAL_Delay>
  LCD_Init(&hi2c1);
 8004484:	483a      	ldr	r0, [pc, #232]	; (8004570 <main+0x120>)
 8004486:	f7ff fe5b 	bl	8004140 <LCD_Init>
//  HAL_UART_Transmit(&huart6, txBuffer, txLen, 0xFFFF);
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800448a:	2047      	movs	r0, #71	; 0x47
 800448c:	f7fc fa03 	bl	8000896 <HAL_NVIC_EnableIRQ>
  sDate.Year = 20;
 8004490:	2314      	movs	r3, #20
 8004492:	70fb      	strb	r3, [r7, #3]
  sDate.Month = 3;
 8004494:	2303      	movs	r3, #3
 8004496:	707b      	strb	r3, [r7, #1]
  sDate.Date = 11;
 8004498:	230b      	movs	r3, #11
 800449a:	70bb      	strb	r3, [r7, #2]

  sTime.Hours = 19;
 800449c:	2313      	movs	r3, #19
 800449e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 38;
 80044a0:	2326      	movs	r3, #38	; 0x26
 80044a2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80044a4:	2300      	movs	r3, #0
 80044a6:	71bb      	strb	r3, [r7, #6]

  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80044a8:	1d3b      	adds	r3, r7, #4
 80044aa:	2200      	movs	r2, #0
 80044ac:	4619      	mov	r1, r3
 80044ae:	4831      	ldr	r0, [pc, #196]	; (8004574 <main+0x124>)
 80044b0:	f7fd fdeb 	bl	800208a <HAL_RTC_SetTime>
  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80044b4:	463b      	mov	r3, r7
 80044b6:	2200      	movs	r2, #0
 80044b8:	4619      	mov	r1, r3
 80044ba:	482e      	ldr	r0, [pc, #184]	; (8004574 <main+0x124>)
 80044bc:	f7fd ff00 	bl	80022c0 <HAL_RTC_SetDate>
#if (Project_Motor_Spec	== Servo_DC)
  Servo_Init(&htim1, TIM_CHANNEL_1);
 80044c0:	2100      	movs	r1, #0
 80044c2:	482d      	ldr	r0, [pc, #180]	; (8004578 <main+0x128>)
 80044c4:	f7ff fe76 	bl	80041b4 <Servo_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80044c8:	1d3b      	adds	r3, r7, #4
 80044ca:	2200      	movs	r2, #0
 80044cc:	4619      	mov	r1, r3
 80044ce:	4829      	ldr	r0, [pc, #164]	; (8004574 <main+0x124>)
 80044d0:	f7fd fe98 	bl	8002204 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80044d4:	463b      	mov	r3, r7
 80044d6:	2200      	movs	r2, #0
 80044d8:	4619      	mov	r1, r3
 80044da:	4826      	ldr	r0, [pc, #152]	; (8004574 <main+0x124>)
 80044dc:	f7fd ff97 	bl	800240e <HAL_RTC_GetDate>

	  LCD_Cls();
 80044e0:	f7ff fe26 	bl	8004130 <LCD_Cls>
	  LCD_Locate(0,0);
 80044e4:	2100      	movs	r1, #0
 80044e6:	2000      	movs	r0, #0
 80044e8:	f7ff fdf2 	bl	80040d0 <LCD_Locate>
	  LCD_Int(sDate.Year);
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fdd8 	bl	80040a4 <LCD_Int>
	  LCD_String(".");
 80044f4:	4821      	ldr	r0, [pc, #132]	; (800457c <main+0x12c>)
 80044f6:	f7ff fdbf 	bl	8004078 <LCD_String>
	  LCD_Int(sDate.Month);
 80044fa:	787b      	ldrb	r3, [r7, #1]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7ff fdd1 	bl	80040a4 <LCD_Int>
	  LCD_String(".");
 8004502:	481e      	ldr	r0, [pc, #120]	; (800457c <main+0x12c>)
 8004504:	f7ff fdb8 	bl	8004078 <LCD_String>
	  LCD_Int(sDate.Date);
 8004508:	78bb      	ldrb	r3, [r7, #2]
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff fdca 	bl	80040a4 <LCD_Int>

	  LCD_Locate(0,1);
 8004510:	2101      	movs	r1, #1
 8004512:	2000      	movs	r0, #0
 8004514:	f7ff fddc 	bl	80040d0 <LCD_Locate>
	  LCD_Int(sTime.Hours);
 8004518:	793b      	ldrb	r3, [r7, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fdc2 	bl	80040a4 <LCD_Int>
	  LCD_String(":");
 8004520:	4817      	ldr	r0, [pc, #92]	; (8004580 <main+0x130>)
 8004522:	f7ff fda9 	bl	8004078 <LCD_String>
	  LCD_Int(sTime.Minutes);
 8004526:	797b      	ldrb	r3, [r7, #5]
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff fdbb 	bl	80040a4 <LCD_Int>
	  LCD_String(":");
 800452e:	4814      	ldr	r0, [pc, #80]	; (8004580 <main+0x130>)
 8004530:	f7ff fda2 	bl	8004078 <LCD_String>
	  LCD_Int(sTime.Seconds);
 8004534:	79bb      	ldrb	r3, [r7, #6]
 8004536:	4618      	mov	r0, r3
 8004538:	f7ff fdb4 	bl	80040a4 <LCD_Int>

	  Servo_Angle(-90);
 800453c:	f06f 0059 	mvn.w	r0, #89	; 0x59
 8004540:	f7ff fe4a 	bl	80041d8 <Servo_Angle>
	  HAL_Delay(1000);
 8004544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004548:	f7fc f88c 	bl	8000664 <HAL_Delay>
	  Servo_Angle(0);
 800454c:	2000      	movs	r0, #0
 800454e:	f7ff fe43 	bl	80041d8 <Servo_Angle>
	  HAL_Delay(1000);
 8004552:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004556:	f7fc f885 	bl	8000664 <HAL_Delay>
	  Servo_Angle(90);
 800455a:	205a      	movs	r0, #90	; 0x5a
 800455c:	f7ff fe3c 	bl	80041d8 <Servo_Angle>
	  HAL_Delay(1000);
 8004560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004564:	f7fc f87e 	bl	8000664 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8004568:	e7ae      	b.n	80044c8 <main+0x78>
 800456a:	bf00      	nop
 800456c:	20000128 	.word	0x20000128
 8004570:	200000a8 	.word	0x200000a8
 8004574:	20000108 	.word	0x20000108
 8004578:	20000168 	.word	0x20000168
 800457c:	080055d0 	.word	0x080055d0
 8004580:	080055d4 	.word	0x080055d4

08004584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b098      	sub	sp, #96	; 0x60
 8004588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800458a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800458e:	2230      	movs	r2, #48	; 0x30
 8004590:	2100      	movs	r1, #0
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fbfc 	bl	8004d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004598:	f107 031c 	add.w	r3, r7, #28
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045a8:	f107 0308 	add.w	r3, r7, #8
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
 80045b0:	605a      	str	r2, [r3, #4]
 80045b2:	609a      	str	r2, [r3, #8]
 80045b4:	60da      	str	r2, [r3, #12]
 80045b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80045b8:	2300      	movs	r3, #0
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	4b31      	ldr	r3, [pc, #196]	; (8004684 <SystemClock_Config+0x100>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	4a30      	ldr	r2, [pc, #192]	; (8004684 <SystemClock_Config+0x100>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6413      	str	r3, [r2, #64]	; 0x40
 80045c8:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <SystemClock_Config+0x100>)
 80045ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80045d4:	2300      	movs	r3, #0
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4b2b      	ldr	r3, [pc, #172]	; (8004688 <SystemClock_Config+0x104>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80045e0:	4a29      	ldr	r2, [pc, #164]	; (8004688 <SystemClock_Config+0x104>)
 80045e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	4b27      	ldr	r3, [pc, #156]	; (8004688 <SystemClock_Config+0x104>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045f0:	603b      	str	r3, [r7, #0]
 80045f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80045f4:	230a      	movs	r3, #10
 80045f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045f8:	2301      	movs	r3, #1
 80045fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80045fc:	2310      	movs	r3, #16
 80045fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004600:	2301      	movs	r3, #1
 8004602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004604:	2302      	movs	r3, #2
 8004606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004608:	2300      	movs	r3, #0
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800460c:	2310      	movs	r3, #16
 800460e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004610:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004614:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004616:	2304      	movs	r3, #4
 8004618:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800461a:	2307      	movs	r3, #7
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800461e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004622:	4618      	mov	r0, r3
 8004624:	f7fc ff50 	bl	80014c8 <HAL_RCC_OscConfig>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800462e:	f000 f857 	bl	80046e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004632:	230f      	movs	r3, #15
 8004634:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004636:	2302      	movs	r3, #2
 8004638:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800463e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004644:	2300      	movs	r3, #0
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004648:	f107 031c 	add.w	r3, r7, #28
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd f9aa 	bl	80019a8 <HAL_RCC_ClockConfig>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d001      	beq.n	800465e <SystemClock_Config+0xda>
  {
    Error_Handler();
 800465a:	f000 f841 	bl	80046e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800465e:	2302      	movs	r3, #2
 8004660:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004662:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004666:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004668:	f107 0308 	add.w	r3, r7, #8
 800466c:	4618      	mov	r0, r3
 800466e:	f7fd fb8d 	bl	8001d8c <HAL_RCCEx_PeriphCLKConfig>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <SystemClock_Config+0xf8>
  {
    Error_Handler();
 8004678:	f000 f832 	bl	80046e0 <Error_Handler>
  }
}
 800467c:	bf00      	nop
 800467e:	3760      	adds	r7, #96	; 0x60
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40023800 	.word	0x40023800
 8004688:	40007000 	.word	0x40007000

0800468c <HAL_UART_TxCpltCallback>:
/* USER CODE BEGIN 4 */
void UART6_IRQHandler(void){
	HAL_UART_IRQHandler(&huart6);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
	sndFlag = 1;
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <HAL_UART_TxCpltCallback+0x20>)
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
	txLen = sizeof(txBuffer) - 1;
 800469a:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <HAL_UART_TxCpltCallback+0x24>)
 800469c:	2226      	movs	r2, #38	; 0x26
 800469e:	801a      	strh	r2, [r3, #0]
//	HAL_UART_Transmit(&huart6, txBuffer, txLen, 0xFFFF);
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	2000008f 	.word	0x2000008f
 80046b0:	2000008c 	.word	0x2000008c

080046b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	rcvFlag = 1;
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <HAL_UART_RxCpltCallback+0x20>)
 80046be:	2201      	movs	r2, #1
 80046c0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart6, rxBuffer, 1);
 80046c2:	2201      	movs	r2, #1
 80046c4:	4904      	ldr	r1, [pc, #16]	; (80046d8 <HAL_UART_RxCpltCallback+0x24>)
 80046c6:	4805      	ldr	r0, [pc, #20]	; (80046dc <HAL_UART_RxCpltCallback+0x28>)
 80046c8:	f7fe fdd2 	bl	8003270 <HAL_UART_Transmit_IT>
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	2000008e 	.word	0x2000008e
 80046d8:	200000fc 	.word	0x200000fc
 80046dc:	200001a8 	.word	0x200001a8

080046e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80046e4:	bf00      	nop
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef sTime = {0};
 80046f6:	1d3b      	adds	r3, r7, #4
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	605a      	str	r2, [r3, #4]
 80046fe:	609a      	str	r2, [r3, #8]
 8004700:	60da      	str	r2, [r3, #12]
 8004702:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004704:	2300      	movs	r3, #0
 8004706:	603b      	str	r3, [r7, #0]

  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <MX_RTC_Init+0xac>)
 800470a:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <MX_RTC_Init+0xb0>)
 800470c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800470e:	4b23      	ldr	r3, [pc, #140]	; (800479c <MX_RTC_Init+0xac>)
 8004710:	2200      	movs	r2, #0
 8004712:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <MX_RTC_Init+0xac>)
 8004716:	221f      	movs	r2, #31
 8004718:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1500;
 800471a:	4b20      	ldr	r3, [pc, #128]	; (800479c <MX_RTC_Init+0xac>)
 800471c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004720:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004722:	4b1e      	ldr	r3, [pc, #120]	; (800479c <MX_RTC_Init+0xac>)
 8004724:	2200      	movs	r2, #0
 8004726:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004728:	4b1c      	ldr	r3, [pc, #112]	; (800479c <MX_RTC_Init+0xac>)
 800472a:	2200      	movs	r2, #0
 800472c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800472e:	4b1b      	ldr	r3, [pc, #108]	; (800479c <MX_RTC_Init+0xac>)
 8004730:	2200      	movs	r2, #0
 8004732:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004734:	4819      	ldr	r0, [pc, #100]	; (800479c <MX_RTC_Init+0xac>)
 8004736:	f7fd fc17 	bl	8001f68 <HAL_RTC_Init>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8004740:	f7ff ffce 	bl	80046e0 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004758:	1d3b      	adds	r3, r7, #4
 800475a:	2200      	movs	r2, #0
 800475c:	4619      	mov	r1, r3
 800475e:	480f      	ldr	r0, [pc, #60]	; (800479c <MX_RTC_Init+0xac>)
 8004760:	f7fd fc93 	bl	800208a <HAL_RTC_SetTime>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 800476a:	f7ff ffb9 	bl	80046e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800476e:	2301      	movs	r3, #1
 8004770:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004772:	2301      	movs	r3, #1
 8004774:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800477e:	463b      	mov	r3, r7
 8004780:	2200      	movs	r2, #0
 8004782:	4619      	mov	r1, r3
 8004784:	4805      	ldr	r0, [pc, #20]	; (800479c <MX_RTC_Init+0xac>)
 8004786:	f7fd fd9b 	bl	80022c0 <HAL_RTC_SetDate>
 800478a:	4603      	mov	r3, r0
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8004790:	f7ff ffa6 	bl	80046e0 <Error_Handler>
  }

}
 8004794:	bf00      	nop
 8004796:	3718      	adds	r7, #24
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000108 	.word	0x20000108
 80047a0:	40002800 	.word	0x40002800

080047a4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <HAL_RTC_MspInit+0x24>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d102      	bne.n	80047bc <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047b6:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_RTC_MspInit+0x28>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr
 80047c8:	40002800 	.word	0x40002800
 80047cc:	42470e3c 	.word	0x42470e3c

080047d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	4b10      	ldr	r3, [pc, #64]	; (800481c <HAL_MspInit+0x4c>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	4a0f      	ldr	r2, [pc, #60]	; (800481c <HAL_MspInit+0x4c>)
 80047e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e4:	6453      	str	r3, [r2, #68]	; 0x44
 80047e6:	4b0d      	ldr	r3, [pc, #52]	; (800481c <HAL_MspInit+0x4c>)
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ee:	607b      	str	r3, [r7, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	2300      	movs	r3, #0
 80047f4:	603b      	str	r3, [r7, #0]
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <HAL_MspInit+0x4c>)
 80047f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fa:	4a08      	ldr	r2, [pc, #32]	; (800481c <HAL_MspInit+0x4c>)
 80047fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004800:	6413      	str	r3, [r2, #64]	; 0x40
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_MspInit+0x4c>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800

08004820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004832:	e7fe      	b.n	8004832 <HardFault_Handler+0x4>

08004834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004838:	e7fe      	b.n	8004838 <MemManage_Handler+0x4>

0800483a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800483a:	b480      	push	{r7}
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800483e:	e7fe      	b.n	800483e <BusFault_Handler+0x4>

08004840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004844:	e7fe      	b.n	8004844 <UsageFault_Handler+0x4>

08004846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004846:	b480      	push	{r7}
 8004848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004862:	b480      	push	{r7}
 8004864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004866:	bf00      	nop
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004874:	f7fb fed6 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004878:	bf00      	nop
 800487a:	bd80      	pop	{r7, pc}

0800487c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004880:	4802      	ldr	r0, [pc, #8]	; (800488c <USART6_IRQHandler+0x10>)
 8004882:	f7fe fd3b 	bl	80032fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004886:	bf00      	nop
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	200001a8 	.word	0x200001a8

08004890 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <_sbrk+0x50>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <_sbrk+0x16>
		heap_end = &end;
 80048a0:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <_sbrk+0x50>)
 80048a2:	4a10      	ldr	r2, [pc, #64]	; (80048e4 <_sbrk+0x54>)
 80048a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80048a6:	4b0e      	ldr	r3, [pc, #56]	; (80048e0 <_sbrk+0x50>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <_sbrk+0x50>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4413      	add	r3, r2
 80048b4:	466a      	mov	r2, sp
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d907      	bls.n	80048ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80048ba:	f000 fa3f 	bl	8004d3c <__errno>
 80048be:	4602      	mov	r2, r0
 80048c0:	230c      	movs	r3, #12
 80048c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80048c4:	f04f 33ff 	mov.w	r3, #4294967295
 80048c8:	e006      	b.n	80048d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <_sbrk+0x50>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	4a03      	ldr	r2, [pc, #12]	; (80048e0 <_sbrk+0x50>)
 80048d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000090 	.word	0x20000090
 80048e4:	200001f0 	.word	0x200001f0

080048e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048ec:	4b16      	ldr	r3, [pc, #88]	; (8004948 <SystemInit+0x60>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	4a15      	ldr	r2, [pc, #84]	; (8004948 <SystemInit+0x60>)
 80048f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80048f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80048fc:	4b13      	ldr	r3, [pc, #76]	; (800494c <SystemInit+0x64>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a12      	ldr	r2, [pc, #72]	; (800494c <SystemInit+0x64>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004908:	4b10      	ldr	r3, [pc, #64]	; (800494c <SystemInit+0x64>)
 800490a:	2200      	movs	r2, #0
 800490c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <SystemInit+0x64>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a0e      	ldr	r2, [pc, #56]	; (800494c <SystemInit+0x64>)
 8004914:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800491c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <SystemInit+0x64>)
 8004920:	4a0b      	ldr	r2, [pc, #44]	; (8004950 <SystemInit+0x68>)
 8004922:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004924:	4b09      	ldr	r3, [pc, #36]	; (800494c <SystemInit+0x64>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a08      	ldr	r2, [pc, #32]	; (800494c <SystemInit+0x64>)
 800492a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800492e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004930:	4b06      	ldr	r3, [pc, #24]	; (800494c <SystemInit+0x64>)
 8004932:	2200      	movs	r2, #0
 8004934:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004936:	4b04      	ldr	r3, [pc, #16]	; (8004948 <SystemInit+0x60>)
 8004938:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800493c:	609a      	str	r2, [r3, #8]
#endif
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	e000ed00 	.word	0xe000ed00
 800494c:	40023800 	.word	0x40023800
 8004950:	24003010 	.word	0x24003010

08004954 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b092      	sub	sp, #72	; 0x48
 8004958:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800495a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800495e:	2200      	movs	r2, #0
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	611a      	str	r2, [r3, #16]
 8004974:	615a      	str	r2, [r3, #20]
 8004976:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	2220      	movs	r2, #32
 800497c:	2100      	movs	r1, #0
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fa06 	bl	8004d90 <memset>

  htim1.Instance = TIM1;
 8004984:	4b33      	ldr	r3, [pc, #204]	; (8004a54 <MX_TIM1_Init+0x100>)
 8004986:	4a34      	ldr	r2, [pc, #208]	; (8004a58 <MX_TIM1_Init+0x104>)
 8004988:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84;
 800498a:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <MX_TIM1_Init+0x100>)
 800498c:	2254      	movs	r2, #84	; 0x54
 800498e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004990:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <MX_TIM1_Init+0x100>)
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8004996:	4b2f      	ldr	r3, [pc, #188]	; (8004a54 <MX_TIM1_Init+0x100>)
 8004998:	f644 6220 	movw	r2, #20000	; 0x4e20
 800499c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800499e:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <MX_TIM1_Init+0x100>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049a4:	4b2b      	ldr	r3, [pc, #172]	; (8004a54 <MX_TIM1_Init+0x100>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049aa:	4b2a      	ldr	r3, [pc, #168]	; (8004a54 <MX_TIM1_Init+0x100>)
 80049ac:	2280      	movs	r2, #128	; 0x80
 80049ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80049b0:	4828      	ldr	r0, [pc, #160]	; (8004a54 <MX_TIM1_Init+0x100>)
 80049b2:	f7fd fe5a 	bl	800266a <HAL_TIM_PWM_Init>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80049bc:	f7ff fe90 	bl	80046e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049c0:	2300      	movs	r3, #0
 80049c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80049c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80049cc:	4619      	mov	r1, r3
 80049ce:	4821      	ldr	r0, [pc, #132]	; (8004a54 <MX_TIM1_Init+0x100>)
 80049d0:	f7fe fb1c 	bl	800300c <HAL_TIMEx_MasterConfigSynchronization>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80049da:	f7ff fe81 	bl	80046e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80049de:	2360      	movs	r3, #96	; 0x60
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80049e6:	2300      	movs	r3, #0
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80049ea:	2300      	movs	r3, #0
 80049ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80049ee:	2300      	movs	r3, #0
 80049f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80049f2:	2300      	movs	r3, #0
 80049f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80049fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049fe:	2200      	movs	r2, #0
 8004a00:	4619      	mov	r1, r3
 8004a02:	4814      	ldr	r0, [pc, #80]	; (8004a54 <MX_TIM1_Init+0x100>)
 8004a04:	f7fd fe8e 	bl	8002724 <HAL_TIM_PWM_ConfigChannel>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004a0e:	f7ff fe67 	bl	80046e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004a30:	1d3b      	adds	r3, r7, #4
 8004a32:	4619      	mov	r1, r3
 8004a34:	4807      	ldr	r0, [pc, #28]	; (8004a54 <MX_TIM1_Init+0x100>)
 8004a36:	f7fe fb57 	bl	80030e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8004a40:	f7ff fe4e 	bl	80046e0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8004a44:	4803      	ldr	r0, [pc, #12]	; (8004a54 <MX_TIM1_Init+0x100>)
 8004a46:	f000 f89b 	bl	8004b80 <HAL_TIM_MspPostInit>

}
 8004a4a:	bf00      	nop
 8004a4c:	3748      	adds	r7, #72	; 0x48
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000168 	.word	0x20000168
 8004a58:	40010000 	.word	0x40010000

08004a5c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a62:	f107 0308 	add.w	r3, r7, #8
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	609a      	str	r2, [r3, #8]
 8004a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a70:	463b      	mov	r3, r7
 8004a72:	2200      	movs	r2, #0
 8004a74:	601a      	str	r2, [r3, #0]
 8004a76:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8004a78:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <MX_TIM3_Init+0x98>)
 8004a7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8004a7e:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004a80:	2254      	movs	r2, #84	; 0x54
 8004a82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a84:	4b1a      	ldr	r3, [pc, #104]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8004a8a:	4b19      	ldr	r3, [pc, #100]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004a8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a92:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a98:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004a9a:	2280      	movs	r2, #128	; 0x80
 8004a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004a9e:	4814      	ldr	r0, [pc, #80]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004aa0:	f7fd fd94 	bl	80025cc <HAL_TIM_Base_Init>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8004aaa:	f7ff fe19 	bl	80046e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004ab4:	f107 0308 	add.w	r3, r7, #8
 8004ab8:	4619      	mov	r1, r3
 8004aba:	480d      	ldr	r0, [pc, #52]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004abc:	f7fd fef8 	bl	80028b0 <HAL_TIM_ConfigClockSource>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004ac6:	f7ff fe0b 	bl	80046e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004aca:	2300      	movs	r3, #0
 8004acc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004ad2:	463b      	mov	r3, r7
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4806      	ldr	r0, [pc, #24]	; (8004af0 <MX_TIM3_Init+0x94>)
 8004ad8:	f7fe fa98 	bl	800300c <HAL_TIMEx_MasterConfigSynchronization>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004ae2:	f7ff fdfd 	bl	80046e0 <Error_Handler>
  }

}
 8004ae6:	bf00      	nop
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20000128 	.word	0x20000128
 8004af4:	40000400 	.word	0x40000400

08004af8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a0b      	ldr	r2, [pc, #44]	; (8004b34 <HAL_TIM_PWM_MspInit+0x3c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10d      	bne.n	8004b26 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b0a      	ldr	r3, [pc, #40]	; (8004b38 <HAL_TIM_PWM_MspInit+0x40>)
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	4a09      	ldr	r2, [pc, #36]	; (8004b38 <HAL_TIM_PWM_MspInit+0x40>)
 8004b14:	f043 0301 	orr.w	r3, r3, #1
 8004b18:	6453      	str	r3, [r2, #68]	; 0x44
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <HAL_TIM_PWM_MspInit+0x40>)
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004b26:	bf00      	nop
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40023800 	.word	0x40023800

08004b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a0b      	ldr	r2, [pc, #44]	; (8004b78 <HAL_TIM_Base_MspInit+0x3c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10d      	bne.n	8004b6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_TIM_Base_MspInit+0x40>)
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <HAL_TIM_Base_MspInit+0x40>)
 8004b58:	f043 0302 	orr.w	r3, r3, #2
 8004b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <HAL_TIM_Base_MspInit+0x40>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8004b6a:	bf00      	nop
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40000400 	.word	0x40000400
 8004b7c:	40023800 	.word	0x40023800

08004b80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	609a      	str	r2, [r3, #8]
 8004b94:	60da      	str	r2, [r3, #12]
 8004b96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a12      	ldr	r2, [pc, #72]	; (8004be8 <HAL_TIM_MspPostInit+0x68>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d11e      	bne.n	8004be0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <HAL_TIM_MspPostInit+0x6c>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4a10      	ldr	r2, [pc, #64]	; (8004bec <HAL_TIM_MspPostInit+0x6c>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_TIM_MspPostInit+0x6c>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004bbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bd4:	f107 030c 	add.w	r3, r7, #12
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <HAL_TIM_MspPostInit+0x70>)
 8004bdc:	f7fb fe98 	bl	8000910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004be0:	bf00      	nop
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	40020000 	.word	0x40020000

08004bf4 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 8004bf8:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004bfa:	4a12      	ldr	r2, [pc, #72]	; (8004c44 <MX_USART6_UART_Init+0x50>)
 8004bfc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004bfe:	4b10      	ldr	r3, [pc, #64]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004c06:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004c1a:	220c      	movs	r2, #12
 8004c1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004c2a:	4805      	ldr	r0, [pc, #20]	; (8004c40 <MX_USART6_UART_Init+0x4c>)
 8004c2c:	f7fe fad3 	bl	80031d6 <HAL_UART_Init>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8004c36:	f7ff fd53 	bl	80046e0 <Error_Handler>
  }

}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	200001a8 	.word	0x200001a8
 8004c44:	40011400 	.word	0x40011400

08004c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08a      	sub	sp, #40	; 0x28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c50:	f107 0314 	add.w	r3, r7, #20
 8004c54:	2200      	movs	r2, #0
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	605a      	str	r2, [r3, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <HAL_UART_MspInit+0x94>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d133      	bne.n	8004cd2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	4b1c      	ldr	r3, [pc, #112]	; (8004ce0 <HAL_UART_MspInit+0x98>)
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_UART_MspInit+0x98>)
 8004c74:	f043 0320 	orr.w	r3, r3, #32
 8004c78:	6453      	str	r3, [r2, #68]	; 0x44
 8004c7a:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_UART_MspInit+0x98>)
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f003 0320 	and.w	r3, r3, #32
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
 8004c8a:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <HAL_UART_MspInit+0x98>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	4a14      	ldr	r2, [pc, #80]	; (8004ce0 <HAL_UART_MspInit+0x98>)
 8004c90:	f043 0304 	orr.w	r3, r3, #4
 8004c94:	6313      	str	r3, [r2, #48]	; 0x30
 8004c96:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <HAL_UART_MspInit+0x98>)
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ca2:	23c0      	movs	r3, #192	; 0xc0
 8004ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004cb2:	2308      	movs	r3, #8
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4809      	ldr	r0, [pc, #36]	; (8004ce4 <HAL_UART_MspInit+0x9c>)
 8004cbe:	f7fb fe27 	bl	8000910 <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	2047      	movs	r0, #71	; 0x47
 8004cc8:	f7fb fdc9 	bl	800085e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004ccc:	2047      	movs	r0, #71	; 0x47
 8004cce:	f7fb fde2 	bl	8000896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004cd2:	bf00      	nop
 8004cd4:	3728      	adds	r7, #40	; 0x28
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40011400 	.word	0x40011400
 8004ce0:	40023800 	.word	0x40023800
 8004ce4:	40020800 	.word	0x40020800

08004ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004cec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004cee:	e003      	b.n	8004cf8 <LoopCopyDataInit>

08004cf0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004cf0:	4b0c      	ldr	r3, [pc, #48]	; (8004d24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004cf2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004cf4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004cf6:	3104      	adds	r1, #4

08004cf8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004cf8:	480b      	ldr	r0, [pc, #44]	; (8004d28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	; (8004d2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004cfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004cfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d00:	d3f6      	bcc.n	8004cf0 <CopyDataInit>
  ldr  r2, =_sbss
 8004d02:	4a0b      	ldr	r2, [pc, #44]	; (8004d30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d04:	e002      	b.n	8004d0c <LoopFillZerobss>

08004d06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d08:	f842 3b04 	str.w	r3, [r2], #4

08004d0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d10:	d3f9      	bcc.n	8004d06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004d12:	f7ff fde9 	bl	80048e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d16:	f000 f817 	bl	8004d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d1a:	f7ff fb99 	bl	8004450 <main>
  bx  lr    
 8004d1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004d20:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8004d24:	08005634 	.word	0x08005634
  ldr  r0, =_sdata
 8004d28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d2c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004d30:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004d34:	200001ec 	.word	0x200001ec

08004d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d38:	e7fe      	b.n	8004d38 <ADC_IRQHandler>
	...

08004d3c <__errno>:
 8004d3c:	4b01      	ldr	r3, [pc, #4]	; (8004d44 <__errno+0x8>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	2000000c 	.word	0x2000000c

08004d48 <__libc_init_array>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	4e0d      	ldr	r6, [pc, #52]	; (8004d80 <__libc_init_array+0x38>)
 8004d4c:	4c0d      	ldr	r4, [pc, #52]	; (8004d84 <__libc_init_array+0x3c>)
 8004d4e:	1ba4      	subs	r4, r4, r6
 8004d50:	10a4      	asrs	r4, r4, #2
 8004d52:	2500      	movs	r5, #0
 8004d54:	42a5      	cmp	r5, r4
 8004d56:	d109      	bne.n	8004d6c <__libc_init_array+0x24>
 8004d58:	4e0b      	ldr	r6, [pc, #44]	; (8004d88 <__libc_init_array+0x40>)
 8004d5a:	4c0c      	ldr	r4, [pc, #48]	; (8004d8c <__libc_init_array+0x44>)
 8004d5c:	f000 fc26 	bl	80055ac <_init>
 8004d60:	1ba4      	subs	r4, r4, r6
 8004d62:	10a4      	asrs	r4, r4, #2
 8004d64:	2500      	movs	r5, #0
 8004d66:	42a5      	cmp	r5, r4
 8004d68:	d105      	bne.n	8004d76 <__libc_init_array+0x2e>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d70:	4798      	blx	r3
 8004d72:	3501      	adds	r5, #1
 8004d74:	e7ee      	b.n	8004d54 <__libc_init_array+0xc>
 8004d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004d7a:	4798      	blx	r3
 8004d7c:	3501      	adds	r5, #1
 8004d7e:	e7f2      	b.n	8004d66 <__libc_init_array+0x1e>
 8004d80:	0800562c 	.word	0x0800562c
 8004d84:	0800562c 	.word	0x0800562c
 8004d88:	0800562c 	.word	0x0800562c
 8004d8c:	08005630 	.word	0x08005630

08004d90 <memset>:
 8004d90:	4402      	add	r2, r0
 8004d92:	4603      	mov	r3, r0
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d100      	bne.n	8004d9a <memset+0xa>
 8004d98:	4770      	bx	lr
 8004d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d9e:	e7f9      	b.n	8004d94 <memset+0x4>

08004da0 <siprintf>:
 8004da0:	b40e      	push	{r1, r2, r3}
 8004da2:	b500      	push	{lr}
 8004da4:	b09c      	sub	sp, #112	; 0x70
 8004da6:	ab1d      	add	r3, sp, #116	; 0x74
 8004da8:	9002      	str	r0, [sp, #8]
 8004daa:	9006      	str	r0, [sp, #24]
 8004dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004db0:	4809      	ldr	r0, [pc, #36]	; (8004dd8 <siprintf+0x38>)
 8004db2:	9107      	str	r1, [sp, #28]
 8004db4:	9104      	str	r1, [sp, #16]
 8004db6:	4909      	ldr	r1, [pc, #36]	; (8004ddc <siprintf+0x3c>)
 8004db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dbc:	9105      	str	r1, [sp, #20]
 8004dbe:	6800      	ldr	r0, [r0, #0]
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	a902      	add	r1, sp, #8
 8004dc4:	f000 f866 	bl	8004e94 <_svfiprintf_r>
 8004dc8:	9b02      	ldr	r3, [sp, #8]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	b01c      	add	sp, #112	; 0x70
 8004dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dd4:	b003      	add	sp, #12
 8004dd6:	4770      	bx	lr
 8004dd8:	2000000c 	.word	0x2000000c
 8004ddc:	ffff0208 	.word	0xffff0208

08004de0 <__ssputs_r>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	688e      	ldr	r6, [r1, #8]
 8004de6:	429e      	cmp	r6, r3
 8004de8:	4682      	mov	sl, r0
 8004dea:	460c      	mov	r4, r1
 8004dec:	4690      	mov	r8, r2
 8004dee:	4699      	mov	r9, r3
 8004df0:	d837      	bhi.n	8004e62 <__ssputs_r+0x82>
 8004df2:	898a      	ldrh	r2, [r1, #12]
 8004df4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004df8:	d031      	beq.n	8004e5e <__ssputs_r+0x7e>
 8004dfa:	6825      	ldr	r5, [r4, #0]
 8004dfc:	6909      	ldr	r1, [r1, #16]
 8004dfe:	1a6f      	subs	r7, r5, r1
 8004e00:	6965      	ldr	r5, [r4, #20]
 8004e02:	2302      	movs	r3, #2
 8004e04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e08:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e0c:	f109 0301 	add.w	r3, r9, #1
 8004e10:	443b      	add	r3, r7
 8004e12:	429d      	cmp	r5, r3
 8004e14:	bf38      	it	cc
 8004e16:	461d      	movcc	r5, r3
 8004e18:	0553      	lsls	r3, r2, #21
 8004e1a:	d530      	bpl.n	8004e7e <__ssputs_r+0x9e>
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	f000 fb2b 	bl	8005478 <_malloc_r>
 8004e22:	4606      	mov	r6, r0
 8004e24:	b950      	cbnz	r0, 8004e3c <__ssputs_r+0x5c>
 8004e26:	230c      	movs	r3, #12
 8004e28:	f8ca 3000 	str.w	r3, [sl]
 8004e2c:	89a3      	ldrh	r3, [r4, #12]
 8004e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e32:	81a3      	strh	r3, [r4, #12]
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e3c:	463a      	mov	r2, r7
 8004e3e:	6921      	ldr	r1, [r4, #16]
 8004e40:	f000 faa8 	bl	8005394 <memcpy>
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4e:	81a3      	strh	r3, [r4, #12]
 8004e50:	6126      	str	r6, [r4, #16]
 8004e52:	6165      	str	r5, [r4, #20]
 8004e54:	443e      	add	r6, r7
 8004e56:	1bed      	subs	r5, r5, r7
 8004e58:	6026      	str	r6, [r4, #0]
 8004e5a:	60a5      	str	r5, [r4, #8]
 8004e5c:	464e      	mov	r6, r9
 8004e5e:	454e      	cmp	r6, r9
 8004e60:	d900      	bls.n	8004e64 <__ssputs_r+0x84>
 8004e62:	464e      	mov	r6, r9
 8004e64:	4632      	mov	r2, r6
 8004e66:	4641      	mov	r1, r8
 8004e68:	6820      	ldr	r0, [r4, #0]
 8004e6a:	f000 fa9e 	bl	80053aa <memmove>
 8004e6e:	68a3      	ldr	r3, [r4, #8]
 8004e70:	1b9b      	subs	r3, r3, r6
 8004e72:	60a3      	str	r3, [r4, #8]
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	441e      	add	r6, r3
 8004e78:	6026      	str	r6, [r4, #0]
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e7dc      	b.n	8004e38 <__ssputs_r+0x58>
 8004e7e:	462a      	mov	r2, r5
 8004e80:	f000 fb54 	bl	800552c <_realloc_r>
 8004e84:	4606      	mov	r6, r0
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d1e2      	bne.n	8004e50 <__ssputs_r+0x70>
 8004e8a:	6921      	ldr	r1, [r4, #16]
 8004e8c:	4650      	mov	r0, sl
 8004e8e:	f000 faa5 	bl	80053dc <_free_r>
 8004e92:	e7c8      	b.n	8004e26 <__ssputs_r+0x46>

08004e94 <_svfiprintf_r>:
 8004e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e98:	461d      	mov	r5, r3
 8004e9a:	898b      	ldrh	r3, [r1, #12]
 8004e9c:	061f      	lsls	r7, r3, #24
 8004e9e:	b09d      	sub	sp, #116	; 0x74
 8004ea0:	4680      	mov	r8, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	d50f      	bpl.n	8004ec8 <_svfiprintf_r+0x34>
 8004ea8:	690b      	ldr	r3, [r1, #16]
 8004eaa:	b96b      	cbnz	r3, 8004ec8 <_svfiprintf_r+0x34>
 8004eac:	2140      	movs	r1, #64	; 0x40
 8004eae:	f000 fae3 	bl	8005478 <_malloc_r>
 8004eb2:	6020      	str	r0, [r4, #0]
 8004eb4:	6120      	str	r0, [r4, #16]
 8004eb6:	b928      	cbnz	r0, 8004ec4 <_svfiprintf_r+0x30>
 8004eb8:	230c      	movs	r3, #12
 8004eba:	f8c8 3000 	str.w	r3, [r8]
 8004ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec2:	e0c8      	b.n	8005056 <_svfiprintf_r+0x1c2>
 8004ec4:	2340      	movs	r3, #64	; 0x40
 8004ec6:	6163      	str	r3, [r4, #20]
 8004ec8:	2300      	movs	r3, #0
 8004eca:	9309      	str	r3, [sp, #36]	; 0x24
 8004ecc:	2320      	movs	r3, #32
 8004ece:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ed2:	2330      	movs	r3, #48	; 0x30
 8004ed4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ed8:	9503      	str	r5, [sp, #12]
 8004eda:	f04f 0b01 	mov.w	fp, #1
 8004ede:	4637      	mov	r7, r6
 8004ee0:	463d      	mov	r5, r7
 8004ee2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ee6:	b10b      	cbz	r3, 8004eec <_svfiprintf_r+0x58>
 8004ee8:	2b25      	cmp	r3, #37	; 0x25
 8004eea:	d13e      	bne.n	8004f6a <_svfiprintf_r+0xd6>
 8004eec:	ebb7 0a06 	subs.w	sl, r7, r6
 8004ef0:	d00b      	beq.n	8004f0a <_svfiprintf_r+0x76>
 8004ef2:	4653      	mov	r3, sl
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	4640      	mov	r0, r8
 8004efa:	f7ff ff71 	bl	8004de0 <__ssputs_r>
 8004efe:	3001      	adds	r0, #1
 8004f00:	f000 80a4 	beq.w	800504c <_svfiprintf_r+0x1b8>
 8004f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f06:	4453      	add	r3, sl
 8004f08:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0a:	783b      	ldrb	r3, [r7, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 809d 	beq.w	800504c <_svfiprintf_r+0x1b8>
 8004f12:	2300      	movs	r3, #0
 8004f14:	f04f 32ff 	mov.w	r2, #4294967295
 8004f18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f1c:	9304      	str	r3, [sp, #16]
 8004f1e:	9307      	str	r3, [sp, #28]
 8004f20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f24:	931a      	str	r3, [sp, #104]	; 0x68
 8004f26:	462f      	mov	r7, r5
 8004f28:	2205      	movs	r2, #5
 8004f2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004f2e:	4850      	ldr	r0, [pc, #320]	; (8005070 <_svfiprintf_r+0x1dc>)
 8004f30:	f7fb f956 	bl	80001e0 <memchr>
 8004f34:	9b04      	ldr	r3, [sp, #16]
 8004f36:	b9d0      	cbnz	r0, 8004f6e <_svfiprintf_r+0xda>
 8004f38:	06d9      	lsls	r1, r3, #27
 8004f3a:	bf44      	itt	mi
 8004f3c:	2220      	movmi	r2, #32
 8004f3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f42:	071a      	lsls	r2, r3, #28
 8004f44:	bf44      	itt	mi
 8004f46:	222b      	movmi	r2, #43	; 0x2b
 8004f48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f4c:	782a      	ldrb	r2, [r5, #0]
 8004f4e:	2a2a      	cmp	r2, #42	; 0x2a
 8004f50:	d015      	beq.n	8004f7e <_svfiprintf_r+0xea>
 8004f52:	9a07      	ldr	r2, [sp, #28]
 8004f54:	462f      	mov	r7, r5
 8004f56:	2000      	movs	r0, #0
 8004f58:	250a      	movs	r5, #10
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f60:	3b30      	subs	r3, #48	; 0x30
 8004f62:	2b09      	cmp	r3, #9
 8004f64:	d94d      	bls.n	8005002 <_svfiprintf_r+0x16e>
 8004f66:	b1b8      	cbz	r0, 8004f98 <_svfiprintf_r+0x104>
 8004f68:	e00f      	b.n	8004f8a <_svfiprintf_r+0xf6>
 8004f6a:	462f      	mov	r7, r5
 8004f6c:	e7b8      	b.n	8004ee0 <_svfiprintf_r+0x4c>
 8004f6e:	4a40      	ldr	r2, [pc, #256]	; (8005070 <_svfiprintf_r+0x1dc>)
 8004f70:	1a80      	subs	r0, r0, r2
 8004f72:	fa0b f000 	lsl.w	r0, fp, r0
 8004f76:	4318      	orrs	r0, r3
 8004f78:	9004      	str	r0, [sp, #16]
 8004f7a:	463d      	mov	r5, r7
 8004f7c:	e7d3      	b.n	8004f26 <_svfiprintf_r+0x92>
 8004f7e:	9a03      	ldr	r2, [sp, #12]
 8004f80:	1d11      	adds	r1, r2, #4
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	9103      	str	r1, [sp, #12]
 8004f86:	2a00      	cmp	r2, #0
 8004f88:	db01      	blt.n	8004f8e <_svfiprintf_r+0xfa>
 8004f8a:	9207      	str	r2, [sp, #28]
 8004f8c:	e004      	b.n	8004f98 <_svfiprintf_r+0x104>
 8004f8e:	4252      	negs	r2, r2
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	9207      	str	r2, [sp, #28]
 8004f96:	9304      	str	r3, [sp, #16]
 8004f98:	783b      	ldrb	r3, [r7, #0]
 8004f9a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f9c:	d10c      	bne.n	8004fb8 <_svfiprintf_r+0x124>
 8004f9e:	787b      	ldrb	r3, [r7, #1]
 8004fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa2:	d133      	bne.n	800500c <_svfiprintf_r+0x178>
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	1d1a      	adds	r2, r3, #4
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	9203      	str	r2, [sp, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfb8      	it	lt
 8004fb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fb4:	3702      	adds	r7, #2
 8004fb6:	9305      	str	r3, [sp, #20]
 8004fb8:	4d2e      	ldr	r5, [pc, #184]	; (8005074 <_svfiprintf_r+0x1e0>)
 8004fba:	7839      	ldrb	r1, [r7, #0]
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f7fb f90e 	bl	80001e0 <memchr>
 8004fc4:	b138      	cbz	r0, 8004fd6 <_svfiprintf_r+0x142>
 8004fc6:	2340      	movs	r3, #64	; 0x40
 8004fc8:	1b40      	subs	r0, r0, r5
 8004fca:	fa03 f000 	lsl.w	r0, r3, r0
 8004fce:	9b04      	ldr	r3, [sp, #16]
 8004fd0:	4303      	orrs	r3, r0
 8004fd2:	3701      	adds	r7, #1
 8004fd4:	9304      	str	r3, [sp, #16]
 8004fd6:	7839      	ldrb	r1, [r7, #0]
 8004fd8:	4827      	ldr	r0, [pc, #156]	; (8005078 <_svfiprintf_r+0x1e4>)
 8004fda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fde:	2206      	movs	r2, #6
 8004fe0:	1c7e      	adds	r6, r7, #1
 8004fe2:	f7fb f8fd 	bl	80001e0 <memchr>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d038      	beq.n	800505c <_svfiprintf_r+0x1c8>
 8004fea:	4b24      	ldr	r3, [pc, #144]	; (800507c <_svfiprintf_r+0x1e8>)
 8004fec:	bb13      	cbnz	r3, 8005034 <_svfiprintf_r+0x1a0>
 8004fee:	9b03      	ldr	r3, [sp, #12]
 8004ff0:	3307      	adds	r3, #7
 8004ff2:	f023 0307 	bic.w	r3, r3, #7
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	9303      	str	r3, [sp, #12]
 8004ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ffc:	444b      	add	r3, r9
 8004ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8005000:	e76d      	b.n	8004ede <_svfiprintf_r+0x4a>
 8005002:	fb05 3202 	mla	r2, r5, r2, r3
 8005006:	2001      	movs	r0, #1
 8005008:	460f      	mov	r7, r1
 800500a:	e7a6      	b.n	8004f5a <_svfiprintf_r+0xc6>
 800500c:	2300      	movs	r3, #0
 800500e:	3701      	adds	r7, #1
 8005010:	9305      	str	r3, [sp, #20]
 8005012:	4619      	mov	r1, r3
 8005014:	250a      	movs	r5, #10
 8005016:	4638      	mov	r0, r7
 8005018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800501c:	3a30      	subs	r2, #48	; 0x30
 800501e:	2a09      	cmp	r2, #9
 8005020:	d903      	bls.n	800502a <_svfiprintf_r+0x196>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0c8      	beq.n	8004fb8 <_svfiprintf_r+0x124>
 8005026:	9105      	str	r1, [sp, #20]
 8005028:	e7c6      	b.n	8004fb8 <_svfiprintf_r+0x124>
 800502a:	fb05 2101 	mla	r1, r5, r1, r2
 800502e:	2301      	movs	r3, #1
 8005030:	4607      	mov	r7, r0
 8005032:	e7f0      	b.n	8005016 <_svfiprintf_r+0x182>
 8005034:	ab03      	add	r3, sp, #12
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	4622      	mov	r2, r4
 800503a:	4b11      	ldr	r3, [pc, #68]	; (8005080 <_svfiprintf_r+0x1ec>)
 800503c:	a904      	add	r1, sp, #16
 800503e:	4640      	mov	r0, r8
 8005040:	f3af 8000 	nop.w
 8005044:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005048:	4681      	mov	r9, r0
 800504a:	d1d6      	bne.n	8004ffa <_svfiprintf_r+0x166>
 800504c:	89a3      	ldrh	r3, [r4, #12]
 800504e:	065b      	lsls	r3, r3, #25
 8005050:	f53f af35 	bmi.w	8004ebe <_svfiprintf_r+0x2a>
 8005054:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005056:	b01d      	add	sp, #116	; 0x74
 8005058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800505c:	ab03      	add	r3, sp, #12
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	4622      	mov	r2, r4
 8005062:	4b07      	ldr	r3, [pc, #28]	; (8005080 <_svfiprintf_r+0x1ec>)
 8005064:	a904      	add	r1, sp, #16
 8005066:	4640      	mov	r0, r8
 8005068:	f000 f882 	bl	8005170 <_printf_i>
 800506c:	e7ea      	b.n	8005044 <_svfiprintf_r+0x1b0>
 800506e:	bf00      	nop
 8005070:	080055f0 	.word	0x080055f0
 8005074:	080055f6 	.word	0x080055f6
 8005078:	080055fa 	.word	0x080055fa
 800507c:	00000000 	.word	0x00000000
 8005080:	08004de1 	.word	0x08004de1

08005084 <_printf_common>:
 8005084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005088:	4691      	mov	r9, r2
 800508a:	461f      	mov	r7, r3
 800508c:	688a      	ldr	r2, [r1, #8]
 800508e:	690b      	ldr	r3, [r1, #16]
 8005090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005094:	4293      	cmp	r3, r2
 8005096:	bfb8      	it	lt
 8005098:	4613      	movlt	r3, r2
 800509a:	f8c9 3000 	str.w	r3, [r9]
 800509e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050a2:	4606      	mov	r6, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	b112      	cbz	r2, 80050ae <_printf_common+0x2a>
 80050a8:	3301      	adds	r3, #1
 80050aa:	f8c9 3000 	str.w	r3, [r9]
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	0699      	lsls	r1, r3, #26
 80050b2:	bf42      	ittt	mi
 80050b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80050b8:	3302      	addmi	r3, #2
 80050ba:	f8c9 3000 	strmi.w	r3, [r9]
 80050be:	6825      	ldr	r5, [r4, #0]
 80050c0:	f015 0506 	ands.w	r5, r5, #6
 80050c4:	d107      	bne.n	80050d6 <_printf_common+0x52>
 80050c6:	f104 0a19 	add.w	sl, r4, #25
 80050ca:	68e3      	ldr	r3, [r4, #12]
 80050cc:	f8d9 2000 	ldr.w	r2, [r9]
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	42ab      	cmp	r3, r5
 80050d4:	dc28      	bgt.n	8005128 <_printf_common+0xa4>
 80050d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80050da:	6822      	ldr	r2, [r4, #0]
 80050dc:	3300      	adds	r3, #0
 80050de:	bf18      	it	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	0692      	lsls	r2, r2, #26
 80050e4:	d42d      	bmi.n	8005142 <_printf_common+0xbe>
 80050e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80050ea:	4639      	mov	r1, r7
 80050ec:	4630      	mov	r0, r6
 80050ee:	47c0      	blx	r8
 80050f0:	3001      	adds	r0, #1
 80050f2:	d020      	beq.n	8005136 <_printf_common+0xb2>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	68e5      	ldr	r5, [r4, #12]
 80050f8:	f8d9 2000 	ldr.w	r2, [r9]
 80050fc:	f003 0306 	and.w	r3, r3, #6
 8005100:	2b04      	cmp	r3, #4
 8005102:	bf08      	it	eq
 8005104:	1aad      	subeq	r5, r5, r2
 8005106:	68a3      	ldr	r3, [r4, #8]
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	bf0c      	ite	eq
 800510c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005110:	2500      	movne	r5, #0
 8005112:	4293      	cmp	r3, r2
 8005114:	bfc4      	itt	gt
 8005116:	1a9b      	subgt	r3, r3, r2
 8005118:	18ed      	addgt	r5, r5, r3
 800511a:	f04f 0900 	mov.w	r9, #0
 800511e:	341a      	adds	r4, #26
 8005120:	454d      	cmp	r5, r9
 8005122:	d11a      	bne.n	800515a <_printf_common+0xd6>
 8005124:	2000      	movs	r0, #0
 8005126:	e008      	b.n	800513a <_printf_common+0xb6>
 8005128:	2301      	movs	r3, #1
 800512a:	4652      	mov	r2, sl
 800512c:	4639      	mov	r1, r7
 800512e:	4630      	mov	r0, r6
 8005130:	47c0      	blx	r8
 8005132:	3001      	adds	r0, #1
 8005134:	d103      	bne.n	800513e <_printf_common+0xba>
 8005136:	f04f 30ff 	mov.w	r0, #4294967295
 800513a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800513e:	3501      	adds	r5, #1
 8005140:	e7c3      	b.n	80050ca <_printf_common+0x46>
 8005142:	18e1      	adds	r1, r4, r3
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	2030      	movs	r0, #48	; 0x30
 8005148:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800514c:	4422      	add	r2, r4
 800514e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005152:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005156:	3302      	adds	r3, #2
 8005158:	e7c5      	b.n	80050e6 <_printf_common+0x62>
 800515a:	2301      	movs	r3, #1
 800515c:	4622      	mov	r2, r4
 800515e:	4639      	mov	r1, r7
 8005160:	4630      	mov	r0, r6
 8005162:	47c0      	blx	r8
 8005164:	3001      	adds	r0, #1
 8005166:	d0e6      	beq.n	8005136 <_printf_common+0xb2>
 8005168:	f109 0901 	add.w	r9, r9, #1
 800516c:	e7d8      	b.n	8005120 <_printf_common+0x9c>
	...

08005170 <_printf_i>:
 8005170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005174:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005178:	460c      	mov	r4, r1
 800517a:	7e09      	ldrb	r1, [r1, #24]
 800517c:	b085      	sub	sp, #20
 800517e:	296e      	cmp	r1, #110	; 0x6e
 8005180:	4617      	mov	r7, r2
 8005182:	4606      	mov	r6, r0
 8005184:	4698      	mov	r8, r3
 8005186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005188:	f000 80b3 	beq.w	80052f2 <_printf_i+0x182>
 800518c:	d822      	bhi.n	80051d4 <_printf_i+0x64>
 800518e:	2963      	cmp	r1, #99	; 0x63
 8005190:	d036      	beq.n	8005200 <_printf_i+0x90>
 8005192:	d80a      	bhi.n	80051aa <_printf_i+0x3a>
 8005194:	2900      	cmp	r1, #0
 8005196:	f000 80b9 	beq.w	800530c <_printf_i+0x19c>
 800519a:	2958      	cmp	r1, #88	; 0x58
 800519c:	f000 8083 	beq.w	80052a6 <_printf_i+0x136>
 80051a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051a8:	e032      	b.n	8005210 <_printf_i+0xa0>
 80051aa:	2964      	cmp	r1, #100	; 0x64
 80051ac:	d001      	beq.n	80051b2 <_printf_i+0x42>
 80051ae:	2969      	cmp	r1, #105	; 0x69
 80051b0:	d1f6      	bne.n	80051a0 <_printf_i+0x30>
 80051b2:	6820      	ldr	r0, [r4, #0]
 80051b4:	6813      	ldr	r3, [r2, #0]
 80051b6:	0605      	lsls	r5, r0, #24
 80051b8:	f103 0104 	add.w	r1, r3, #4
 80051bc:	d52a      	bpl.n	8005214 <_printf_i+0xa4>
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	6011      	str	r1, [r2, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	da03      	bge.n	80051ce <_printf_i+0x5e>
 80051c6:	222d      	movs	r2, #45	; 0x2d
 80051c8:	425b      	negs	r3, r3
 80051ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80051ce:	486f      	ldr	r0, [pc, #444]	; (800538c <_printf_i+0x21c>)
 80051d0:	220a      	movs	r2, #10
 80051d2:	e039      	b.n	8005248 <_printf_i+0xd8>
 80051d4:	2973      	cmp	r1, #115	; 0x73
 80051d6:	f000 809d 	beq.w	8005314 <_printf_i+0x1a4>
 80051da:	d808      	bhi.n	80051ee <_printf_i+0x7e>
 80051dc:	296f      	cmp	r1, #111	; 0x6f
 80051de:	d020      	beq.n	8005222 <_printf_i+0xb2>
 80051e0:	2970      	cmp	r1, #112	; 0x70
 80051e2:	d1dd      	bne.n	80051a0 <_printf_i+0x30>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	f043 0320 	orr.w	r3, r3, #32
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	e003      	b.n	80051f6 <_printf_i+0x86>
 80051ee:	2975      	cmp	r1, #117	; 0x75
 80051f0:	d017      	beq.n	8005222 <_printf_i+0xb2>
 80051f2:	2978      	cmp	r1, #120	; 0x78
 80051f4:	d1d4      	bne.n	80051a0 <_printf_i+0x30>
 80051f6:	2378      	movs	r3, #120	; 0x78
 80051f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051fc:	4864      	ldr	r0, [pc, #400]	; (8005390 <_printf_i+0x220>)
 80051fe:	e055      	b.n	80052ac <_printf_i+0x13c>
 8005200:	6813      	ldr	r3, [r2, #0]
 8005202:	1d19      	adds	r1, r3, #4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6011      	str	r1, [r2, #0]
 8005208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800520c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005210:	2301      	movs	r3, #1
 8005212:	e08c      	b.n	800532e <_printf_i+0x1be>
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6011      	str	r1, [r2, #0]
 8005218:	f010 0f40 	tst.w	r0, #64	; 0x40
 800521c:	bf18      	it	ne
 800521e:	b21b      	sxthne	r3, r3
 8005220:	e7cf      	b.n	80051c2 <_printf_i+0x52>
 8005222:	6813      	ldr	r3, [r2, #0]
 8005224:	6825      	ldr	r5, [r4, #0]
 8005226:	1d18      	adds	r0, r3, #4
 8005228:	6010      	str	r0, [r2, #0]
 800522a:	0628      	lsls	r0, r5, #24
 800522c:	d501      	bpl.n	8005232 <_printf_i+0xc2>
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	e002      	b.n	8005238 <_printf_i+0xc8>
 8005232:	0668      	lsls	r0, r5, #25
 8005234:	d5fb      	bpl.n	800522e <_printf_i+0xbe>
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	4854      	ldr	r0, [pc, #336]	; (800538c <_printf_i+0x21c>)
 800523a:	296f      	cmp	r1, #111	; 0x6f
 800523c:	bf14      	ite	ne
 800523e:	220a      	movne	r2, #10
 8005240:	2208      	moveq	r2, #8
 8005242:	2100      	movs	r1, #0
 8005244:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005248:	6865      	ldr	r5, [r4, #4]
 800524a:	60a5      	str	r5, [r4, #8]
 800524c:	2d00      	cmp	r5, #0
 800524e:	f2c0 8095 	blt.w	800537c <_printf_i+0x20c>
 8005252:	6821      	ldr	r1, [r4, #0]
 8005254:	f021 0104 	bic.w	r1, r1, #4
 8005258:	6021      	str	r1, [r4, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d13d      	bne.n	80052da <_printf_i+0x16a>
 800525e:	2d00      	cmp	r5, #0
 8005260:	f040 808e 	bne.w	8005380 <_printf_i+0x210>
 8005264:	4665      	mov	r5, ip
 8005266:	2a08      	cmp	r2, #8
 8005268:	d10b      	bne.n	8005282 <_printf_i+0x112>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	07db      	lsls	r3, r3, #31
 800526e:	d508      	bpl.n	8005282 <_printf_i+0x112>
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	6862      	ldr	r2, [r4, #4]
 8005274:	429a      	cmp	r2, r3
 8005276:	bfde      	ittt	le
 8005278:	2330      	movle	r3, #48	; 0x30
 800527a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800527e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005282:	ebac 0305 	sub.w	r3, ip, r5
 8005286:	6123      	str	r3, [r4, #16]
 8005288:	f8cd 8000 	str.w	r8, [sp]
 800528c:	463b      	mov	r3, r7
 800528e:	aa03      	add	r2, sp, #12
 8005290:	4621      	mov	r1, r4
 8005292:	4630      	mov	r0, r6
 8005294:	f7ff fef6 	bl	8005084 <_printf_common>
 8005298:	3001      	adds	r0, #1
 800529a:	d14d      	bne.n	8005338 <_printf_i+0x1c8>
 800529c:	f04f 30ff 	mov.w	r0, #4294967295
 80052a0:	b005      	add	sp, #20
 80052a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052a6:	4839      	ldr	r0, [pc, #228]	; (800538c <_printf_i+0x21c>)
 80052a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80052ac:	6813      	ldr	r3, [r2, #0]
 80052ae:	6821      	ldr	r1, [r4, #0]
 80052b0:	1d1d      	adds	r5, r3, #4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6015      	str	r5, [r2, #0]
 80052b6:	060a      	lsls	r2, r1, #24
 80052b8:	d50b      	bpl.n	80052d2 <_printf_i+0x162>
 80052ba:	07ca      	lsls	r2, r1, #31
 80052bc:	bf44      	itt	mi
 80052be:	f041 0120 	orrmi.w	r1, r1, #32
 80052c2:	6021      	strmi	r1, [r4, #0]
 80052c4:	b91b      	cbnz	r3, 80052ce <_printf_i+0x15e>
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	f022 0220 	bic.w	r2, r2, #32
 80052cc:	6022      	str	r2, [r4, #0]
 80052ce:	2210      	movs	r2, #16
 80052d0:	e7b7      	b.n	8005242 <_printf_i+0xd2>
 80052d2:	064d      	lsls	r5, r1, #25
 80052d4:	bf48      	it	mi
 80052d6:	b29b      	uxthmi	r3, r3
 80052d8:	e7ef      	b.n	80052ba <_printf_i+0x14a>
 80052da:	4665      	mov	r5, ip
 80052dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80052e0:	fb02 3311 	mls	r3, r2, r1, r3
 80052e4:	5cc3      	ldrb	r3, [r0, r3]
 80052e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80052ea:	460b      	mov	r3, r1
 80052ec:	2900      	cmp	r1, #0
 80052ee:	d1f5      	bne.n	80052dc <_printf_i+0x16c>
 80052f0:	e7b9      	b.n	8005266 <_printf_i+0xf6>
 80052f2:	6813      	ldr	r3, [r2, #0]
 80052f4:	6825      	ldr	r5, [r4, #0]
 80052f6:	6961      	ldr	r1, [r4, #20]
 80052f8:	1d18      	adds	r0, r3, #4
 80052fa:	6010      	str	r0, [r2, #0]
 80052fc:	0628      	lsls	r0, r5, #24
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	d501      	bpl.n	8005306 <_printf_i+0x196>
 8005302:	6019      	str	r1, [r3, #0]
 8005304:	e002      	b.n	800530c <_printf_i+0x19c>
 8005306:	066a      	lsls	r2, r5, #25
 8005308:	d5fb      	bpl.n	8005302 <_printf_i+0x192>
 800530a:	8019      	strh	r1, [r3, #0]
 800530c:	2300      	movs	r3, #0
 800530e:	6123      	str	r3, [r4, #16]
 8005310:	4665      	mov	r5, ip
 8005312:	e7b9      	b.n	8005288 <_printf_i+0x118>
 8005314:	6813      	ldr	r3, [r2, #0]
 8005316:	1d19      	adds	r1, r3, #4
 8005318:	6011      	str	r1, [r2, #0]
 800531a:	681d      	ldr	r5, [r3, #0]
 800531c:	6862      	ldr	r2, [r4, #4]
 800531e:	2100      	movs	r1, #0
 8005320:	4628      	mov	r0, r5
 8005322:	f7fa ff5d 	bl	80001e0 <memchr>
 8005326:	b108      	cbz	r0, 800532c <_printf_i+0x1bc>
 8005328:	1b40      	subs	r0, r0, r5
 800532a:	6060      	str	r0, [r4, #4]
 800532c:	6863      	ldr	r3, [r4, #4]
 800532e:	6123      	str	r3, [r4, #16]
 8005330:	2300      	movs	r3, #0
 8005332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005336:	e7a7      	b.n	8005288 <_printf_i+0x118>
 8005338:	6923      	ldr	r3, [r4, #16]
 800533a:	462a      	mov	r2, r5
 800533c:	4639      	mov	r1, r7
 800533e:	4630      	mov	r0, r6
 8005340:	47c0      	blx	r8
 8005342:	3001      	adds	r0, #1
 8005344:	d0aa      	beq.n	800529c <_printf_i+0x12c>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	079b      	lsls	r3, r3, #30
 800534a:	d413      	bmi.n	8005374 <_printf_i+0x204>
 800534c:	68e0      	ldr	r0, [r4, #12]
 800534e:	9b03      	ldr	r3, [sp, #12]
 8005350:	4298      	cmp	r0, r3
 8005352:	bfb8      	it	lt
 8005354:	4618      	movlt	r0, r3
 8005356:	e7a3      	b.n	80052a0 <_printf_i+0x130>
 8005358:	2301      	movs	r3, #1
 800535a:	464a      	mov	r2, r9
 800535c:	4639      	mov	r1, r7
 800535e:	4630      	mov	r0, r6
 8005360:	47c0      	blx	r8
 8005362:	3001      	adds	r0, #1
 8005364:	d09a      	beq.n	800529c <_printf_i+0x12c>
 8005366:	3501      	adds	r5, #1
 8005368:	68e3      	ldr	r3, [r4, #12]
 800536a:	9a03      	ldr	r2, [sp, #12]
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	42ab      	cmp	r3, r5
 8005370:	dcf2      	bgt.n	8005358 <_printf_i+0x1e8>
 8005372:	e7eb      	b.n	800534c <_printf_i+0x1dc>
 8005374:	2500      	movs	r5, #0
 8005376:	f104 0919 	add.w	r9, r4, #25
 800537a:	e7f5      	b.n	8005368 <_printf_i+0x1f8>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1ac      	bne.n	80052da <_printf_i+0x16a>
 8005380:	7803      	ldrb	r3, [r0, #0]
 8005382:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005386:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800538a:	e76c      	b.n	8005266 <_printf_i+0xf6>
 800538c:	08005601 	.word	0x08005601
 8005390:	08005612 	.word	0x08005612

08005394 <memcpy>:
 8005394:	b510      	push	{r4, lr}
 8005396:	1e43      	subs	r3, r0, #1
 8005398:	440a      	add	r2, r1
 800539a:	4291      	cmp	r1, r2
 800539c:	d100      	bne.n	80053a0 <memcpy+0xc>
 800539e:	bd10      	pop	{r4, pc}
 80053a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053a8:	e7f7      	b.n	800539a <memcpy+0x6>

080053aa <memmove>:
 80053aa:	4288      	cmp	r0, r1
 80053ac:	b510      	push	{r4, lr}
 80053ae:	eb01 0302 	add.w	r3, r1, r2
 80053b2:	d807      	bhi.n	80053c4 <memmove+0x1a>
 80053b4:	1e42      	subs	r2, r0, #1
 80053b6:	4299      	cmp	r1, r3
 80053b8:	d00a      	beq.n	80053d0 <memmove+0x26>
 80053ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053be:	f802 4f01 	strb.w	r4, [r2, #1]!
 80053c2:	e7f8      	b.n	80053b6 <memmove+0xc>
 80053c4:	4283      	cmp	r3, r0
 80053c6:	d9f5      	bls.n	80053b4 <memmove+0xa>
 80053c8:	1881      	adds	r1, r0, r2
 80053ca:	1ad2      	subs	r2, r2, r3
 80053cc:	42d3      	cmn	r3, r2
 80053ce:	d100      	bne.n	80053d2 <memmove+0x28>
 80053d0:	bd10      	pop	{r4, pc}
 80053d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053d6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80053da:	e7f7      	b.n	80053cc <memmove+0x22>

080053dc <_free_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4605      	mov	r5, r0
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d045      	beq.n	8005470 <_free_r+0x94>
 80053e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053e8:	1f0c      	subs	r4, r1, #4
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bfb8      	it	lt
 80053ee:	18e4      	addlt	r4, r4, r3
 80053f0:	f000 f8d2 	bl	8005598 <__malloc_lock>
 80053f4:	4a1f      	ldr	r2, [pc, #124]	; (8005474 <_free_r+0x98>)
 80053f6:	6813      	ldr	r3, [r2, #0]
 80053f8:	4610      	mov	r0, r2
 80053fa:	b933      	cbnz	r3, 800540a <_free_r+0x2e>
 80053fc:	6063      	str	r3, [r4, #4]
 80053fe:	6014      	str	r4, [r2, #0]
 8005400:	4628      	mov	r0, r5
 8005402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005406:	f000 b8c8 	b.w	800559a <__malloc_unlock>
 800540a:	42a3      	cmp	r3, r4
 800540c:	d90c      	bls.n	8005428 <_free_r+0x4c>
 800540e:	6821      	ldr	r1, [r4, #0]
 8005410:	1862      	adds	r2, r4, r1
 8005412:	4293      	cmp	r3, r2
 8005414:	bf04      	itt	eq
 8005416:	681a      	ldreq	r2, [r3, #0]
 8005418:	685b      	ldreq	r3, [r3, #4]
 800541a:	6063      	str	r3, [r4, #4]
 800541c:	bf04      	itt	eq
 800541e:	1852      	addeq	r2, r2, r1
 8005420:	6022      	streq	r2, [r4, #0]
 8005422:	6004      	str	r4, [r0, #0]
 8005424:	e7ec      	b.n	8005400 <_free_r+0x24>
 8005426:	4613      	mov	r3, r2
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	b10a      	cbz	r2, 8005430 <_free_r+0x54>
 800542c:	42a2      	cmp	r2, r4
 800542e:	d9fa      	bls.n	8005426 <_free_r+0x4a>
 8005430:	6819      	ldr	r1, [r3, #0]
 8005432:	1858      	adds	r0, r3, r1
 8005434:	42a0      	cmp	r0, r4
 8005436:	d10b      	bne.n	8005450 <_free_r+0x74>
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	4401      	add	r1, r0
 800543c:	1858      	adds	r0, r3, r1
 800543e:	4282      	cmp	r2, r0
 8005440:	6019      	str	r1, [r3, #0]
 8005442:	d1dd      	bne.n	8005400 <_free_r+0x24>
 8005444:	6810      	ldr	r0, [r2, #0]
 8005446:	6852      	ldr	r2, [r2, #4]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	4401      	add	r1, r0
 800544c:	6019      	str	r1, [r3, #0]
 800544e:	e7d7      	b.n	8005400 <_free_r+0x24>
 8005450:	d902      	bls.n	8005458 <_free_r+0x7c>
 8005452:	230c      	movs	r3, #12
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	e7d3      	b.n	8005400 <_free_r+0x24>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	1821      	adds	r1, r4, r0
 800545c:	428a      	cmp	r2, r1
 800545e:	bf04      	itt	eq
 8005460:	6811      	ldreq	r1, [r2, #0]
 8005462:	6852      	ldreq	r2, [r2, #4]
 8005464:	6062      	str	r2, [r4, #4]
 8005466:	bf04      	itt	eq
 8005468:	1809      	addeq	r1, r1, r0
 800546a:	6021      	streq	r1, [r4, #0]
 800546c:	605c      	str	r4, [r3, #4]
 800546e:	e7c7      	b.n	8005400 <_free_r+0x24>
 8005470:	bd38      	pop	{r3, r4, r5, pc}
 8005472:	bf00      	nop
 8005474:	20000094 	.word	0x20000094

08005478 <_malloc_r>:
 8005478:	b570      	push	{r4, r5, r6, lr}
 800547a:	1ccd      	adds	r5, r1, #3
 800547c:	f025 0503 	bic.w	r5, r5, #3
 8005480:	3508      	adds	r5, #8
 8005482:	2d0c      	cmp	r5, #12
 8005484:	bf38      	it	cc
 8005486:	250c      	movcc	r5, #12
 8005488:	2d00      	cmp	r5, #0
 800548a:	4606      	mov	r6, r0
 800548c:	db01      	blt.n	8005492 <_malloc_r+0x1a>
 800548e:	42a9      	cmp	r1, r5
 8005490:	d903      	bls.n	800549a <_malloc_r+0x22>
 8005492:	230c      	movs	r3, #12
 8005494:	6033      	str	r3, [r6, #0]
 8005496:	2000      	movs	r0, #0
 8005498:	bd70      	pop	{r4, r5, r6, pc}
 800549a:	f000 f87d 	bl	8005598 <__malloc_lock>
 800549e:	4a21      	ldr	r2, [pc, #132]	; (8005524 <_malloc_r+0xac>)
 80054a0:	6814      	ldr	r4, [r2, #0]
 80054a2:	4621      	mov	r1, r4
 80054a4:	b991      	cbnz	r1, 80054cc <_malloc_r+0x54>
 80054a6:	4c20      	ldr	r4, [pc, #128]	; (8005528 <_malloc_r+0xb0>)
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	b91b      	cbnz	r3, 80054b4 <_malloc_r+0x3c>
 80054ac:	4630      	mov	r0, r6
 80054ae:	f000 f863 	bl	8005578 <_sbrk_r>
 80054b2:	6020      	str	r0, [r4, #0]
 80054b4:	4629      	mov	r1, r5
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 f85e 	bl	8005578 <_sbrk_r>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d124      	bne.n	800550a <_malloc_r+0x92>
 80054c0:	230c      	movs	r3, #12
 80054c2:	6033      	str	r3, [r6, #0]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f868 	bl	800559a <__malloc_unlock>
 80054ca:	e7e4      	b.n	8005496 <_malloc_r+0x1e>
 80054cc:	680b      	ldr	r3, [r1, #0]
 80054ce:	1b5b      	subs	r3, r3, r5
 80054d0:	d418      	bmi.n	8005504 <_malloc_r+0x8c>
 80054d2:	2b0b      	cmp	r3, #11
 80054d4:	d90f      	bls.n	80054f6 <_malloc_r+0x7e>
 80054d6:	600b      	str	r3, [r1, #0]
 80054d8:	50cd      	str	r5, [r1, r3]
 80054da:	18cc      	adds	r4, r1, r3
 80054dc:	4630      	mov	r0, r6
 80054de:	f000 f85c 	bl	800559a <__malloc_unlock>
 80054e2:	f104 000b 	add.w	r0, r4, #11
 80054e6:	1d23      	adds	r3, r4, #4
 80054e8:	f020 0007 	bic.w	r0, r0, #7
 80054ec:	1ac3      	subs	r3, r0, r3
 80054ee:	d0d3      	beq.n	8005498 <_malloc_r+0x20>
 80054f0:	425a      	negs	r2, r3
 80054f2:	50e2      	str	r2, [r4, r3]
 80054f4:	e7d0      	b.n	8005498 <_malloc_r+0x20>
 80054f6:	428c      	cmp	r4, r1
 80054f8:	684b      	ldr	r3, [r1, #4]
 80054fa:	bf16      	itet	ne
 80054fc:	6063      	strne	r3, [r4, #4]
 80054fe:	6013      	streq	r3, [r2, #0]
 8005500:	460c      	movne	r4, r1
 8005502:	e7eb      	b.n	80054dc <_malloc_r+0x64>
 8005504:	460c      	mov	r4, r1
 8005506:	6849      	ldr	r1, [r1, #4]
 8005508:	e7cc      	b.n	80054a4 <_malloc_r+0x2c>
 800550a:	1cc4      	adds	r4, r0, #3
 800550c:	f024 0403 	bic.w	r4, r4, #3
 8005510:	42a0      	cmp	r0, r4
 8005512:	d005      	beq.n	8005520 <_malloc_r+0xa8>
 8005514:	1a21      	subs	r1, r4, r0
 8005516:	4630      	mov	r0, r6
 8005518:	f000 f82e 	bl	8005578 <_sbrk_r>
 800551c:	3001      	adds	r0, #1
 800551e:	d0cf      	beq.n	80054c0 <_malloc_r+0x48>
 8005520:	6025      	str	r5, [r4, #0]
 8005522:	e7db      	b.n	80054dc <_malloc_r+0x64>
 8005524:	20000094 	.word	0x20000094
 8005528:	20000098 	.word	0x20000098

0800552c <_realloc_r>:
 800552c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800552e:	4607      	mov	r7, r0
 8005530:	4614      	mov	r4, r2
 8005532:	460e      	mov	r6, r1
 8005534:	b921      	cbnz	r1, 8005540 <_realloc_r+0x14>
 8005536:	4611      	mov	r1, r2
 8005538:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800553c:	f7ff bf9c 	b.w	8005478 <_malloc_r>
 8005540:	b922      	cbnz	r2, 800554c <_realloc_r+0x20>
 8005542:	f7ff ff4b 	bl	80053dc <_free_r>
 8005546:	4625      	mov	r5, r4
 8005548:	4628      	mov	r0, r5
 800554a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554c:	f000 f826 	bl	800559c <_malloc_usable_size_r>
 8005550:	42a0      	cmp	r0, r4
 8005552:	d20f      	bcs.n	8005574 <_realloc_r+0x48>
 8005554:	4621      	mov	r1, r4
 8005556:	4638      	mov	r0, r7
 8005558:	f7ff ff8e 	bl	8005478 <_malloc_r>
 800555c:	4605      	mov	r5, r0
 800555e:	2800      	cmp	r0, #0
 8005560:	d0f2      	beq.n	8005548 <_realloc_r+0x1c>
 8005562:	4631      	mov	r1, r6
 8005564:	4622      	mov	r2, r4
 8005566:	f7ff ff15 	bl	8005394 <memcpy>
 800556a:	4631      	mov	r1, r6
 800556c:	4638      	mov	r0, r7
 800556e:	f7ff ff35 	bl	80053dc <_free_r>
 8005572:	e7e9      	b.n	8005548 <_realloc_r+0x1c>
 8005574:	4635      	mov	r5, r6
 8005576:	e7e7      	b.n	8005548 <_realloc_r+0x1c>

08005578 <_sbrk_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4c06      	ldr	r4, [pc, #24]	; (8005594 <_sbrk_r+0x1c>)
 800557c:	2300      	movs	r3, #0
 800557e:	4605      	mov	r5, r0
 8005580:	4608      	mov	r0, r1
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	f7ff f984 	bl	8004890 <_sbrk>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_sbrk_r+0x1a>
 800558c:	6823      	ldr	r3, [r4, #0]
 800558e:	b103      	cbz	r3, 8005592 <_sbrk_r+0x1a>
 8005590:	602b      	str	r3, [r5, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	200001e8 	.word	0x200001e8

08005598 <__malloc_lock>:
 8005598:	4770      	bx	lr

0800559a <__malloc_unlock>:
 800559a:	4770      	bx	lr

0800559c <_malloc_usable_size_r>:
 800559c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a0:	1f18      	subs	r0, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bfbc      	itt	lt
 80055a6:	580b      	ldrlt	r3, [r1, r0]
 80055a8:	18c0      	addlt	r0, r0, r3
 80055aa:	4770      	bx	lr

080055ac <_init>:
 80055ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ae:	bf00      	nop
 80055b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055b2:	bc08      	pop	{r3}
 80055b4:	469e      	mov	lr, r3
 80055b6:	4770      	bx	lr

080055b8 <_fini>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	bf00      	nop
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr
